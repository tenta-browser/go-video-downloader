// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * collections/module.go: transpiled from collections.py
 */

package collections

import (
	Ωoperator "github.com/tenta-browser/go-video-downloader/gen/operator"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ϒ_itemgetter λ.Object
	ϒdefaultdict λ.Object
	ϒnamedtuple  λ.Object
)

func init() {
	λ.InitModule(func() {
		ϒ_itemgetter = Ωoperator.ϒitemgetter
		ϒdefaultdict = λ.Cal(λ.TypeType, λ.StrLiteral("defaultdict"), λ.NewTuple(λ.DictType), func() λ.Dict {
			var (
				ϒdefaultdict___getitem__ λ.Object
				ϒdefaultdict___init__    λ.Object
			)
			ϒdefaultdict___init__ = λ.NewFunction("__init__",
				[]λ.Param{
					{Name: "self"},
					{Name: "default_factory", Def: λ.None},
				},
				0, true, true,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒargs            = λargs[2]
						ϒdefault_factory = λargs[1]
						ϒkwargs          = λargs[3]
						ϒself            = λargs[0]
					)
					λ.Call(λ.GetAttr(λ.Cal(λ.SuperType, ϒdefaultdict, ϒself), "__init__", nil), λ.NewArgs(λ.Unpack(λ.AsStarred(ϒargs))...), λ.KWArgs{
						{Name: "", Value: ϒkwargs},
					})
					λ.SetAttr(ϒself, "default_factory", ϒdefault_factory)
					return λ.None
				})
			ϒdefaultdict___getitem__ = λ.NewFunction("__getitem__",
				[]λ.Param{
					{Name: "self"},
					{Name: "key"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒkey  = λargs[1]
						ϒself = λargs[0]
						ϒval  λ.Object
						τmp0  λ.Object
						τmp1  λ.Object
					)
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{λ.KeyErrorType, func(λex λ.BaseException) {
								if λ.IsTrue(λ.GetAttr(ϒself, "default_factory", nil)) {
									ϒval = λ.Calm(ϒself, "default_factory")
									λ.SetItem(ϒself, ϒkey, ϒval)
									λexit, λret = λ.BlockExitReturn, ϒval
									return
								}
								panic(λ.Raise(λex))
							}},
						)
						λexit, λret = λ.BlockExitReturn, λ.Calm(λ.Cal(λ.SuperType, ϒdefaultdict, ϒself), "__getitem__", ϒkey)
						return
						return λ.BlockExitNormally, nil
					}()
					if τmp0 == λ.BlockExitReturn {
						return τmp1
					}
					return λ.None
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"__getitem__": ϒdefaultdict___getitem__,
				"__init__":    ϒdefaultdict___init__,
			})
		}())
		ϒnamedtuple = λ.NewFunction("namedtuple",
			[]λ.Param{
				{Name: "typename"},
				{Name: "field_names"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒ__new__         λ.Object
					ϒ__repr__        λ.Object
					ϒ_asdict         λ.Object
					ϒ_make           λ.Object
					ϒclass_namespace λ.Object
					ϒfield_names     = λargs[1]
					ϒindex           λ.Object
					ϒname            λ.Object
					ϒrepr_fmt        λ.Object
					ϒresult          λ.Object
					ϒseen            λ.Object
					ϒtypename        = λargs[0]
					τmp0             λ.Object
					τmp1             λ.Object
					τmp2             λ.Object
				)
				if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒfield_names, λ.StrType)) {
					ϒfield_names = λ.Calm(λ.Calm(ϒfield_names, "replace", λ.StrLiteral(","), λ.StrLiteral(" ")), "split")
				}
				ϒfield_names = λ.Cal(λ.ListType, λ.Cal(λ.MapIteratorType, λ.StrType, ϒfield_names))
				ϒseen = λ.Cal(λ.SetType)
				τmp0 = λ.Cal(λ.BuiltinIter, ϒfield_names)
				for {
					if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
						break
					}
					ϒname = τmp1
					if λ.Contains(ϒseen, ϒname) {
						panic(λ.Raise(λ.Cal(λ.ValueErrorType, λ.Calm(λ.StrLiteral("Encountered duplicate field name: {!r}"), "format", ϒname))))
					}
					λ.Calm(ϒseen, "add", ϒname)
				}
				ϒrepr_fmt = λ.Add(λ.Add(λ.StrLiteral("("), λ.Calm(λ.StrLiteral(", "), "join", λ.Cal(λ.NewFunction("<generator>",
					nil,
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
							var (
								ϒname λ.Object
								τmp0  λ.Object
								τmp1  λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, ϒfield_names)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒname = τmp1
								λgy.Yield(λ.Calm(λ.StrLiteral("{}=%r"), "format", ϒname))
							}
							return λ.None
						})
					})))), λ.StrLiteral(")"))
				ϒ_make = λ.NewFunction("_make",
					[]λ.Param{
						{Name: "cls"},
						{Name: "iterable"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒcls      = λargs[0]
							ϒiterable = λargs[1]
							ϒresult   λ.Object
						)
						ϒresult = λ.Calm(λ.TupleType, "__new__", ϒcls, ϒiterable)
						if λ.IsTrue(λ.Ne(λ.Cal(λ.BuiltinLen, ϒresult), λ.Cal(λ.BuiltinLen, ϒfield_names))) {
							panic(λ.Raise(λ.Cal(λ.TypeErrorType, λ.Calm(λ.StrLiteral("Expected {} arguments, got {}"), "format", λ.Cal(λ.BuiltinLen, ϒfield_names), λ.Cal(λ.BuiltinLen, ϒresult)))))
						}
						return ϒresult
					})
				ϒ_make = λ.Cal(λ.ClassMethodType, ϒ_make)
				ϒ__new__ = λ.NewFunction("__new__",
					[]λ.Param{
						{Name: "cls"},
					},
					0, true, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒargs = λargs[1]
							ϒcls  = λargs[0]
						)
						return λ.Calm(ϒcls, "_make", ϒargs)
					})
				ϒ__repr__ = λ.NewFunction("__repr__",
					[]λ.Param{
						{Name: "self"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒself = λargs[0]
						)
						return λ.Add(λ.GetAttr(λ.GetAttr(ϒself, "__class__", nil), "__name__", nil), λ.Mod(ϒrepr_fmt, ϒself))
					})
				ϒ_asdict = λ.NewFunction("_asdict",
					[]λ.Param{
						{Name: "self"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒself = λargs[0]
						)
						return λ.Cal(λ.DictType, λ.Cal(λ.ZipIteratorType, λ.GetAttr(ϒself, "_fields", nil), ϒself))
					})
				ϒclass_namespace = λ.DictLiteral(map[string]λ.Object{
					"_fields":  ϒfield_names,
					"__new__":  ϒ__new__,
					"_make":    ϒ_make,
					"__repr__": ϒ__repr__,
					"_asdict":  ϒ_asdict,
				})
				τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.EnumerateIteratorType, ϒfield_names))
				for {
					if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
						break
					}
					τmp2 = λ.UnpackIterable(τmp1, 2)
					ϒindex = λ.GetItem(τmp2, λ.IntLiteral(0))
					ϒname = λ.GetItem(τmp2, λ.IntLiteral(1))
					λ.SetItem(ϒclass_namespace, ϒname, λ.Cal(λ.PropertyType, λ.Cal(ϒ_itemgetter, ϒindex)))
				}
				ϒresult = λ.Cal(λ.TypeType, ϒtypename, λ.NewTuple(λ.TupleType), ϒclass_namespace)
				return ϒresult
			})
	})
}
