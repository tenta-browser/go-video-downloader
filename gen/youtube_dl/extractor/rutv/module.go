// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * rutv/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/rutv.py
 */

package rutv

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	RUTVIE         λ.Object
	ϒint_or_none   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		RUTVIE = λ.Cal(λ.TypeType, λ.StrLiteral("RUTVIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				RUTVIE__VALID_URL    λ.Object
				RUTVIE__extract_url  λ.Object
				RUTVIE__real_extract λ.Object
			)
			RUTVIE__VALID_URL = λ.StrLiteral("(?x)\n                    https?://\n                        (?:test)?player\\.(?:rutv\\.ru|vgtrk\\.com)/\n                        (?P<path>\n                            flash\\d+v/container\\.swf\\?id=|\n                            iframe/(?P<type>swf|video|live)/id/|\n                            index/iframe/cast_id/\n                        )\n                        (?P<id>\\d+)\n                    ")
			RUTVIE__extract_url = λ.NewFunction("_extract_url",
				[]λ.Param{
					{Name: "cls"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls     = λargs[0]
						ϒmobj    λ.Object
						ϒwebpage = λargs[1]
					)
					_ = ϒcls
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("<iframe[^>]+?src=([\"\\'])(?P<url>https?://(?:test)?player\\.(?:rutv\\.ru|vgtrk\\.com)/(?:iframe/(?:swf|video|live)/id|index/iframe/cast_id)/.+?)\\1"), ϒwebpage)
					if λ.IsTrue(ϒmobj) {
						return λ.Calm(ϒmobj, "group", λ.StrLiteral("url"))
					}
					ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("<meta[^>]+?property=([\"\\'])og:video\\1[^>]+?content=([\"\\'])(?P<url>https?://(?:test)?player\\.(?:rutv\\.ru|vgtrk\\.com)/flash\\d+v/container\\.swf\\?id=.+?\\2)"), ϒwebpage)
					if λ.IsTrue(ϒmobj) {
						return λ.Calm(ϒmobj, "group", λ.StrLiteral("url"))
					}
					return λ.None
				})
			RUTVIE__extract_url = λ.Cal(λ.ClassMethodType, RUTVIE__extract_url)
			RUTVIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription        λ.Object
						ϒduration           λ.Object
						ϒfmt                λ.Object
						ϒformats            λ.Object
						ϒheight             λ.Object
						ϒis_live            λ.Object
						ϒjson_data          λ.Object
						ϒlinks              λ.Object
						ϒmedia              λ.Object
						ϒmedialist          λ.Object
						ϒmobj               λ.Object
						ϒplaylist           λ.Object
						ϒpreference         λ.Object
						ϒpriority_transport λ.Object
						ϒquality            λ.Object
						ϒself               = λargs[0]
						ϒthumbnail          λ.Object
						ϒtitle              λ.Object
						ϒtransport          λ.Object
						ϒurl                = λargs[1]
						ϒvideo_id           λ.Object
						ϒvideo_path         λ.Object
						ϒvideo_type         λ.Object
						ϒview_count         λ.Object
						ϒwidth              λ.Object
						τmp0                λ.Object
						τmp1                λ.Object
						τmp2                λ.Object
						τmp3                λ.Object
						τmp4                λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒvideo_path = λ.Calm(ϒmobj, "group", λ.StrLiteral("path"))
					if λ.IsTrue(λ.Cal(Ωre.ϒmatch, λ.StrLiteral("flash\\d+v"), ϒvideo_path)) {
						ϒvideo_type = λ.StrLiteral("video")
					} else {
						if λ.IsTrue(λ.Calm(ϒvideo_path, "startswith", λ.StrLiteral("iframe"))) {
							ϒvideo_type = λ.Calm(ϒmobj, "group", λ.StrLiteral("type"))
							if λ.IsTrue(λ.Eq(ϒvideo_type, λ.StrLiteral("swf"))) {
								ϒvideo_type = λ.StrLiteral("video")
							}
						} else {
							if λ.IsTrue(λ.Calm(ϒvideo_path, "startswith", λ.StrLiteral("index/iframe/cast_id"))) {
								ϒvideo_type = λ.StrLiteral("live")
							}
						}
					}
					ϒis_live = λ.Eq(ϒvideo_type, λ.StrLiteral("live"))
					ϒjson_data = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("http://player.rutv.ru/iframe/data%s/id/%s"), λ.NewTuple(
						func() λ.Object {
							if λ.IsTrue(ϒis_live) {
								return λ.StrLiteral("live")
							} else {
								return λ.StrLiteral("video")
							}
						}(),
						ϒvideo_id,
					)), ϒvideo_id, λ.StrLiteral("Downloading JSON"))
					if λ.IsTrue(λ.GetItem(ϒjson_data, λ.StrLiteral("errors"))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							λ.GetItem(ϒjson_data, λ.StrLiteral("errors")),
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒplaylist = λ.GetItem(λ.GetItem(ϒjson_data, λ.StrLiteral("data")), λ.StrLiteral("playlist"))
					ϒmedialist = λ.GetItem(ϒplaylist, λ.StrLiteral("medialist"))
					ϒmedia = λ.GetItem(ϒmedialist, λ.IntLiteral(0))
					if λ.IsTrue(λ.GetItem(ϒmedia, λ.StrLiteral("errors"))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							λ.GetItem(ϒmedia, λ.StrLiteral("errors")),
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒview_count = λ.Calm(ϒplaylist, "get", λ.StrLiteral("count_views"))
					ϒpriority_transport = λ.GetItem(ϒplaylist, λ.StrLiteral("priority_transport"))
					ϒthumbnail = λ.GetItem(ϒmedia, λ.StrLiteral("picture"))
					ϒwidth = λ.Cal(ϒint_or_none, λ.GetItem(ϒmedia, λ.StrLiteral("width")))
					ϒheight = λ.Cal(ϒint_or_none, λ.GetItem(ϒmedia, λ.StrLiteral("height")))
					ϒdescription = λ.GetItem(ϒmedia, λ.StrLiteral("anons"))
					ϒtitle = λ.GetItem(ϒmedia, λ.StrLiteral("title"))
					ϒduration = λ.Cal(ϒint_or_none, λ.Calm(ϒmedia, "get", λ.StrLiteral("duration")))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.GetItem(ϒmedia, λ.StrLiteral("sources")), "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = λ.UnpackIterable(τmp1, 2)
						ϒtransport = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒlinks = λ.GetItem(τmp2, λ.IntLiteral(1))
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒlinks, "items"))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							τmp4 = λ.UnpackIterable(τmp3, 2)
							ϒquality = λ.GetItem(τmp4, λ.IntLiteral(0))
							ϒurl = λ.GetItem(τmp4, λ.IntLiteral(1))
							ϒpreference = func() λ.Object {
								if λ.IsTrue(λ.Eq(ϒpriority_transport, ϒtransport)) {
									return λ.Neg(λ.IntLiteral(1))
								} else {
									return λ.Neg(λ.IntLiteral(2))
								}
							}()
							if λ.IsTrue(λ.Eq(ϒtransport, λ.StrLiteral("rtmp"))) {
								ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("^(?P<url>rtmp://[^/]+/(?P<app>.+))/(?P<playpath>.+)$"), ϒurl)
								if !λ.IsTrue(ϒmobj) {
									continue
								}
								ϒfmt = λ.DictLiteral(map[string]λ.Object{
									"url":        λ.Calm(ϒmobj, "group", λ.StrLiteral("url")),
									"play_path":  λ.Calm(ϒmobj, "group", λ.StrLiteral("playpath")),
									"app":        λ.Calm(ϒmobj, "group", λ.StrLiteral("app")),
									"page_url":   λ.StrLiteral("http://player.rutv.ru"),
									"player_url": λ.StrLiteral("http://player.rutv.ru/flash3v/osmf.swf?i=22"),
									"rtmp_live":  λ.True,
									"ext":        λ.StrLiteral("flv"),
									"vbr":        λ.Cal(λ.IntType, ϒquality),
									"preference": ϒpreference,
								})
							} else {
								if λ.IsTrue(λ.Eq(ϒtransport, λ.StrLiteral("m3u8"))) {
									λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
										ϒurl,
										ϒvideo_id,
										λ.StrLiteral("mp4"),
									), λ.KWArgs{
										{Name: "preference", Value: ϒpreference},
										{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
									}))
									continue
								} else {
									ϒfmt = λ.DictLiteral(map[string]λ.Object{
										"url": ϒurl,
									})
								}
							}
							λ.Calm(ϒfmt, "update", λ.DictLiteral(map[string]λ.Object{
								"width":  ϒwidth,
								"height": ϒheight,
								"format_id": λ.Mod(λ.StrLiteral("%s-%s"), λ.NewTuple(
									ϒtransport,
									ϒquality,
								)),
							}))
							λ.Calm(ϒformats, "append", ϒfmt)
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id": ϒvideo_id,
						"title": func() λ.Object {
							if λ.IsTrue(ϒis_live) {
								return λ.Calm(ϒself, "_live_title", ϒtitle)
							} else {
								return ϒtitle
							}
						}(),
						"description": ϒdescription,
						"thumbnail":   ϒthumbnail,
						"view_count":  ϒview_count,
						"duration":    ϒduration,
						"formats":     ϒformats,
						"is_live":     ϒis_live,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    RUTVIE__VALID_URL,
				"_extract_url":  RUTVIE__extract_url,
				"_real_extract": RUTVIE__real_extract,
			})
		}())
	})
}
