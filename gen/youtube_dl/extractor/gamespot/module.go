// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * gamespot/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/gamespot.py
 */

package gamespot

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωonce "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/once"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	GameSpotIE                   λ.Object
	OnceIE                       λ.Object
	ϒcompat_urllib_parse_unquote λ.Object
)

func init() {
	λ.InitModule(func() {
		OnceIE = Ωonce.OnceIE
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		GameSpotIE = λ.Cal(λ.TypeType, λ.StrLiteral("GameSpotIE"), λ.NewTuple(OnceIE), func() λ.Dict {
			var (
				GameSpotIE__VALID_URL    λ.Object
				GameSpotIE__real_extract λ.Object
			)
			GameSpotIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?gamespot\\.com/(?:video|article|review)s/(?:[^/]+/\\d+-|embed/)(?P<id>\\d+)")
			GameSpotIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata_video   λ.Object
						ϒf            λ.Object
						ϒformats      λ.Object
						ϒhttp_f       λ.Object
						ϒm3u8_formats λ.Object
						ϒm3u8_url     λ.Object
						ϒmpd_url      λ.Object
						ϒpage_id      λ.Object
						ϒself         = λargs[0]
						ϒstreams      λ.Object
						ϒtitle        λ.Object
						ϒurl          = λargs[1]
						ϒwebpage      λ.Object
						τmp0          λ.Object
						τmp1          λ.Object
					)
					ϒpage_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒpage_id)
					ϒdata_video = λ.Calm(ϒself, "_parse_json", λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("data-video=([\"\\'])({.*?})\\1"),
						ϒwebpage,
						λ.StrLiteral("video data"),
					), λ.KWArgs{
						{Name: "group", Value: λ.IntLiteral(2)},
					}), ϒpage_id)
					ϒtitle = λ.Cal(ϒcompat_urllib_parse_unquote, λ.GetItem(ϒdata_video, λ.StrLiteral("title")))
					ϒstreams = λ.GetItem(ϒdata_video, λ.StrLiteral("videoStreams"))
					ϒformats = λ.NewList()
					ϒm3u8_url = λ.Calm(ϒstreams, "get", λ.StrLiteral("adaptive_stream"))
					if λ.IsTrue(ϒm3u8_url) {
						ϒm3u8_formats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒm3u8_url,
							ϒpage_id,
							λ.StrLiteral("mp4"),
							λ.StrLiteral("m3u8_native"),
						), λ.KWArgs{
							{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
							{Name: "fatal", Value: λ.False},
						})
						τmp0 = λ.Cal(λ.BuiltinIter, ϒm3u8_formats)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒf = τmp1
							λ.Calm(ϒformats, "append", ϒf)
							ϒhttp_f = λ.Calm(ϒf, "copy")
							λ.DelItem(ϒhttp_f, λ.StrLiteral("manifest_url"))
							λ.Calm(ϒhttp_f, "update", λ.DictLiteral(map[string]λ.Object{
								"format_id": λ.Calm(λ.GetItem(ϒf, λ.StrLiteral("format_id")), "replace", λ.StrLiteral("hls-"), λ.StrLiteral("http-")),
								"protocol":  λ.StrLiteral("http"),
								"url":       λ.Calm(λ.GetItem(ϒf, λ.StrLiteral("url")), "replace", λ.StrLiteral(".m3u8"), λ.StrLiteral(".mp4")),
							}))
							λ.Calm(ϒformats, "append", ϒhttp_f)
						}
					}
					ϒmpd_url = λ.Calm(ϒstreams, "get", λ.StrLiteral("adaptive_dash"))
					if λ.IsTrue(ϒmpd_url) {
						λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
							ϒmpd_url,
							ϒpage_id,
						), λ.KWArgs{
							{Name: "mpd_id", Value: λ.StrLiteral("dash")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id": func() λ.Object {
							if λv := λ.Calm(ϒdata_video, "get", λ.StrLiteral("guid")); λ.IsTrue(λv) {
								return λv
							} else {
								return ϒpage_id
							}
						}(),
						"display_id":  ϒpage_id,
						"title":       ϒtitle,
						"formats":     ϒformats,
						"description": λ.Calm(ϒself, "_html_search_meta", λ.StrLiteral("description"), ϒwebpage),
						"thumbnail":   λ.Calm(ϒself, "_og_search_thumbnail", ϒwebpage),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    GameSpotIE__VALID_URL,
				"_real_extract": GameSpotIE__real_extract,
			})
		}())
	})
}
