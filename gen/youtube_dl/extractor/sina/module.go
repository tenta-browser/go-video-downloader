// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * sina/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/sina.py
 */

package sina

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError            λ.Object
	HEADRequest               λ.Object
	InfoExtractor             λ.Object
	SinaIE                    λ.Object
	ϒclean_html               λ.Object
	ϒget_element_by_attribute λ.Object
	ϒint_or_none              λ.Object
	ϒqualities                λ.Object
	ϒupdate_url_query         λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		HEADRequest = Ωutils.HEADRequest
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		ϒqualities = Ωutils.ϒqualities
		ϒget_element_by_attribute = Ωutils.ϒget_element_by_attribute
		ϒclean_html = Ωutils.ϒclean_html
		SinaIE = λ.Cal(λ.TypeType, λ.StrLiteral("SinaIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SinaIE__VALID_URL    λ.Object
				SinaIE__real_extract λ.Object
			)
			SinaIE__VALID_URL = λ.StrLiteral("(?x)https?://(?:.*?\\.)?video\\.sina\\.com\\.cn/\n                        (?:\n                            (?:view/|.*\\#)(?P<video_id>\\d+)|\n                            .+?/(?P<pseudo_id>[^/?#]+)(?:\\.s?html)|\n                            # This is used by external sites like Weibo\n                            api/sinawebApi/outplay.php/(?P<token>.+?)\\.swf\n                        )\n                  ")
			SinaIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription λ.Object
						ϒerror       λ.Object
						ϒfile_api    λ.Object
						ϒfile_id     λ.Object
						ϒformats     λ.Object
						ϒmobj        λ.Object
						ϒpreference  λ.Object
						ϒpseudo_id   λ.Object
						ϒquality     λ.Object
						ϒquality_id  λ.Object
						ϒrequest     λ.Object
						ϒself        = λargs[0]
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒurlh        λ.Object
						ϒvideo_data  λ.Object
						ϒvideo_id    λ.Object
						ϒwebpage     λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
						τmp2         λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("video_id"))
					if !λ.IsTrue(ϒvideo_id) {
						if λ.Calm(ϒmobj, "group", λ.StrLiteral("token")) != λ.None {
							λ.Calm(ϒself, "to_screen", λ.StrLiteral("Getting video id"))
							ϒrequest = λ.Cal(HEADRequest, ϒurl)
							τmp0 = λ.Calm(ϒself, "_download_webpage_handle", ϒrequest, λ.StrLiteral("NA"), λ.False)
							_ = λ.GetItem(τmp0, λ.IntLiteral(0))
							ϒurlh = λ.GetItem(τmp0, λ.IntLiteral(1))
							return λ.Calm(ϒself, "_real_extract", λ.Calm(ϒurlh, "geturl"))
						} else {
							ϒpseudo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("pseudo_id"))
							ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒpseudo_id)
							ϒerror = λ.Cal(ϒget_element_by_attribute, λ.StrLiteral("class"), λ.StrLiteral("errtitle"), ϒwebpage)
							if λ.IsTrue(ϒerror) {
								panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("%s said: %s"), λ.NewTuple(
									λ.GetAttr(ϒself, "IE_NAME", nil),
									λ.Cal(ϒclean_html, ϒerror),
								))), λ.KWArgs{
									{Name: "expected", Value: λ.True},
								})))
							}
							ϒvideo_id = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("video_id\\s*:\\s*'(\\d+)'"), ϒwebpage, λ.StrLiteral("video id"))
						}
					}
					ϒvideo_data = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("http://s.video.sina.com.cn/video/h5play"),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"video_id": ϒvideo_id,
						})},
					})
					if λ.IsTrue(λ.Ne(λ.GetItem(ϒvideo_data, λ.StrLiteral("code")), λ.IntLiteral(1))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							λ.GetItem(ϒvideo_data, λ.StrLiteral("message")),
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					} else {
						ϒvideo_data = λ.GetItem(ϒvideo_data, λ.StrLiteral("data"))
						ϒtitle = λ.GetItem(ϒvideo_data, λ.StrLiteral("title"))
						ϒdescription = λ.Calm(ϒvideo_data, "get", λ.StrLiteral("description"))
						if λ.IsTrue(ϒdescription) {
							ϒdescription = λ.Calm(ϒdescription, "strip")
						}
						ϒpreference = λ.Cal(ϒqualities, λ.NewList(
							λ.StrLiteral("cif"),
							λ.StrLiteral("sd"),
							λ.StrLiteral("hd"),
							λ.StrLiteral("fhd"),
							λ.StrLiteral("ffd"),
						))
						ϒformats = λ.NewList()
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.Calm(λ.Calm(ϒvideo_data, "get", λ.StrLiteral("videos"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("mp4"), λ.DictLiteral(map[λ.Object]λ.Object{})), "items"))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							τmp2 = τmp1
							ϒquality_id = λ.GetItem(τmp2, λ.IntLiteral(0))
							ϒquality = λ.GetItem(τmp2, λ.IntLiteral(1))
							ϒfile_api = λ.Calm(ϒquality, "get", λ.StrLiteral("file_api"))
							ϒfile_id = λ.Calm(ϒquality, "get", λ.StrLiteral("file_id"))
							if λ.IsTrue(func() λ.Object {
								if λv := λ.NewBool(!λ.IsTrue(ϒfile_api)); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewBool(!λ.IsTrue(ϒfile_id))
								}
							}()) {
								continue
							}
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"format_id": ϒquality_id,
								"url": λ.Cal(ϒupdate_url_query, ϒfile_api, λ.DictLiteral(map[string]λ.Object{
									"vid": ϒfile_id,
								})),
								"preference": λ.Cal(ϒpreference, ϒquality_id),
								"ext":        λ.StrLiteral("mp4"),
							}))
						}
						λ.Calm(ϒself, "_sort_formats", ϒformats)
						return λ.DictLiteral(map[string]λ.Object{
							"id":          ϒvideo_id,
							"title":       ϒtitle,
							"description": ϒdescription,
							"thumbnail":   λ.Calm(ϒvideo_data, "get", λ.StrLiteral("image")),
							"duration":    λ.Cal(ϒint_or_none, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("length"))),
							"timestamp":   λ.Cal(ϒint_or_none, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("create_time"))),
							"formats":     ϒformats,
						})
					}
					return λ.None
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    SinaIE__VALID_URL,
				"_real_extract": SinaIE__real_extract,
			})
		}())
	})
}
