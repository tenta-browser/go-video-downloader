// Code generated by transpiler. DO NOT EDIT.
// +build restricted

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * youtube/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/youtube.py
 */

package youtube

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError           λ.Object
	InfoExtractor            λ.Object
	YoutubeBaseInfoExtractor λ.Object
	YoutubeIE                λ.Object
	YoutubePlaylistIE        λ.Object
	YoutubeTabIE             λ.Object
	YoutubeYtBeIE            λ.Object
	YoutubeYtUserIE          λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		YoutubeBaseInfoExtractor = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeBaseInfoExtractor"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubeBaseInfoExtractor__PLAYLIST_ID_RE λ.Object
				YoutubeBaseInfoExtractor__real_extract   λ.Object
			)
			YoutubeBaseInfoExtractor__PLAYLIST_ID_RE = λ.StrLiteral("(?:(?:PL|LL|EC|UU|FL|RD|UL|TL|PU|OLAK5uy_)[0-9A-Za-z-_]{10,}|RDMM)")
			YoutubeBaseInfoExtractor__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "_"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒ_    = λargs[1]
						ϒself = λargs[0]
					)
					_ = ϒ_
					_ = ϒself
					panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("YOUTUBE_PLACEHOLDER")), λ.KWArgs{
						{Name: "expected", Value: λ.True},
					})))
					return λ.None
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_PLAYLIST_ID_RE": YoutubeBaseInfoExtractor__PLAYLIST_ID_RE,
				"_real_extract":   YoutubeBaseInfoExtractor__real_extract,
			})
		}())
		YoutubeIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeIE"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeIE__GEO_BYPASS      λ.Object
				YoutubeIE__INVIDIOUS_SITES λ.Object
				YoutubeIE__VALID_URL       λ.Object
			)
			YoutubeIE__INVIDIOUS_SITES = λ.NewTuple(
				λ.StrLiteral("(?:www\\.)?redirect\\.invidious\\.io"),
				λ.StrLiteral("(?:(?:www|dev)\\.)?invidio\\.us"),
				λ.StrLiteral("(?:(?:www|no)\\.)?invidiou\\.sh"),
				λ.StrLiteral("(?:(?:www|fi)\\.)?invidious\\.snopyta\\.org"),
				λ.StrLiteral("(?:www\\.)?invidious\\.kabi\\.tk"),
				λ.StrLiteral("(?:www\\.)?invidious\\.13ad\\.de"),
				λ.StrLiteral("(?:www\\.)?invidious\\.mastodon\\.host"),
				λ.StrLiteral("(?:www\\.)?invidious\\.zapashcanon\\.fr"),
				λ.StrLiteral("(?:www\\.)?invidious\\.kavin\\.rocks"),
				λ.StrLiteral("(?:www\\.)?invidious\\.tinfoil-hat\\.net"),
				λ.StrLiteral("(?:www\\.)?invidious\\.himiko\\.cloud"),
				λ.StrLiteral("(?:www\\.)?invidious\\.reallyancient\\.tech"),
				λ.StrLiteral("(?:www\\.)?invidious\\.tube"),
				λ.StrLiteral("(?:www\\.)?invidiou\\.site"),
				λ.StrLiteral("(?:www\\.)?invidious\\.site"),
				λ.StrLiteral("(?:www\\.)?invidious\\.xyz"),
				λ.StrLiteral("(?:www\\.)?invidious\\.nixnet\\.xyz"),
				λ.StrLiteral("(?:www\\.)?invidious\\.048596\\.xyz"),
				λ.StrLiteral("(?:www\\.)?invidious\\.drycat\\.fr"),
				λ.StrLiteral("(?:www\\.)?inv\\.skyn3t\\.in"),
				λ.StrLiteral("(?:www\\.)?tube\\.poal\\.co"),
				λ.StrLiteral("(?:www\\.)?tube\\.connect\\.cafe"),
				λ.StrLiteral("(?:www\\.)?vid\\.wxzm\\.sx"),
				λ.StrLiteral("(?:www\\.)?vid\\.mint\\.lgbt"),
				λ.StrLiteral("(?:www\\.)?vid\\.puffyan\\.us"),
				λ.StrLiteral("(?:www\\.)?yewtu\\.be"),
				λ.StrLiteral("(?:www\\.)?yt\\.elukerio\\.org"),
				λ.StrLiteral("(?:www\\.)?yt\\.lelux\\.fi"),
				λ.StrLiteral("(?:www\\.)?invidious\\.ggc-project\\.de"),
				λ.StrLiteral("(?:www\\.)?yt\\.maisputain\\.ovh"),
				λ.StrLiteral("(?:www\\.)?ytprivate\\.com"),
				λ.StrLiteral("(?:www\\.)?invidious\\.13ad\\.de"),
				λ.StrLiteral("(?:www\\.)?invidious\\.toot\\.koeln"),
				λ.StrLiteral("(?:www\\.)?invidious\\.fdn\\.fr"),
				λ.StrLiteral("(?:www\\.)?watch\\.nettohikari\\.com"),
				λ.StrLiteral("(?:www\\.)?kgg2m7yk5aybusll\\.onion"),
				λ.StrLiteral("(?:www\\.)?qklhadlycap4cnod\\.onion"),
				λ.StrLiteral("(?:www\\.)?axqzx4s6s54s32yentfqojs3x5i7faxza6xo3ehd4bzzsg2ii4fv2iid\\.onion"),
				λ.StrLiteral("(?:www\\.)?c7hqkpkpemu6e7emz5b4vyz7idjgdvgaaa3dyimmeojqbgpea3xqjoid\\.onion"),
				λ.StrLiteral("(?:www\\.)?fz253lmuao3strwbfbmx46yu7acac2jz27iwtorgmbqlkurlclmancad\\.onion"),
				λ.StrLiteral("(?:www\\.)?invidious\\.l4qlywnpwqsluw65ts7md3khrivpirse744un3x7mlskqauz5pyuzgqd\\.onion"),
				λ.StrLiteral("(?:www\\.)?owxfohz4kjyv25fvlqilyxast7inivgiktls3th44jhk3ej3i7ya\\.b32\\.i2p"),
				λ.StrLiteral("(?:www\\.)?4l2dgddgsrkf2ous66i6seeyi6etzfgrue332grh2n7madpwopotugyd\\.onion"),
			)
			YoutubeIE__VALID_URL = λ.Mod(λ.StrLiteral("(?x)^\n                     (\n                         (?:https?://|//)                                    # http(s):// or protocol-independent URL\n                         (?:(?:(?:(?:\\w+\\.)?[yY][oO][uU][tT][uU][bB][eE](?:-nocookie|kids)?\\.com|\n                            (?:www\\.)?deturl\\.com/www\\.youtube\\.com|\n                            (?:www\\.)?pwnyoutube\\.com|\n                            (?:www\\.)?hooktube\\.com|\n                            (?:www\\.)?yourepeat\\.com|\n                            tube\\.majestyc\\.net|\n                            %(invidious)s|\n                            youtube\\.googleapis\\.com)/                        # the various hostnames, with wildcard subdomains\n                         (?:.*?\\#/)?                                          # handle anchor (#/) redirect urls\n                         (?:                                                  # the various things that can precede the ID:\n                             (?:(?:v|embed|e)/(?!videoseries))                # v/ or embed/ or e/\n                             |(?:                                             # or the v= param in all its forms\n                                 (?:(?:watch|movie)(?:_popup)?(?:\\.php)?/?)?  # preceding watch(_popup|.php) or nothing (like /?v=xxxx)\n                                 (?:\\?|\\#!?)                                  # the params delimiter ? or # or #!\n                                 (?:.*?[&;])??                                # any other preceding param (like /?s=tuff&v=xxxx or ?s=tuff&amp;v=V36LpHqtcDY)\n                                 v=\n                             )\n                         ))\n                         |(?:\n                            youtu\\.be|                                        # just youtu.be/xxxx\n                            vid\\.plus|                                        # or vid.plus/xxxx\n                            zwearz\\.com/watch|                                # or zwearz.com/watch/xxxx\n                            %(invidious)s\n                         )/\n                         |(?:www\\.)?cleanvideosearch\\.com/media/action/yt/watch\\?videoId=\n                         )\n                     )?                                                       # all until now is optional -> you can pass the naked ID\n                     ([0-9A-Za-z_-]{11})                                      # here is it! the YouTube video ID\n                     #(?(1).+)?                                                # if we found the ID, everything can follow\n                     "), λ.DictLiteral(map[string]λ.Object{
				"invidious": λ.Calm(λ.StrLiteral("|"), "join", YoutubeIE__INVIDIOUS_SITES),
			}))
			YoutubeIE__GEO_BYPASS = λ.False
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_GEO_BYPASS":      YoutubeIE__GEO_BYPASS,
				"_INVIDIOUS_SITES": YoutubeIE__INVIDIOUS_SITES,
				"_VALID_URL":       YoutubeIE__VALID_URL,
			})
		}())
		YoutubeTabIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeTabIE"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeTabIE__VALID_URL λ.Object
			)
			YoutubeTabIE__VALID_URL = λ.StrLiteral("(?x)\n                    https?://\n                        (?:\\w+\\.)?\n                        (?:\n                            youtube(?:kids)?\\.com|\n                            invidio\\.us\n                        )/\n                        (?:\n                            (?:channel|c|user|feed|hashtag)/|\n                            (?:playlist|watch)\\?.*?\\blist=|\n                            (?!(?:watch|embed|v|e)\\b)\n                        )\n                        (?P<id>[^/?\\#&]+)\n                    ")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeTabIE__VALID_URL,
			})
		}())
		YoutubePlaylistIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubePlaylistIE"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubePlaylistIE__VALID_URL λ.Object
			)
			YoutubePlaylistIE__VALID_URL = λ.Mod(λ.StrLiteral("(?x)(?:\n                        (?:https?://)?\n                        (?:\\w+\\.)?\n                        (?:\n                            (?:\n                                youtube(?:kids)?\\.com|\n                                invidio\\.us\n                            )\n                            /.*?\\?.*?\\blist=\n                        )?\n                        (?P<id>%(playlist_id)s)\n                     )"), λ.DictLiteral(map[string]λ.Object{
				"playlist_id": λ.GetAttr(YoutubeBaseInfoExtractor, "_PLAYLIST_ID_RE", nil),
			}))
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubePlaylistIE__VALID_URL,
			})
		}())
		YoutubeYtBeIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeYtBeIE"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeYtBeIE__VALID_URL λ.Object
			)
			YoutubeYtBeIE__VALID_URL = λ.Mod(λ.StrLiteral("https?://youtu\\.be/(?P<id>[0-9A-Za-z_-]{11})/*?.*?\\blist=(?P<playlist_id>%(playlist_id)s)"), λ.DictLiteral(map[string]λ.Object{
				"playlist_id": λ.GetAttr(YoutubeBaseInfoExtractor, "_PLAYLIST_ID_RE", nil),
			}))
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeYtBeIE__VALID_URL,
			})
		}())
		YoutubeYtUserIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeYtUserIE"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeYtUserIE__VALID_URL λ.Object
			)
			YoutubeYtUserIE__VALID_URL = λ.StrLiteral("ytuser:(?P<id>.+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeYtUserIE__VALID_URL,
			})
		}())
	})
}
