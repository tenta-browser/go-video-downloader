// Code generated by transpiler. DO NOT EDIT.
// +build !restricted

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * youtube/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/youtube.py
 */

package youtube

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError                    λ.Object
	InfoExtractor                     λ.Object
	SearchInfoExtractor               λ.Object
	YoutubeBaseInfoExtractor          λ.Object
	YoutubeFavouritesIE               λ.Object
	YoutubeFeedsInfoExtractor         λ.Object
	YoutubeHistoryIE                  λ.Object
	YoutubeIE                         λ.Object
	YoutubePlaylistIE                 λ.Object
	YoutubeRecommendedIE              λ.Object
	YoutubeSearchIE                   λ.Object
	YoutubeSubscriptionsIE            λ.Object
	YoutubeTabIE                      λ.Object
	YoutubeTruncatedIDIE              λ.Object
	YoutubeTruncatedURLIE             λ.Object
	YoutubeWatchLaterIE               λ.Object
	YoutubeYtBeIE                     λ.Object
	YoutubeYtUserIE                   λ.Object
	ϒclean_html                       λ.Object
	ϒcompat_chr                       λ.Object
	ϒcompat_parse_qs                  λ.Object
	ϒcompat_str                       λ.Object
	ϒcompat_urllib_parse_unquote_plus λ.Object
	ϒcompat_urllib_parse_urlencode    λ.Object
	ϒcompat_urllib_parse_urlparse     λ.Object
	ϒdict_get                         λ.Object
	ϒfloat_or_none                    λ.Object
	ϒint_or_none                      λ.Object
	ϒmimetype2ext                     λ.Object
	ϒparse_codecs                     λ.Object
	ϒparse_duration                   λ.Object
	ϒqualities                        λ.Object
	ϒremove_start                     λ.Object
	ϒsmuggle_url                      λ.Object
	ϒstr_or_none                      λ.Object
	ϒstr_to_int                       λ.Object
	ϒtry_get                          λ.Object
	ϒunescapeHTML                     λ.Object
	ϒunified_strdate                  λ.Object
	ϒunsmuggle_url                    λ.Object
	ϒupdate_url_query                 λ.Object
	ϒurl_or_none                      λ.Object
	ϒurlencode_postdata               λ.Object
	ϒurljoin                          λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		SearchInfoExtractor = Ωcommon.SearchInfoExtractor
		ϒcompat_chr = Ωcompat.ϒcompat_chr
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒcompat_urllib_parse_unquote_plus = Ωcompat.ϒcompat_urllib_parse_unquote_plus
		ϒcompat_urllib_parse_urlencode = Ωcompat.ϒcompat_urllib_parse_urlencode
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		ExtractorError = Ωutils.ExtractorError
		ϒclean_html = Ωutils.ϒclean_html
		ϒdict_get = Ωutils.ϒdict_get
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmimetype2ext = Ωutils.ϒmimetype2ext
		ϒparse_codecs = Ωutils.ϒparse_codecs
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒqualities = Ωutils.ϒqualities
		ϒremove_start = Ωutils.ϒremove_start
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ϒtry_get = Ωutils.ϒtry_get
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒunsmuggle_url = Ωutils.ϒunsmuggle_url
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		ϒurl_or_none = Ωutils.ϒurl_or_none
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		ϒurljoin = Ωutils.ϒurljoin
		YoutubeBaseInfoExtractor = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeBaseInfoExtractor"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubeBaseInfoExtractor__PLAYLIST_ID_RE     λ.Object
				YoutubeBaseInfoExtractor__initialize_consent λ.Object
				YoutubeBaseInfoExtractor__real_initialize    λ.Object
			)
			YoutubeBaseInfoExtractor__PLAYLIST_ID_RE = λ.StrLiteral("(?:(?:PL|LL|EC|UU|FL|RD|UL|TL|PU|OLAK5uy_)[0-9A-Za-z-_]{10,}|RDMM)")
			YoutubeBaseInfoExtractor__initialize_consent = λ.NewFunction("_initialize_consent",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒconsent    λ.Object
						ϒconsent_id λ.Object
						ϒcookies    λ.Object
						ϒself       = λargs[0]
					)
					ϒcookies = λ.Calm(ϒself, "_get_cookies", λ.StrLiteral("https://www.youtube.com/"))
					if λ.IsTrue(λ.Calm(ϒcookies, "get", λ.StrLiteral("__Secure-3PSID"))) {
						return λ.None
					}
					ϒconsent_id = λ.None
					ϒconsent = λ.Calm(ϒcookies, "get", λ.StrLiteral("CONSENT"))
					if λ.IsTrue(ϒconsent) {
						if λ.Contains(λ.GetAttr(ϒconsent, "value", nil), λ.StrLiteral("YES")) {
							return λ.None
						}
						ϒconsent_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("PENDING\\+(\\d+)"),
							λ.GetAttr(ϒconsent, "value", nil),
							λ.StrLiteral("consent"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
					}
					if !λ.IsTrue(ϒconsent_id) {
						ϒconsent_id = λ.Cal(λ.None, λ.IntLiteral(100), λ.IntLiteral(999))
					}
					λ.Calm(ϒself, "_set_cookie", λ.StrLiteral(".youtube.com"), λ.StrLiteral("CONSENT"), λ.Mod(λ.StrLiteral("YES+cb.20210328-17-p0.en+FX+%s"), ϒconsent_id))
					return λ.None
				})
			YoutubeBaseInfoExtractor__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					λ.Calm(ϒself, "_initialize_consent")
					if λ.GetAttr(ϒself, "_downloader", nil) == λ.None {
						return λ.None
					}
					if !λ.IsTrue(λ.Calm(ϒself, "_login")) {
						return λ.None
					}
					return λ.None
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_PLAYLIST_ID_RE":     YoutubeBaseInfoExtractor__PLAYLIST_ID_RE,
				"_initialize_consent": YoutubeBaseInfoExtractor__initialize_consent,
				"_real_initialize":    YoutubeBaseInfoExtractor__real_initialize,
			})
		}())
		YoutubeIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeIE"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeIE__GEO_BYPASS      λ.Object
				YoutubeIE__INVIDIOUS_SITES λ.Object
				YoutubeIE__VALID_URL       λ.Object
				YoutubeIE___init__         λ.Object
				YoutubeIE__extract_url     λ.Object
				YoutubeIE__extract_urls    λ.Object
			)
			YoutubeIE__INVIDIOUS_SITES = λ.NewTuple(
				λ.StrLiteral("(?:www\\.)?redirect\\.invidious\\.io"),
				λ.StrLiteral("(?:(?:www|dev)\\.)?invidio\\.us"),
				λ.StrLiteral("(?:(?:www|no)\\.)?invidiou\\.sh"),
				λ.StrLiteral("(?:(?:www|fi)\\.)?invidious\\.snopyta\\.org"),
				λ.StrLiteral("(?:www\\.)?invidious\\.kabi\\.tk"),
				λ.StrLiteral("(?:www\\.)?invidious\\.13ad\\.de"),
				λ.StrLiteral("(?:www\\.)?invidious\\.mastodon\\.host"),
				λ.StrLiteral("(?:www\\.)?invidious\\.zapashcanon\\.fr"),
				λ.StrLiteral("(?:www\\.)?invidious\\.kavin\\.rocks"),
				λ.StrLiteral("(?:www\\.)?invidious\\.tube"),
				λ.StrLiteral("(?:www\\.)?invidiou\\.site"),
				λ.StrLiteral("(?:www\\.)?invidious\\.site"),
				λ.StrLiteral("(?:www\\.)?invidious\\.xyz"),
				λ.StrLiteral("(?:www\\.)?invidious\\.nixnet\\.xyz"),
				λ.StrLiteral("(?:www\\.)?invidious\\.drycat\\.fr"),
				λ.StrLiteral("(?:www\\.)?tube\\.poal\\.co"),
				λ.StrLiteral("(?:www\\.)?tube\\.connect\\.cafe"),
				λ.StrLiteral("(?:www\\.)?vid\\.wxzm\\.sx"),
				λ.StrLiteral("(?:www\\.)?vid\\.mint\\.lgbt"),
				λ.StrLiteral("(?:www\\.)?yewtu\\.be"),
				λ.StrLiteral("(?:www\\.)?yt\\.elukerio\\.org"),
				λ.StrLiteral("(?:www\\.)?yt\\.lelux\\.fi"),
				λ.StrLiteral("(?:www\\.)?invidious\\.ggc-project\\.de"),
				λ.StrLiteral("(?:www\\.)?yt\\.maisputain\\.ovh"),
				λ.StrLiteral("(?:www\\.)?invidious\\.13ad\\.de"),
				λ.StrLiteral("(?:www\\.)?invidious\\.toot\\.koeln"),
				λ.StrLiteral("(?:www\\.)?invidious\\.fdn\\.fr"),
				λ.StrLiteral("(?:www\\.)?watch\\.nettohikari\\.com"),
				λ.StrLiteral("(?:www\\.)?kgg2m7yk5aybusll\\.onion"),
				λ.StrLiteral("(?:www\\.)?qklhadlycap4cnod\\.onion"),
				λ.StrLiteral("(?:www\\.)?axqzx4s6s54s32yentfqojs3x5i7faxza6xo3ehd4bzzsg2ii4fv2iid\\.onion"),
				λ.StrLiteral("(?:www\\.)?c7hqkpkpemu6e7emz5b4vyz7idjgdvgaaa3dyimmeojqbgpea3xqjoid\\.onion"),
				λ.StrLiteral("(?:www\\.)?fz253lmuao3strwbfbmx46yu7acac2jz27iwtorgmbqlkurlclmancad\\.onion"),
				λ.StrLiteral("(?:www\\.)?invidious\\.l4qlywnpwqsluw65ts7md3khrivpirse744un3x7mlskqauz5pyuzgqd\\.onion"),
				λ.StrLiteral("(?:www\\.)?owxfohz4kjyv25fvlqilyxast7inivgiktls3th44jhk3ej3i7ya\\.b32\\.i2p"),
				λ.StrLiteral("(?:www\\.)?4l2dgddgsrkf2ous66i6seeyi6etzfgrue332grh2n7madpwopotugyd\\.onion"),
			)
			YoutubeIE__VALID_URL = λ.Mod(λ.StrLiteral("(?x)^\n                     (\n                         (?:https?://|//)                                    # http(s):// or protocol-independent URL\n                         (?:(?:(?:(?:\\w+\\.)?[yY][oO][uU][tT][uU][bB][eE](?:-nocookie|kids)?\\.com|\n                            (?:www\\.)?deturl\\.com/www\\.youtube\\.com|\n                            (?:www\\.)?pwnyoutube\\.com|\n                            (?:www\\.)?hooktube\\.com|\n                            (?:www\\.)?yourepeat\\.com|\n                            tube\\.majestyc\\.net|\n                            %(invidious)s|\n                            youtube\\.googleapis\\.com)/                        # the various hostnames, with wildcard subdomains\n                         (?:.*?\\#/)?                                          # handle anchor (#/) redirect urls\n                         (?:                                                  # the various things that can precede the ID:\n                             (?:(?:v|embed|e)/(?!videoseries))                # v/ or embed/ or e/\n                             |(?:                                             # or the v= param in all its forms\n                                 (?:(?:watch|movie)(?:_popup)?(?:\\.php)?/?)?  # preceding watch(_popup|.php) or nothing (like /?v=xxxx)\n                                 (?:\\?|\\#!?)                                  # the params delimiter ? or # or #!\n                                 (?:.*?[&;])??                                # any other preceding param (like /?s=tuff&v=xxxx or ?s=tuff&amp;v=V36LpHqtcDY)\n                                 v=\n                             )\n                         ))\n                         |(?:\n                            youtu\\.be|                                        # just youtu.be/xxxx\n                            vid\\.plus|                                        # or vid.plus/xxxx\n                            zwearz\\.com/watch|                                # or zwearz.com/watch/xxxx\n                            %(invidious)s\n                         )/\n                         |(?:www\\.)?cleanvideosearch\\.com/media/action/yt/watch\\?videoId=\n                         )\n                     )?                                                       # all until now is optional -> you can pass the naked ID\n                     (?P<id>[0-9A-Za-z_-]{11})                                      # here is it! the YouTube video ID\n                     (?!.*?\\blist=\n                        (?:\n                            %(playlist_id)s|                                  # combined list/video URLs are handled by the playlist IE\n                            WL                                                # WL are handled by the watch later IE\n                        )\n                     )\n                     #(?(1).+)?                                                # if we found the ID, everything can follow\n                     "), λ.DictLiteral(map[string]λ.Object{
				"playlist_id": λ.GetAttr(YoutubeBaseInfoExtractor, "_PLAYLIST_ID_RE", nil),
				"invidious":   λ.Calm(λ.StrLiteral("|"), "join", YoutubeIE__INVIDIOUS_SITES),
			}))
			YoutubeIE__GEO_BYPASS = λ.False
			YoutubeIE___init__ = λ.NewFunction("__init__",
				[]λ.Param{
					{Name: "self"},
				},
				0, true, true,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒargs   = λargs[1]
						ϒkwargs = λargs[2]
						ϒself   = λargs[0]
					)
					λ.Call(λ.GetAttr(λ.Cal(λ.SuperType, YoutubeIE, ϒself), "__init__", nil), λ.NewArgs(λ.Unpack(λ.AsStarred(ϒargs))...), λ.KWArgs{
						{Name: "", Value: ϒkwargs},
					})
					λ.SetAttr(ϒself, "_code_cache", λ.DictLiteral(map[λ.Object]λ.Object{}))
					λ.SetAttr(ϒself, "_player_cache", λ.DictLiteral(map[λ.Object]λ.Object{}))
					return λ.None
				})
			YoutubeIE__extract_urls = λ.NewFunction("_extract_urls",
				[]λ.Param{
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒentries λ.Object
						ϒmatches λ.Object
						ϒwebpage = λargs[0]
					)
					ϒentries = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒmobj λ.Object
									τmp0  λ.Object
									τmp1  λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.StrLiteral("(?x)\n            (?:\n                <iframe[^>]+?src=|\n                data-video-url=|\n                <embed[^>]+?src=|\n                embedSWF\\(?:\\s*|\n                <object[^>]+data=|\n                new\\s+SWFObject\\(\n            )\n            ([\"\\'])\n                (?P<url>(?:https?:)?//(?:www\\.)?youtube(?:-nocookie)?\\.com/\n                (?:embed|v|p)/[0-9A-Za-z_-]{11}.*?)\n            \\1"), ϒwebpage))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒmobj = τmp1
									λgy.Yield(λ.Cal(ϒunescapeHTML, λ.Calm(ϒmobj, "group", λ.StrLiteral("url"))))
								}
								return λ.None
							})
						})))
					λ.Calm(ϒentries, "extend", λ.Cal(λ.ListType, λ.Cal(λ.MapIteratorType, ϒunescapeHTML, λ.Cal(Ωre.ϒfindall, λ.StrLiteral("class=\"lazyYT\" data-youtube-id=\"([^\"]+)\""), ϒwebpage))))
					ϒmatches = λ.Cal(Ωre.ϒfindall, λ.StrLiteral("(?x)<div[^>]+\n            class=(?P<q1>[\\'\"])[^\\'\"]*\\byvii_single_video_player\\b[^\\'\"]*(?P=q1)[^>]+\n            data-video_id=(?P<q2>[\\'\"])([^\\'\"]+)(?P=q2)"), ϒwebpage)
					λ.Calm(ϒentries, "extend", λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒm   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, ϒmatches)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒm = τmp1
									λgy.Yield(λ.GetItem(ϒm, λ.Neg(λ.IntLiteral(1))))
								}
								return λ.None
							})
						})))
					return ϒentries
				})
			YoutubeIE__extract_urls = λ.Cal(λ.StaticMethodType, YoutubeIE__extract_urls)
			YoutubeIE__extract_url = λ.NewFunction("_extract_url",
				[]λ.Param{
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒurls    λ.Object
						ϒwebpage = λargs[0]
					)
					ϒurls = λ.Calm(YoutubeIE, "_extract_urls", ϒwebpage)
					return func() λ.Object {
						if λ.IsTrue(ϒurls) {
							return λ.GetItem(ϒurls, λ.IntLiteral(0))
						} else {
							return λ.None
						}
					}()
				})
			YoutubeIE__extract_url = λ.Cal(λ.StaticMethodType, YoutubeIE__extract_url)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_GEO_BYPASS":      YoutubeIE__GEO_BYPASS,
				"_INVIDIOUS_SITES": YoutubeIE__INVIDIOUS_SITES,
				"_VALID_URL":       YoutubeIE__VALID_URL,
				"__init__":         YoutubeIE___init__,
				"_extract_url":     YoutubeIE__extract_url,
				"_extract_urls":    YoutubeIE__extract_urls,
			})
		}())
		YoutubeTabIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeTabIE"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeTabIE__VALID_URL λ.Object
				YoutubeTabIE_suitable   λ.Object
			)
			YoutubeTabIE__VALID_URL = λ.StrLiteral("(?x)\n                    https?://\n                        (?:\\w+\\.)?\n                        (?:\n                            youtube(?:kids)?\\.com|\n                            invidio\\.us\n                        )/\n                        (?:\n                            (?:channel|c|user|feed|hashtag)/|\n                            (?:playlist|watch)\\?.*?\\blist=|\n                            (?!(?:watch|embed|v|e)\\b)\n                        )\n                        (?P<id>[^/?\\#&]+)\n                    ")
			YoutubeTabIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Calm(YoutubeIE, "suitable", ϒurl)) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, YoutubeTabIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			YoutubeTabIE_suitable = λ.Cal(λ.ClassMethodType, YoutubeTabIE_suitable)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeTabIE__VALID_URL,
				"suitable":   YoutubeTabIE_suitable,
			})
		}())
		YoutubePlaylistIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubePlaylistIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubePlaylistIE__VALID_URL λ.Object
				YoutubePlaylistIE_suitable   λ.Object
			)
			YoutubePlaylistIE__VALID_URL = λ.Mod(λ.StrLiteral("(?x)(?:\n                        (?:https?://)?\n                        (?:\\w+\\.)?\n                        (?:\n                            (?:\n                                youtube(?:kids)?\\.com|\n                                invidio\\.us\n                            )\n                            /.*?\\?.*?\\blist=\n                        )?\n                        (?P<id>%(playlist_id)s)\n                     )"), λ.DictLiteral(map[string]λ.Object{
				"playlist_id": λ.GetAttr(YoutubeBaseInfoExtractor, "_PLAYLIST_ID_RE", nil),
			}))
			YoutubePlaylistIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Calm(YoutubeTabIE, "suitable", ϒurl)) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, YoutubePlaylistIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			YoutubePlaylistIE_suitable = λ.Cal(λ.ClassMethodType, YoutubePlaylistIE_suitable)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubePlaylistIE__VALID_URL,
				"suitable":   YoutubePlaylistIE_suitable,
			})
		}())
		YoutubeYtBeIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeYtBeIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubeYtBeIE__VALID_URL λ.Object
			)
			YoutubeYtBeIE__VALID_URL = λ.Mod(λ.StrLiteral("https?://youtu\\.be/(?P<id>[0-9A-Za-z_-]{11})/*?.*?\\blist=(?P<playlist_id>%(playlist_id)s)"), λ.DictLiteral(map[string]λ.Object{
				"playlist_id": λ.GetAttr(YoutubeBaseInfoExtractor, "_PLAYLIST_ID_RE", nil),
			}))
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeYtBeIE__VALID_URL,
			})
		}())
		YoutubeYtUserIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeYtUserIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubeYtUserIE__VALID_URL λ.Object
			)
			YoutubeYtUserIE__VALID_URL = λ.StrLiteral("ytuser:(?P<id>.+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeYtUserIE__VALID_URL,
			})
		}())
		YoutubeFavouritesIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeFavouritesIE"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeFavouritesIE__VALID_URL λ.Object
			)
			YoutubeFavouritesIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?youtube\\.com/my_favorites|:ytfav(?:ou?rites)?")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeFavouritesIE__VALID_URL,
			})
		}())
		YoutubeSearchIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeSearchIE"), λ.NewTuple(
			SearchInfoExtractor,
			YoutubeBaseInfoExtractor,
		), func() λ.Dict {
			var (
				YoutubeSearchIE_IE_NAME λ.Object
			)
			YoutubeSearchIE_IE_NAME = λ.StrLiteral("youtube:search")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME": YoutubeSearchIE_IE_NAME,
			})
		}())
		YoutubeFeedsInfoExtractor = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeFeedsInfoExtractor"), λ.NewTuple(YoutubeTabIE), func() λ.Dict {

			return λ.ClassDictLiteral(map[λ.Object]λ.Object{})
		}())
		YoutubeWatchLaterIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeWatchLaterIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubeWatchLaterIE__VALID_URL λ.Object
			)
			YoutubeWatchLaterIE__VALID_URL = λ.StrLiteral(":ytwatchlater")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeWatchLaterIE__VALID_URL,
			})
		}())
		YoutubeRecommendedIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeRecommendedIE"), λ.NewTuple(YoutubeFeedsInfoExtractor), func() λ.Dict {
			var (
				YoutubeRecommendedIE__VALID_URL λ.Object
			)
			YoutubeRecommendedIE__VALID_URL = λ.StrLiteral(":ytrec(?:ommended)?")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeRecommendedIE__VALID_URL,
			})
		}())
		YoutubeSubscriptionsIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeSubscriptionsIE"), λ.NewTuple(YoutubeFeedsInfoExtractor), func() λ.Dict {
			var (
				YoutubeSubscriptionsIE__VALID_URL λ.Object
			)
			YoutubeSubscriptionsIE__VALID_URL = λ.StrLiteral(":ytsubs(?:criptions)?")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeSubscriptionsIE__VALID_URL,
			})
		}())
		YoutubeHistoryIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeHistoryIE"), λ.NewTuple(YoutubeFeedsInfoExtractor), func() λ.Dict {
			var (
				YoutubeHistoryIE__VALID_URL λ.Object
			)
			YoutubeHistoryIE__VALID_URL = λ.StrLiteral(":ythistory")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeHistoryIE__VALID_URL,
			})
		}())
		YoutubeTruncatedURLIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeTruncatedURLIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubeTruncatedURLIE__VALID_URL λ.Object
			)
			YoutubeTruncatedURLIE__VALID_URL = λ.StrLiteral("(?x)\n        (?:https?://)?\n        (?:\\w+\\.)?[yY][oO][uU][tT][uU][bB][eE](?:-nocookie)?\\.com/\n        (?:watch\\?(?:\n            feature=[a-z_]+|\n            annotation_id=annotation_[^&]+|\n            x-yt-cl=[0-9]+|\n            hl=[^&]*|\n            t=[0-9]+\n        )?\n        |\n            attribution_link\\?a=[^&]+\n        )\n        $\n    ")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeTruncatedURLIE__VALID_URL,
			})
		}())
		YoutubeTruncatedIDIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeTruncatedIDIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubeTruncatedIDIE__VALID_URL λ.Object
			)
			YoutubeTruncatedIDIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?youtube\\.com/watch\\?v=(?P<id>[0-9A-Za-z_-]{1,10})$")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeTruncatedIDIE__VALID_URL,
			})
		}())
	})
}
