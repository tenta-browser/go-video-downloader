// Code generated by transpiler. DO NOT EDIT.
// +build !restricted

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * youtube/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/youtube.py
 */

package youtube

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωpath "github.com/tenta-browser/go-video-downloader/gen/os/path"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωjsinterp "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/jsinterp"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError                    λ.Object
	InfoExtractor                     λ.Object
	JSInterpreter                     λ.Object
	SearchInfoExtractor               λ.Object
	YoutubeBaseInfoExtractor          λ.Object
	YoutubeFavouritesIE               λ.Object
	YoutubeFeedsInfoExtractor         λ.Object
	YoutubeHistoryIE                  λ.Object
	YoutubeIE                         λ.Object
	YoutubePlaylistIE                 λ.Object
	YoutubeRecommendedIE              λ.Object
	YoutubeSearchIE                   λ.Object
	YoutubeSubscriptionsIE            λ.Object
	YoutubeTabIE                      λ.Object
	YoutubeTruncatedIDIE              λ.Object
	YoutubeTruncatedURLIE             λ.Object
	YoutubeWatchLaterIE               λ.Object
	YoutubeYtBeIE                     λ.Object
	YoutubeYtUserIE                   λ.Object
	ϒclean_html                       λ.Object
	ϒcompat_HTTPError                 λ.Object
	ϒcompat_chr                       λ.Object
	ϒcompat_parse_qs                  λ.Object
	ϒcompat_str                       λ.Object
	ϒcompat_urllib_parse_unquote_plus λ.Object
	ϒcompat_urllib_parse_urlencode    λ.Object
	ϒcompat_urllib_parse_urlparse     λ.Object
	ϒfloat_or_none                    λ.Object
	ϒint_or_none                      λ.Object
	ϒmimetype2ext                     λ.Object
	ϒparse_codecs                     λ.Object
	ϒparse_duration                   λ.Object
	ϒqualities                        λ.Object
	ϒsmuggle_url                      λ.Object
	ϒstr_or_none                      λ.Object
	ϒstr_to_int                       λ.Object
	ϒtry_get                          λ.Object
	ϒunescapeHTML                     λ.Object
	ϒunified_strdate                  λ.Object
	ϒunsmuggle_url                    λ.Object
	ϒupdate_url_query                 λ.Object
	ϒurl_or_none                      λ.Object
	ϒurlencode_postdata               λ.Object
	ϒurljoin                          λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		SearchInfoExtractor = Ωcommon.SearchInfoExtractor
		ϒcompat_chr = Ωcompat.ϒcompat_chr
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒcompat_urllib_parse_unquote_plus = Ωcompat.ϒcompat_urllib_parse_unquote_plus
		ϒcompat_urllib_parse_urlencode = Ωcompat.ϒcompat_urllib_parse_urlencode
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		JSInterpreter = Ωjsinterp.JSInterpreter
		ExtractorError = Ωutils.ExtractorError
		ϒclean_html = Ωutils.ϒclean_html
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmimetype2ext = Ωutils.ϒmimetype2ext
		ϒparse_codecs = Ωutils.ϒparse_codecs
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒqualities = Ωutils.ϒqualities
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ϒtry_get = Ωutils.ϒtry_get
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒunsmuggle_url = Ωutils.ϒunsmuggle_url
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		ϒurl_or_none = Ωutils.ϒurl_or_none
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		ϒurljoin = Ωutils.ϒurljoin
		YoutubeBaseInfoExtractor = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeBaseInfoExtractor"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubeBaseInfoExtractor__LOGIN_REQUIRED                λ.Object
				YoutubeBaseInfoExtractor__NETRC_MACHINE                 λ.Object
				YoutubeBaseInfoExtractor__PLAYLIST_ID_RE                λ.Object
				YoutubeBaseInfoExtractor__YT_INITIAL_BOUNDARY_RE        λ.Object
				YoutubeBaseInfoExtractor__YT_INITIAL_DATA_RE            λ.Object
				YoutubeBaseInfoExtractor__YT_INITIAL_PLAYER_RESPONSE_RE λ.Object
				YoutubeBaseInfoExtractor__login                         λ.Object
				YoutubeBaseInfoExtractor__real_initialize               λ.Object
			)
			YoutubeBaseInfoExtractor__NETRC_MACHINE = λ.StrLiteral("youtube")
			YoutubeBaseInfoExtractor__LOGIN_REQUIRED = λ.False
			YoutubeBaseInfoExtractor__PLAYLIST_ID_RE = λ.StrLiteral("(?:(?:PL|LL|EC|UU|FL|RD|UL|TL|PU|OLAK5uy_)[0-9A-Za-z-_]{10,}|RDMM)")
			YoutubeBaseInfoExtractor__login = λ.NewFunction("_login",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						CHALLENGES            λ.Object
						ϒchallenge            λ.Object
						ϒchallenge_req        λ.Object
						ϒchallenge_results    λ.Object
						ϒchallenge_str        λ.Object
						ϒcheck_cookie_results λ.Object
						ϒcheck_cookie_url     λ.Object
						ϒlogin_challenge      λ.Object
						ϒlogin_form           λ.Object
						ϒlogin_msg            λ.Object
						ϒlogin_page           λ.Object
						ϒlogin_res            λ.Object
						ϒlookup_req           λ.Object
						ϒlookup_results       λ.Object
						ϒpassword             λ.Object
						ϒreq                  λ.Object
						ϒres                  λ.Object
						ϒself                 = λargs[0]
						ϒstatus               λ.Object
						ϒtfa_code             λ.Object
						ϒtfa_msg              λ.Object
						ϒtfa_req              λ.Object
						ϒtfa_res              λ.Object
						ϒtfa_results          λ.Object
						ϒtl                   λ.Object
						ϒuser_hash            λ.Object
						ϒusername             λ.Object
						ϒwarn                 λ.Object
						τmp0                  λ.Object
					)
					τmp0 = λ.Calm(ϒself, "_get_login_info")
					ϒusername = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒpassword = λ.GetItem(τmp0, λ.IntLiteral(1))
					if ϒusername == λ.None {
						if λ.IsTrue(func() λ.Object {
							if λv := λ.GetAttr(ϒself, "_LOGIN_REQUIRED", nil); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Calm(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", λ.StrLiteral("cookiefile")) == λ.None)
							}
						}()) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("No login info available, needed for using %s."), λ.GetAttr(ϒself, "IE_NAME", nil))), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
						return λ.True
					}
					ϒlogin_page = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.GetAttr(ϒself, "_LOGIN_URL", nil),
						λ.None,
					), λ.KWArgs{
						{Name: "note", Value: λ.StrLiteral("Downloading login page")},
						{Name: "errnote", Value: λ.StrLiteral("unable to fetch login page")},
						{Name: "fatal", Value: λ.False},
					})
					if ϒlogin_page == λ.False {
						return λ.None
					}
					ϒlogin_form = λ.Calm(ϒself, "_hidden_inputs", ϒlogin_page)
					ϒreq = λ.NewFunction("req",
						[]λ.Param{
							{Name: "url"},
							{Name: "f_req"},
							{Name: "note"},
							{Name: "errnote"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒdata    λ.Object
								ϒerrnote = λargs[3]
								ϒf_req   = λargs[1]
								ϒnote    = λargs[2]
								ϒurl     = λargs[0]
							)
							ϒdata = λ.Calm(ϒlogin_form, "copy")
							λ.Calm(ϒdata, "update", λ.DictLiteral(map[string]λ.Object{
								"pstMsg":          λ.IntLiteral(1),
								"checkConnection": λ.StrLiteral("youtube"),
								"checkedDomains":  λ.StrLiteral("youtube"),
								"hl":              λ.StrLiteral("en"),
								"deviceinfo":      λ.StrLiteral("[null,null,null,[],null,\"US\",null,null,[],\"GlifWebSignIn\",null,[null,null,[]]]"),
								"f.req":           λ.Cal(Ωjson.ϒdumps, ϒf_req),
								"flowName":        λ.StrLiteral("GlifWebSignIn"),
								"flowEntry":       λ.StrLiteral("ServiceLogin"),
								"bgRequest":       λ.StrLiteral("[\"identifier\",\"\"]"),
							}))
							return λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
								ϒurl,
								λ.None,
							), λ.KWArgs{
								{Name: "note", Value: ϒnote},
								{Name: "errnote", Value: ϒerrnote},
								{Name: "transform_source", Value: λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "s"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒs = λargs[0]
										)
										return λ.Cal(Ωre.ϒsub, λ.StrLiteral("^[^[]*"), λ.StrLiteral(""), ϒs)
									})},
								{Name: "fatal", Value: λ.False},
								{Name: "data", Value: λ.Cal(ϒurlencode_postdata, ϒdata)},
								{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
									"Content-Type":         λ.StrLiteral("application/x-www-form-urlencoded;charset=utf-8"),
									"Google-Accounts-XSRF": λ.IntLiteral(1),
								})},
							})
						})
					ϒwarn = λ.NewFunction("warn",
						[]λ.Param{
							{Name: "message"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒmessage = λargs[0]
							)
							λ.Calm(λ.GetAttr(ϒself, "_downloader", nil), "report_warning", ϒmessage)
							return λ.None
						})
					ϒlookup_req = λ.NewList(
						ϒusername,
						λ.None,
						λ.NewList(),
						λ.None,
						λ.StrLiteral("US"),
						λ.None,
						λ.None,
						λ.IntLiteral(2),
						λ.False,
						λ.True,
						λ.NewList(
							λ.None,
							λ.None,
							λ.NewList(
								λ.IntLiteral(2),
								λ.IntLiteral(1),
								λ.None,
								λ.IntLiteral(1),
								λ.StrLiteral("https://accounts.google.com/ServiceLogin?passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Fnext%3D%252F%26action_handle_signin%3Dtrue%26hl%3Den%26app%3Ddesktop%26feature%3Dsign_in_button&hl=en&service=youtube&uilel=3&requestPath=%2FServiceLogin&Page=PasswordSeparationSignIn"),
								λ.None,
								λ.NewList(),
								λ.IntLiteral(4),
							),
							λ.IntLiteral(1),
							λ.NewList(
								λ.None,
								λ.None,
								λ.NewList(),
							),
							λ.None,
							λ.None,
							λ.None,
							λ.True,
						),
						ϒusername,
					)
					ϒlookup_results = λ.Cal(ϒreq, λ.GetAttr(ϒself, "_LOOKUP_URL", nil), ϒlookup_req, λ.StrLiteral("Looking up account info"), λ.StrLiteral("Unable to look up account info"))
					if ϒlookup_results == λ.False {
						return λ.False
					}
					ϒuser_hash = λ.Cal(ϒtry_get, ϒlookup_results, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.IntLiteral(0)), λ.IntLiteral(2))
						}), ϒcompat_str)
					if !λ.IsTrue(ϒuser_hash) {
						λ.Cal(ϒwarn, λ.StrLiteral("Unable to extract user hash"))
						return λ.False
					}
					ϒchallenge_req = λ.NewList(
						ϒuser_hash,
						λ.None,
						λ.IntLiteral(1),
						λ.None,
						λ.NewList(
							λ.IntLiteral(1),
							λ.None,
							λ.None,
							λ.None,
							λ.NewList(
								ϒpassword,
								λ.None,
								λ.True,
							),
						),
						λ.NewList(
							λ.None,
							λ.None,
							λ.NewList(
								λ.IntLiteral(2),
								λ.IntLiteral(1),
								λ.None,
								λ.IntLiteral(1),
								λ.StrLiteral("https://accounts.google.com/ServiceLogin?passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Fnext%3D%252F%26action_handle_signin%3Dtrue%26hl%3Den%26app%3Ddesktop%26feature%3Dsign_in_button&hl=en&service=youtube&uilel=3&requestPath=%2FServiceLogin&Page=PasswordSeparationSignIn"),
								λ.None,
								λ.NewList(),
								λ.IntLiteral(4),
							),
							λ.IntLiteral(1),
							λ.NewList(
								λ.None,
								λ.None,
								λ.NewList(),
							),
							λ.None,
							λ.None,
							λ.None,
							λ.True,
						),
					)
					ϒchallenge_results = λ.Cal(ϒreq, λ.GetAttr(ϒself, "_CHALLENGE_URL", nil), ϒchallenge_req, λ.StrLiteral("Logging in"), λ.StrLiteral("Unable to log in"))
					if ϒchallenge_results == λ.False {
						return λ.None
					}
					ϒlogin_res = λ.Cal(ϒtry_get, ϒchallenge_results, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.IntLiteral(0)), λ.IntLiteral(5))
						}), λ.ListType)
					if λ.IsTrue(ϒlogin_res) {
						ϒlogin_msg = λ.Cal(ϒtry_get, ϒlogin_res, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(ϒx, λ.IntLiteral(5))
							}), ϒcompat_str)
						λ.Cal(ϒwarn, func() λ.Object {
							if λ.IsTrue(λ.Eq(ϒlogin_msg, λ.StrLiteral("INCORRECT_ANSWER_ENTERED"))) {
								return λ.Mod(λ.StrLiteral("Unable to login: %s"), λ.StrLiteral("Invalid password"))
							} else {
								return ϒlogin_msg
							}
						}())
						return λ.False
					}
					ϒres = λ.Cal(ϒtry_get, ϒchallenge_results, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.IntLiteral(0)), λ.Neg(λ.IntLiteral(1)))
						}), λ.ListType)
					if !λ.IsTrue(ϒres) {
						λ.Cal(ϒwarn, λ.StrLiteral("Unable to extract result entry"))
						return λ.False
					}
					ϒlogin_challenge = λ.Cal(ϒtry_get, ϒres, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.IntLiteral(0)), λ.IntLiteral(0))
						}), λ.ListType)
					if λ.IsTrue(ϒlogin_challenge) {
						ϒchallenge_str = λ.Cal(ϒtry_get, ϒlogin_challenge, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(ϒx, λ.IntLiteral(2))
							}), ϒcompat_str)
						if λ.IsTrue(λ.Eq(ϒchallenge_str, λ.StrLiteral("TWO_STEP_VERIFICATION"))) {
							ϒstatus = λ.Cal(ϒtry_get, ϒlogin_challenge, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(ϒx, λ.IntLiteral(5))
								}), ϒcompat_str)
							if λ.IsTrue(λ.Eq(ϒstatus, λ.StrLiteral("QUOTA_EXCEEDED"))) {
								λ.Cal(ϒwarn, λ.StrLiteral("Exceeded the limit of TFA codes, try later"))
								return λ.False
							}
							ϒtl = λ.Cal(ϒtry_get, ϒchallenge_results, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.IntLiteral(1)), λ.IntLiteral(2))
								}), ϒcompat_str)
							if !λ.IsTrue(ϒtl) {
								λ.Cal(ϒwarn, λ.StrLiteral("Unable to extract TL"))
								return λ.False
							}
							ϒtfa_code = λ.Calm(ϒself, "_get_tfa_info", λ.StrLiteral("2-step verification code"))
							if !λ.IsTrue(ϒtfa_code) {
								λ.Cal(ϒwarn, λ.StrLiteral("Two-factor authentication required. Provide it either interactively or with --twofactor <code>(Note that only TOTP (Google Authenticator App) codes work at this time.)"))
								return λ.False
							}
							ϒtfa_code = λ.Cal(λ.None, ϒtfa_code, λ.StrLiteral("G-"))
							ϒtfa_req = λ.NewList(
								ϒuser_hash,
								λ.None,
								λ.IntLiteral(2),
								λ.None,
								λ.NewList(
									λ.IntLiteral(9),
									λ.None,
									λ.None,
									λ.None,
									λ.None,
									λ.None,
									λ.None,
									λ.None,
									λ.NewList(
										λ.None,
										ϒtfa_code,
										λ.True,
										λ.IntLiteral(2),
									),
								),
							)
							ϒtfa_results = λ.Cal(ϒreq, λ.Calm(λ.GetAttr(ϒself, "_TFA_URL", nil), "format", ϒtl), ϒtfa_req, λ.StrLiteral("Submitting TFA code"), λ.StrLiteral("Unable to submit TFA code"))
							if ϒtfa_results == λ.False {
								return λ.False
							}
							ϒtfa_res = λ.Cal(ϒtry_get, ϒtfa_results, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.IntLiteral(0)), λ.IntLiteral(5))
								}), λ.ListType)
							if λ.IsTrue(ϒtfa_res) {
								ϒtfa_msg = λ.Cal(ϒtry_get, ϒtfa_res, λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "x"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒx = λargs[0]
										)
										return λ.GetItem(ϒx, λ.IntLiteral(5))
									}), ϒcompat_str)
								λ.Cal(ϒwarn, func() λ.Object {
									if λ.IsTrue(λ.Eq(ϒtfa_msg, λ.StrLiteral("INCORRECT_ANSWER_ENTERED"))) {
										return λ.Mod(λ.StrLiteral("Unable to finish TFA: %s"), λ.StrLiteral("Invalid TFA code"))
									} else {
										return ϒtfa_msg
									}
								}())
								return λ.False
							}
							ϒcheck_cookie_url = λ.Cal(ϒtry_get, ϒtfa_results, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.IntLiteral(0)), λ.Neg(λ.IntLiteral(1))), λ.IntLiteral(2))
								}), ϒcompat_str)
						} else {
							CHALLENGES = λ.DictLiteral(map[string]string{
								"LOGIN_CHALLENGE":   "This device isn't recognized. For your security, Google wants to make sure it's really you.",
								"USERNAME_RECOVERY": "Please provide additional information to aid in the recovery process.",
								"REAUTH":            "There is something unusual about your activity. For your security, Google wants to make sure it's really you.",
							})
							ϒchallenge = λ.Calm(CHALLENGES, "get", ϒchallenge_str, λ.Mod(λ.StrLiteral("%s returned error %s."), λ.NewTuple(
								λ.GetAttr(ϒself, "IE_NAME", nil),
								ϒchallenge_str,
							)))
							λ.Cal(ϒwarn, λ.Mod(λ.StrLiteral("%s\nGo to https://accounts.google.com/, login and solve a challenge."), ϒchallenge))
							return λ.False
						}
					} else {
						ϒcheck_cookie_url = λ.Cal(ϒtry_get, ϒres, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(ϒx, λ.IntLiteral(2))
							}), ϒcompat_str)
					}
					if !λ.IsTrue(ϒcheck_cookie_url) {
						λ.Cal(ϒwarn, λ.StrLiteral("Unable to extract CheckCookie URL"))
						return λ.False
					}
					ϒcheck_cookie_results = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						ϒcheck_cookie_url,
						λ.None,
						λ.StrLiteral("Checking cookie"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if ϒcheck_cookie_results == λ.False {
						return λ.False
					}
					if !λ.Contains(ϒcheck_cookie_results, λ.StrLiteral("https://myaccount.google.com/")) {
						λ.Cal(ϒwarn, λ.StrLiteral("Unable to log in"))
						return λ.False
					}
					return λ.True
				})
			YoutubeBaseInfoExtractor__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					if λ.GetAttr(ϒself, "_downloader", nil) == λ.None {
						return λ.None
					}
					if !λ.IsTrue(λ.Calm(ϒself, "_login")) {
						return λ.None
					}
					return λ.None
				})
			YoutubeBaseInfoExtractor__YT_INITIAL_DATA_RE = λ.StrLiteral("(?:window\\s*\\[\\s*[\"\\']ytInitialData[\"\\']\\s*\\]|ytInitialData)\\s*=\\s*({.+?})\\s*;")
			YoutubeBaseInfoExtractor__YT_INITIAL_PLAYER_RESPONSE_RE = λ.StrLiteral("ytInitialPlayerResponse\\s*=\\s*({.+?})\\s*;")
			YoutubeBaseInfoExtractor__YT_INITIAL_BOUNDARY_RE = λ.StrLiteral("(?:var\\s+meta|</script|\\n)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_LOGIN_REQUIRED":                YoutubeBaseInfoExtractor__LOGIN_REQUIRED,
				"_NETRC_MACHINE":                 YoutubeBaseInfoExtractor__NETRC_MACHINE,
				"_PLAYLIST_ID_RE":                YoutubeBaseInfoExtractor__PLAYLIST_ID_RE,
				"_YT_INITIAL_BOUNDARY_RE":        YoutubeBaseInfoExtractor__YT_INITIAL_BOUNDARY_RE,
				"_YT_INITIAL_DATA_RE":            YoutubeBaseInfoExtractor__YT_INITIAL_DATA_RE,
				"_YT_INITIAL_PLAYER_RESPONSE_RE": YoutubeBaseInfoExtractor__YT_INITIAL_PLAYER_RESPONSE_RE,
				"_login":                         YoutubeBaseInfoExtractor__login,
				"_real_initialize":               YoutubeBaseInfoExtractor__real_initialize,
			})
		}())
		YoutubeIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeIE"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeIE_IE_NAME                      λ.Object
				YoutubeIE__GEO_BYPASS                  λ.Object
				YoutubeIE__INVIDIOUS_SITES             λ.Object
				YoutubeIE__PLAYER_INFO_RE              λ.Object
				YoutubeIE__SUBTITLE_FORMATS            λ.Object
				YoutubeIE__VALID_URL                   λ.Object
				YoutubeIE___init__                     λ.Object
				YoutubeIE__decrypt_signature           λ.Object
				YoutubeIE__extract_chapters_from_json  λ.Object
				YoutubeIE__extract_player_info         λ.Object
				YoutubeIE__extract_signature_function  λ.Object
				YoutubeIE__extract_url                 λ.Object
				YoutubeIE__extract_urls                λ.Object
				YoutubeIE__extract_yt_initial_variable λ.Object
				YoutubeIE__parse_sig_js                λ.Object
				YoutubeIE__real_extract                λ.Object
				YoutubeIE__signature_cache_id          λ.Object
			)
			YoutubeIE__INVIDIOUS_SITES = λ.NewTuple(
				λ.StrLiteral("(?:www\\.)?redirect\\.invidious\\.io"),
				λ.StrLiteral("(?:(?:www|dev)\\.)?invidio\\.us"),
				λ.StrLiteral("(?:(?:www|no)\\.)?invidiou\\.sh"),
				λ.StrLiteral("(?:(?:www|fi)\\.)?invidious\\.snopyta\\.org"),
				λ.StrLiteral("(?:www\\.)?invidious\\.kabi\\.tk"),
				λ.StrLiteral("(?:www\\.)?invidious\\.13ad\\.de"),
				λ.StrLiteral("(?:www\\.)?invidious\\.mastodon\\.host"),
				λ.StrLiteral("(?:www\\.)?invidious\\.zapashcanon\\.fr"),
				λ.StrLiteral("(?:www\\.)?invidious\\.kavin\\.rocks"),
				λ.StrLiteral("(?:www\\.)?invidious\\.tube"),
				λ.StrLiteral("(?:www\\.)?invidiou\\.site"),
				λ.StrLiteral("(?:www\\.)?invidious\\.site"),
				λ.StrLiteral("(?:www\\.)?invidious\\.xyz"),
				λ.StrLiteral("(?:www\\.)?invidious\\.nixnet\\.xyz"),
				λ.StrLiteral("(?:www\\.)?invidious\\.drycat\\.fr"),
				λ.StrLiteral("(?:www\\.)?tube\\.poal\\.co"),
				λ.StrLiteral("(?:www\\.)?tube\\.connect\\.cafe"),
				λ.StrLiteral("(?:www\\.)?vid\\.wxzm\\.sx"),
				λ.StrLiteral("(?:www\\.)?vid\\.mint\\.lgbt"),
				λ.StrLiteral("(?:www\\.)?yewtu\\.be"),
				λ.StrLiteral("(?:www\\.)?yt\\.elukerio\\.org"),
				λ.StrLiteral("(?:www\\.)?yt\\.lelux\\.fi"),
				λ.StrLiteral("(?:www\\.)?invidious\\.ggc-project\\.de"),
				λ.StrLiteral("(?:www\\.)?yt\\.maisputain\\.ovh"),
				λ.StrLiteral("(?:www\\.)?invidious\\.13ad\\.de"),
				λ.StrLiteral("(?:www\\.)?invidious\\.toot\\.koeln"),
				λ.StrLiteral("(?:www\\.)?invidious\\.fdn\\.fr"),
				λ.StrLiteral("(?:www\\.)?watch\\.nettohikari\\.com"),
				λ.StrLiteral("(?:www\\.)?kgg2m7yk5aybusll\\.onion"),
				λ.StrLiteral("(?:www\\.)?qklhadlycap4cnod\\.onion"),
				λ.StrLiteral("(?:www\\.)?axqzx4s6s54s32yentfqojs3x5i7faxza6xo3ehd4bzzsg2ii4fv2iid\\.onion"),
				λ.StrLiteral("(?:www\\.)?c7hqkpkpemu6e7emz5b4vyz7idjgdvgaaa3dyimmeojqbgpea3xqjoid\\.onion"),
				λ.StrLiteral("(?:www\\.)?fz253lmuao3strwbfbmx46yu7acac2jz27iwtorgmbqlkurlclmancad\\.onion"),
				λ.StrLiteral("(?:www\\.)?invidious\\.l4qlywnpwqsluw65ts7md3khrivpirse744un3x7mlskqauz5pyuzgqd\\.onion"),
				λ.StrLiteral("(?:www\\.)?owxfohz4kjyv25fvlqilyxast7inivgiktls3th44jhk3ej3i7ya\\.b32\\.i2p"),
				λ.StrLiteral("(?:www\\.)?4l2dgddgsrkf2ous66i6seeyi6etzfgrue332grh2n7madpwopotugyd\\.onion"),
			)
			YoutubeIE__VALID_URL = λ.Mod(λ.StrLiteral("(?x)^\n                     (\n                         (?:https?://|//)                                    # http(s):// or protocol-independent URL\n                         (?:(?:(?:(?:\\w+\\.)?[yY][oO][uU][tT][uU][bB][eE](?:-nocookie|kids)?\\.com|\n                            (?:www\\.)?deturl\\.com/www\\.youtube\\.com|\n                            (?:www\\.)?pwnyoutube\\.com|\n                            (?:www\\.)?hooktube\\.com|\n                            (?:www\\.)?yourepeat\\.com|\n                            tube\\.majestyc\\.net|\n                            %(invidious)s|\n                            youtube\\.googleapis\\.com)/                        # the various hostnames, with wildcard subdomains\n                         (?:.*?\\#/)?                                          # handle anchor (#/) redirect urls\n                         (?:                                                  # the various things that can precede the ID:\n                             (?:(?:v|embed|e)/(?!videoseries))                # v/ or embed/ or e/\n                             |(?:                                             # or the v= param in all its forms\n                                 (?:(?:watch|movie)(?:_popup)?(?:\\.php)?/?)?  # preceding watch(_popup|.php) or nothing (like /?v=xxxx)\n                                 (?:\\?|\\#!?)                                  # the params delimiter ? or # or #!\n                                 (?:.*?[&;])??                                # any other preceding param (like /?s=tuff&v=xxxx or ?s=tuff&amp;v=V36LpHqtcDY)\n                                 v=\n                             )\n                         ))\n                         |(?:\n                            youtu\\.be|                                        # just youtu.be/xxxx\n                            vid\\.plus|                                        # or vid.plus/xxxx\n                            zwearz\\.com/watch|                                # or zwearz.com/watch/xxxx\n                            %(invidious)s\n                         )/\n                         |(?:www\\.)?cleanvideosearch\\.com/media/action/yt/watch\\?videoId=\n                         )\n                     )?                                                       # all until now is optional -> you can pass the naked ID\n                     (?P<id>[0-9A-Za-z_-]{11})                                      # here is it! the YouTube video ID\n                     (?!.*?\\blist=\n                        (?:\n                            %(playlist_id)s|                                  # combined list/video URLs are handled by the playlist IE\n                            WL                                                # WL are handled by the watch later IE\n                        )\n                     )\n                     #(?(1).+)?                                                # if we found the ID, everything can follow\n                     "), λ.DictLiteral(map[string]λ.Object{
				"playlist_id": λ.GetAttr(YoutubeBaseInfoExtractor, "_PLAYLIST_ID_RE", nil),
				"invidious":   λ.Calm(λ.StrLiteral("|"), "join", YoutubeIE__INVIDIOUS_SITES),
			}))
			YoutubeIE__PLAYER_INFO_RE = λ.NewTuple(
				λ.StrLiteral("/s/player/(?P<id>[a-zA-Z0-9_-]{8,})/player"),
				λ.StrLiteral("/(?P<id>[a-zA-Z0-9_-]{8,})/player(?:_ias\\.vflset(?:/[a-zA-Z]{2,3}_[a-zA-Z]{2,3})?|-plasma-ias-(?:phone|tablet)-[a-z]{2}_[A-Z]{2}\\.vflset)/base\\.js$"),
				λ.StrLiteral("\\b(?P<id>vfl[a-zA-Z0-9_-]+)\\b.*?\\.js$"),
			)
			YoutubeIE__SUBTITLE_FORMATS = λ.NewTuple(
				λ.StrLiteral("srv1"),
				λ.StrLiteral("srv2"),
				λ.StrLiteral("srv3"),
				λ.StrLiteral("ttml"),
				λ.StrLiteral("vtt"),
			)
			YoutubeIE__GEO_BYPASS = λ.False
			YoutubeIE_IE_NAME = λ.StrLiteral("youtube")
			YoutubeIE___init__ = λ.NewFunction("__init__",
				[]λ.Param{
					{Name: "self"},
				},
				0, true, true,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒargs   = λargs[1]
						ϒkwargs = λargs[2]
						ϒself   = λargs[0]
					)
					λ.Call(λ.GetAttr(λ.Cal(λ.SuperType, YoutubeIE, ϒself), "__init__", nil), λ.NewArgs(λ.Unpack(λ.AsStarred(ϒargs))...), λ.KWArgs{
						{Name: "", Value: ϒkwargs},
					})
					λ.SetAttr(ϒself, "_code_cache", λ.DictLiteral(map[λ.Object]λ.Object{}))
					λ.SetAttr(ϒself, "_player_cache", λ.DictLiteral(map[λ.Object]λ.Object{}))
					return λ.None
				})
			YoutubeIE__signature_cache_id = λ.NewFunction("_signature_cache_id",
				[]λ.Param{
					{Name: "self"},
					{Name: "example_sig"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒexample_sig = λargs[1]
						ϒself        = λargs[0]
					)
					_ = ϒself
					return λ.Calm(λ.StrLiteral("."), "join", λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒpart λ.Object
									τmp0  λ.Object
									τmp1  λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒexample_sig, "split", λ.StrLiteral(".")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒpart = τmp1
									λgy.Yield(λ.Cal(ϒcompat_str, λ.Cal(λ.BuiltinLen, ϒpart)))
								}
								return λ.None
							})
						})))
				})
			YoutubeIE__extract_player_info = λ.NewFunction("_extract_player_info",
				[]λ.Param{
					{Name: "cls"},
					{Name: "player_url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls        = λargs[0]
						ϒid_m       λ.Object
						ϒplayer_re  λ.Object
						ϒplayer_url = λargs[1]
						τmp0        λ.Object
						τmp1        λ.Object
					)
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetAttr(ϒcls, "_PLAYER_INFO_RE", nil))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒplayer_re = τmp1
						ϒid_m = λ.Cal(Ωre.ϒsearch, ϒplayer_re, ϒplayer_url)
						if λ.IsTrue(ϒid_m) {
							break
						}
					}
					if τmp1 == λ.AfterLast {
						panic(λ.Raise(λ.Cal(ExtractorError, λ.Mod(λ.StrLiteral("Cannot identify player %r"), ϒplayer_url))))
					}
					return λ.Calm(ϒid_m, "group", λ.StrLiteral("id"))
				})
			YoutubeIE__extract_player_info = λ.Cal(λ.ClassMethodType, YoutubeIE__extract_player_info)
			YoutubeIE__extract_signature_function = λ.NewFunction("_extract_signature_function",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_id"},
					{Name: "player_url"},
					{Name: "example_sig"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcache_res   λ.Object
						ϒcache_spec  λ.Object
						ϒcode        λ.Object
						ϒexample_sig = λargs[3]
						ϒfunc_id     λ.Object
						ϒplayer_id   λ.Object
						ϒplayer_url  = λargs[2]
						ϒres         λ.Object
						ϒself        = λargs[0]
						ϒtest_string λ.Object
						ϒvideo_id    = λargs[1]
					)
					ϒplayer_id = λ.Calm(ϒself, "_extract_player_info", ϒplayer_url)
					ϒfunc_id = λ.Mod(λ.StrLiteral("js_%s_%s"), λ.NewTuple(
						ϒplayer_id,
						λ.Calm(ϒself, "_signature_cache_id", ϒexample_sig),
					))
					if !λ.IsTrue(λ.Eq(λ.Cal(Ωpath.ϒbasename, ϒfunc_id), ϒfunc_id)) {
						panic(λ.Raise(λ.Cal(λ.AssertionErrorType)))
					}
					ϒcache_spec = λ.Calm(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "cache", nil), "load", λ.StrLiteral("youtube-sigfuncs"), ϒfunc_id)
					if ϒcache_spec != λ.None {
						return λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "s"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒs = λargs[0]
								)
								return λ.Calm(λ.StrLiteral(""), "join", λ.Cal(λ.NewFunction("<generator>",
									nil,
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
											var (
												ϒi   λ.Object
												τmp0 λ.Object
												τmp1 λ.Object
											)
											τmp0 = λ.Cal(λ.BuiltinIter, ϒcache_spec)
											for {
												if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
													break
												}
												ϒi = τmp1
												λgy.Yield(λ.GetItem(ϒs, ϒi))
											}
											return λ.None
										})
									})))
							})
					}
					if !λ.Contains(λ.GetAttr(ϒself, "_code_cache", nil), ϒplayer_id) {
						λ.SetItem(λ.GetAttr(ϒself, "_code_cache", nil), ϒplayer_id, λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
							ϒplayer_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "note", Value: λ.Add(λ.StrLiteral("Downloading player "), ϒplayer_id)},
							{Name: "errnote", Value: λ.Mod(λ.StrLiteral("Download of %s failed"), ϒplayer_url)},
						}))
					}
					ϒcode = λ.GetItem(λ.GetAttr(ϒself, "_code_cache", nil), ϒplayer_id)
					ϒres = λ.Calm(ϒself, "_parse_sig_js", ϒcode)
					ϒtest_string = λ.Calm(λ.StrLiteral(""), "join", λ.Cal(λ.MapIteratorType, ϒcompat_chr, λ.Cal(λ.RangeType, λ.Cal(λ.BuiltinLen, ϒexample_sig))))
					ϒcache_res = λ.Cal(ϒres, ϒtest_string)
					ϒcache_spec = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒc   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, ϒcache_res)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒc = τmp1
									λgy.Yield(λ.Cal(λ.BuiltinOrd, ϒc))
								}
								return λ.None
							})
						})))
					λ.Calm(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "cache", nil), "store", λ.StrLiteral("youtube-sigfuncs"), ϒfunc_id, ϒcache_spec)
					return ϒres
				})
			YoutubeIE__parse_sig_js = λ.NewFunction("_parse_sig_js",
				[]λ.Param{
					{Name: "self"},
					{Name: "jscode"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒfuncname         λ.Object
						ϒinitial_function λ.Object
						ϒjscode           = λargs[1]
						ϒjsi              λ.Object
						ϒself             = λargs[0]
					)
					ϒfuncname = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.StrLiteral("\\b[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*encodeURIComponent\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.StrLiteral("\\b[a-zA-Z0-9]+\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*encodeURIComponent\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.StrLiteral("\\bm=(?P<sig>[a-zA-Z0-9$]{2})\\(decodeURIComponent\\(h\\.s\\)\\)"),
							λ.StrLiteral("\\bc&&\\(c=(?P<sig>[a-zA-Z0-9$]{2})\\(decodeURIComponent\\(c\\)\\)"),
							λ.StrLiteral("(?:\\b|[^a-zA-Z0-9$])(?P<sig>[a-zA-Z0-9$]{2})\\s*=\\s*function\\(\\s*a\\s*\\)\\s*{\\s*a\\s*=\\s*a\\.split\\(\\s*\"\"\\s*\\);[a-zA-Z0-9$]{2}\\.[a-zA-Z0-9$]{2}\\(a,\\d+\\)"),
							λ.StrLiteral("(?:\\b|[^a-zA-Z0-9$])(?P<sig>[a-zA-Z0-9$]{2})\\s*=\\s*function\\(\\s*a\\s*\\)\\s*{\\s*a\\s*=\\s*a\\.split\\(\\s*\"\"\\s*\\)"),
							λ.StrLiteral("(?P<sig>[a-zA-Z0-9$]+)\\s*=\\s*function\\(\\s*a\\s*\\)\\s*{\\s*a\\s*=\\s*a\\.split\\(\\s*\"\"\\s*\\)"),
							λ.StrLiteral("([\"\\'])signature\\1\\s*,\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.StrLiteral("\\.sig\\|\\|(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.StrLiteral("yt\\.akamaized\\.net/\\)\\s*\\|\\|\\s*.*?\\s*[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*(?:encodeURIComponent\\s*\\()?\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.StrLiteral("\\b[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.StrLiteral("\\b[a-zA-Z0-9]+\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.StrLiteral("\\bc\\s*&&\\s*a\\.set\\([^,]+\\s*,\\s*\\([^)]*\\)\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.StrLiteral("\\bc\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*\\([^)]*\\)\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
							λ.StrLiteral("\\bc\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*\\([^)]*\\)\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\("),
						),
						ϒjscode,
						λ.StrLiteral("Initial JS player signature function name"),
					), λ.KWArgs{
						{Name: "group", Value: λ.StrLiteral("sig")},
					})
					ϒjsi = λ.Cal(JSInterpreter, ϒjscode)
					ϒinitial_function = λ.Calm(ϒjsi, "extract_function", ϒfuncname)
					return λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "s"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒs = λargs[0]
							)
							return λ.Cal(ϒinitial_function, λ.NewList(ϒs))
						})
				})
			YoutubeIE__decrypt_signature = λ.NewFunction("_decrypt_signature",
				[]λ.Param{
					{Name: "self"},
					{Name: "s"},
					{Name: "video_id"},
					{Name: "player_url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒfunc       λ.Object
						ϒplayer_id  λ.Object
						ϒplayer_url = λargs[3]
						ϒs          = λargs[1]
						ϒself       = λargs[0]
						ϒtb         λ.Object
						ϒvideo_id   = λargs[2]
						τmp0        λ.Object
						τmp1        λ.Object
					)
					if ϒplayer_url == λ.None {
						panic(λ.Raise(λ.Cal(ExtractorError, λ.StrLiteral("Cannot decrypt signature without player_url"))))
					}
					if λ.IsTrue(λ.Calm(ϒplayer_url, "startswith", λ.StrLiteral("//"))) {
						ϒplayer_url = λ.Add(λ.StrLiteral("https:"), ϒplayer_url)
					} else {
						if !λ.IsTrue(λ.Cal(Ωre.ϒmatch, λ.StrLiteral("https?://"), ϒplayer_url)) {
							ϒplayer_url = λ.Cal(Ωparse.ϒurljoin, λ.StrLiteral("https://www.youtube.com"), ϒplayer_url)
						}
					}
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{λ.ExceptionType, func(λex λ.BaseException) {
								var ϒe λ.Object = λex
								ϒtb = λ.Calm(λ.None, "format_exc")
								panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Add(λ.StrLiteral("Signature extraction failed: "), ϒtb)), λ.KWArgs{
									{Name: "cause", Value: ϒe},
								})))
							}},
						)
						ϒplayer_id = λ.NewTuple(
							ϒplayer_url,
							λ.Calm(ϒself, "_signature_cache_id", ϒs),
						)
						if !λ.Contains(λ.GetAttr(ϒself, "_player_cache", nil), ϒplayer_id) {
							ϒfunc = λ.Calm(ϒself, "_extract_signature_function", ϒvideo_id, ϒplayer_url, ϒs)
							λ.SetItem(λ.GetAttr(ϒself, "_player_cache", nil), ϒplayer_id, ϒfunc)
						}
						ϒfunc = λ.GetItem(λ.GetAttr(ϒself, "_player_cache", nil), ϒplayer_id)
						if λ.IsTrue(λ.Calm(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", λ.StrLiteral("youtube_print_sig_code"))) {
							λ.Calm(ϒself, "_print_sig_code", ϒfunc, ϒs)
						}
						λexit, λret = λ.BlockExitReturn, λ.Cal(ϒfunc, ϒs)
						return
						return λ.BlockExitNormally, nil
					}()
					if τmp0 == λ.BlockExitReturn {
						return τmp1
					}
					return λ.None
				})
			YoutubeIE__extract_urls = λ.NewFunction("_extract_urls",
				[]λ.Param{
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒentries λ.Object
						ϒmatches λ.Object
						ϒwebpage = λargs[0]
					)
					ϒentries = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒmobj λ.Object
									τmp0  λ.Object
									τmp1  λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.StrLiteral("(?x)\n            (?:\n                <iframe[^>]+?src=|\n                data-video-url=|\n                <embed[^>]+?src=|\n                embedSWF\\(?:\\s*|\n                <object[^>]+data=|\n                new\\s+SWFObject\\(\n            )\n            ([\"\\'])\n                (?P<url>(?:https?:)?//(?:www\\.)?youtube(?:-nocookie)?\\.com/\n                (?:embed|v|p)/[0-9A-Za-z_-]{11}.*?)\n            \\1"), ϒwebpage))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒmobj = τmp1
									λgy.Yield(λ.Cal(ϒunescapeHTML, λ.Calm(ϒmobj, "group", λ.StrLiteral("url"))))
								}
								return λ.None
							})
						})))
					λ.Calm(ϒentries, "extend", λ.Cal(λ.ListType, λ.Cal(λ.MapIteratorType, ϒunescapeHTML, λ.Cal(Ωre.ϒfindall, λ.StrLiteral("class=\"lazyYT\" data-youtube-id=\"([^\"]+)\""), ϒwebpage))))
					ϒmatches = λ.Cal(Ωre.ϒfindall, λ.StrLiteral("(?x)<div[^>]+\n            class=(?P<q1>[\\'\"])[^\\'\"]*\\byvii_single_video_player\\b[^\\'\"]*(?P=q1)[^>]+\n            data-video_id=(?P<q2>[\\'\"])([^\\'\"]+)(?P=q2)"), ϒwebpage)
					λ.Calm(ϒentries, "extend", λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒm   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, ϒmatches)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒm = τmp1
									λgy.Yield(λ.GetItem(ϒm, λ.Neg(λ.IntLiteral(1))))
								}
								return λ.None
							})
						})))
					return ϒentries
				})
			YoutubeIE__extract_urls = λ.Cal(λ.StaticMethodType, YoutubeIE__extract_urls)
			YoutubeIE__extract_url = λ.NewFunction("_extract_url",
				[]λ.Param{
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒurls    λ.Object
						ϒwebpage = λargs[0]
					)
					ϒurls = λ.Calm(YoutubeIE, "_extract_urls", ϒwebpage)
					return func() λ.Object {
						if λ.IsTrue(ϒurls) {
							return λ.GetItem(ϒurls, λ.IntLiteral(0))
						} else {
							return λ.None
						}
					}()
				})
			YoutubeIE__extract_url = λ.Cal(λ.StaticMethodType, YoutubeIE__extract_url)
			YoutubeIE__extract_chapters_from_json = λ.NewFunction("_extract_chapters_from_json",
				[]λ.Param{
					{Name: "self"},
					{Name: "data"},
					{Name: "video_id"},
					{Name: "duration"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒchapter       λ.Object
						ϒchapter_time  λ.Object
						ϒchapters      λ.Object
						ϒchapters_list λ.Object
						ϒdata          = λargs[1]
						ϒduration      = λargs[3]
						ϒend_time      λ.Object
						ϒnext_num      λ.Object
						ϒself          = λargs[0]
						ϒstart_time    λ.Object
						ϒtitle         λ.Object
						ϒvideo_id      = λargs[2]
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
					)
					_ = ϒself
					_ = ϒvideo_id
					ϒchapters_list = λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("playerOverlays")), λ.StrLiteral("playerOverlayRenderer")), λ.StrLiteral("decoratedPlayerBarRenderer")), λ.StrLiteral("decoratedPlayerBarRenderer")), λ.StrLiteral("playerBar")), λ.StrLiteral("chapteredPlayerBarRenderer")), λ.StrLiteral("chapters"))
						}), λ.ListType)
					if !λ.IsTrue(ϒchapters_list) {
						return λ.None
					}
					ϒchapter_time = λ.NewFunction("chapter_time",
						[]λ.Param{
							{Name: "chapter"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒchapter = λargs[0]
							)
							return λ.Call(ϒfloat_or_none, λ.NewArgs(λ.Cal(ϒtry_get, ϒchapter, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("chapterRenderer")), λ.StrLiteral("timeRangeStartMillis"))
								}), λ.IntType)), λ.KWArgs{
								{Name: "scale", Value: λ.IntLiteral(1000)},
							})
						})
					ϒchapters = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Call(λ.EnumerateIteratorType, λ.NewArgs(ϒchapters_list), λ.KWArgs{
						{Name: "start", Value: λ.IntLiteral(1)},
					}))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒnext_num = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒchapter = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒstart_time = λ.Cal(ϒchapter_time, ϒchapter)
						if ϒstart_time == λ.None {
							continue
						}
						ϒend_time = func() λ.Object {
							if λ.IsTrue(λ.Lt(ϒnext_num, λ.Cal(λ.BuiltinLen, ϒchapters_list))) {
								return λ.Cal(ϒchapter_time, λ.GetItem(ϒchapters_list, ϒnext_num))
							} else {
								return ϒduration
							}
						}()
						if ϒend_time == λ.None {
							continue
						}
						ϒtitle = λ.Cal(ϒtry_get, ϒchapter, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("chapterRenderer")), λ.StrLiteral("title")), λ.StrLiteral("simpleText"))
							}), ϒcompat_str)
						λ.Calm(ϒchapters, "append", λ.DictLiteral(map[string]λ.Object{
							"start_time": ϒstart_time,
							"end_time":   ϒend_time,
							"title":      ϒtitle,
						}))
					}
					return ϒchapters
				})
			YoutubeIE__extract_yt_initial_variable = λ.NewFunction("_extract_yt_initial_variable",
				[]λ.Param{
					{Name: "self"},
					{Name: "webpage"},
					{Name: "regex"},
					{Name: "video_id"},
					{Name: "name"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒname     = λargs[4]
						ϒregex    = λargs[2]
						ϒself     = λargs[0]
						ϒvideo_id = λargs[3]
						ϒwebpage  = λargs[1]
					)
					return λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewTuple(
								λ.Mod(λ.StrLiteral("%s\\s*%s"), λ.NewTuple(
									ϒregex,
									λ.GetAttr(ϒself, "_YT_INITIAL_BOUNDARY_RE", nil),
								)),
								ϒregex,
							),
							ϒwebpage,
							ϒname,
						), λ.KWArgs{
							{Name: "default", Value: λ.StrLiteral("{}")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
				})
			YoutubeIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒautomatic_captions        λ.Object
						ϒbase_url                  λ.Object
						ϒcaption_track             λ.Object
						ϒcategory                  λ.Object
						ϒchannel_id                λ.Object
						ϒchapter_time              λ.Object
						ϒchapters                  λ.Object
						ϒcomponent                 λ.Object
						ϒcontainer                 λ.Object
						ϒcontent                   λ.Object
						ϒcontents                  λ.Object
						ϒcountries                 λ.Object
						ϒd_k                       λ.Object
						ϒdash_manifest_url         λ.Object
						ϒdct                       λ.Object
						ϒdislike_count             λ.Object
						ϒduration                  λ.Object
						ϒencrypted_sig             λ.Object
						ϒend_time                  λ.Object
						ϒengagment_pannel          λ.Object
						ϒentries                   λ.Object
						ϒf                         λ.Object
						ϒfeed                      λ.Object
						ϒfeed_data                 λ.Object
						ϒfeed_entry                λ.Object
						ϒfeed_id                   λ.Object
						ϒfeed_ids                  λ.Object
						ϒfeed_title                λ.Object
						ϒfilesize                  λ.Object
						ϒfmt                       λ.Object
						ϒfmt_url                   λ.Object
						ϒformats                   λ.Object
						ϒget_text                  λ.Object
						ϒgetter                    λ.Object
						ϒh                         λ.Object
						ϒhls_manifest_url          λ.Object
						ϒinfo                      λ.Object
						ϒinitial_data              λ.Object
						ϒis_live                   λ.Object
						ϒitag                      λ.Object
						ϒitag_qualities            λ.Object
						ϒitags                     λ.Object
						ϒk                         λ.Object
						ϒkeyword                   λ.Object
						ϒkeywords                  λ.Object
						ϒlabel                     λ.Object
						ϒlang_code                 λ.Object
						ϒlike_count                λ.Object
						ϒmicroformat               λ.Object
						ϒmimetype                  λ.Object
						ϒmmlir                     λ.Object
						ϒmobj                      λ.Object
						ϒmrr                       λ.Object
						ϒmrr_contents_text         λ.Object
						ϒmrr_title                 λ.Object
						ϒmultifeed_metadata_list   λ.Object
						ϒmultiple_songs            λ.Object
						ϒnext_num                  λ.Object
						ϒno_audio                  λ.Object
						ϒno_video                  λ.Object
						ϒowner_profile_url         λ.Object
						ϒparsed_url                λ.Object
						ϒpctr                      λ.Object
						ϒpemr                      λ.Object
						ϒplayability_status        λ.Object
						ϒplayer_response           λ.Object
						ϒplayer_url                λ.Object
						ϒpr                        λ.Object
						ϒprocess_language          λ.Object
						ϒq                         λ.Object
						ϒquality                   λ.Object
						ϒquery                     λ.Object
						ϒratio                     λ.Object
						ϒreason                    λ.Object
						ϒregex                     λ.Object
						ϒregions_allowed           λ.Object
						ϒrelease_date              λ.Object
						ϒrelease_year              λ.Object
						ϒrow                       λ.Object
						ϒrows                      λ.Object
						ϒs_k                       λ.Object
						ϒs_ks                      λ.Object
						ϒsbr_tooltip               λ.Object
						ϒsc                        λ.Object
						ϒsearch_meta               λ.Object
						ϒself                      = λargs[0]
						ϒsignature                 λ.Object
						ϒsmuggled_data             λ.Object
						ϒsp                        λ.Object
						ϒstart_time                λ.Object
						ϒstl                       λ.Object
						ϒstreaming_data            λ.Object
						ϒstreaming_formats         λ.Object
						ϒsubreason                 λ.Object
						ϒsubtitles                 λ.Object
						ϒtbr                       λ.Object
						ϒthumbnail                 λ.Object
						ϒthumbnail_url             λ.Object
						ϒthumbnails                λ.Object
						ϒtitle                     λ.Object
						ϒtlb                       λ.Object
						ϒtrailer_video_id          λ.Object
						ϒtranslation_language      λ.Object
						ϒtranslation_language_code λ.Object
						ϒurl                       = λargs[1]
						ϒv                         λ.Object
						ϒvideo_description         λ.Object
						ϒvideo_details             λ.Object
						ϒvideo_id                  λ.Object
						ϒvideo_title               λ.Object
						ϒvpir                      λ.Object
						ϒvsir                      λ.Object
						ϒw                         λ.Object
						ϒwebpage                   λ.Object
						ϒwebpage_url               λ.Object
						τmp0                       λ.Object
						τmp1                       λ.Object
						τmp2                       λ.Object
						τmp3                       λ.Object
						τmp4                       λ.Object
						τmp5                       λ.Object
						τmp6                       λ.Object
					)
					τmp0 = λ.Cal(ϒunsmuggle_url, ϒurl, λ.DictLiteral(map[λ.Object]λ.Object{}))
					ϒurl = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒsmuggled_data = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒbase_url = λ.Add(λ.Calm(ϒself, "http_scheme"), λ.StrLiteral("//www.youtube.com/"))
					ϒwebpage_url = λ.Add(λ.Add(ϒbase_url, λ.StrLiteral("watch?v=")), ϒvideo_id)
					ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.Add(ϒwebpage_url, λ.StrLiteral("&bpctr=9999999999")),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒplayer_response = λ.None
					if λ.IsTrue(ϒwebpage) {
						ϒplayer_response = λ.Calm(ϒself, "_extract_yt_initial_variable", ϒwebpage, λ.GetAttr(ϒself, "_YT_INITIAL_PLAYER_RESPONSE_RE", nil), ϒvideo_id, λ.StrLiteral("initial player response"))
					}
					if !λ.IsTrue(ϒplayer_response) {
						ϒplayer_response = λ.Calm(ϒself, "_call_api", λ.StrLiteral("player"), λ.DictLiteral(map[string]λ.Object{
							"videoId": ϒvideo_id,
						}), ϒvideo_id)
					}
					ϒplayability_status = func() λ.Object {
						if λv := λ.Calm(ϒplayer_response, "get", λ.StrLiteral("playabilityStatus")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					if λ.IsTrue(λ.Eq(λ.Calm(ϒplayability_status, "get", λ.StrLiteral("reason")), λ.StrLiteral("Sign in to confirm your age"))) {
						ϒpr = λ.Calm(ϒself, "_parse_json", func() λ.Object {
							if λv := λ.Cal(ϒtry_get, λ.Cal(ϒcompat_parse_qs, λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
								λ.Add(ϒbase_url, λ.StrLiteral("get_video_info")),
								ϒvideo_id,
								λ.StrLiteral("Refetching age-gated info webpage"),
								λ.StrLiteral("unable to download video info webpage"),
							), λ.KWArgs{
								{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
									"video_id": ϒvideo_id,
									"eurl":     λ.Add(λ.StrLiteral("https://youtube.googleapis.com/v/"), ϒvideo_id),
								})},
								{Name: "fatal", Value: λ.False},
							})), λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("player_response")), λ.IntLiteral(0))
								}), ϒcompat_str); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.StrLiteral("{}")
							}
						}(), ϒvideo_id)
						if λ.IsTrue(ϒpr) {
							ϒplayer_response = ϒpr
						}
					}
					ϒtrailer_video_id = λ.Cal(ϒtry_get, ϒplayability_status, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("errorScreen")), λ.StrLiteral("playerLegacyDesktopYpcTrailerRenderer")), λ.StrLiteral("trailerVideoId"))
						}), ϒcompat_str)
					if λ.IsTrue(ϒtrailer_video_id) {
						return λ.Calm(ϒself, "url_result", ϒtrailer_video_id, λ.Calm(ϒself, "ie_key"), ϒtrailer_video_id)
					}
					ϒget_text = λ.NewFunction("get_text",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							if !λ.IsTrue(ϒx) {
								return λ.None
							}
							return func() λ.Object {
								if λv := λ.Calm(ϒx, "get", λ.StrLiteral("simpleText")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Calm(λ.StrLiteral(""), "join", λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
										nil,
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
												var (
													ϒr   λ.Object
													τmp0 λ.Object
													τmp1 λ.Object
												)
												τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒx, λ.StrLiteral("runs")))
												for {
													if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
														break
													}
													ϒr = τmp1
													λgy.Yield(λ.GetItem(ϒr, λ.StrLiteral("text")))
												}
												return λ.None
											})
										}))))
								}
							}()
						})
					ϒsearch_meta = func() λ.Object {
						if λ.IsTrue(ϒwebpage) {
							return λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
										ϒx,
										ϒwebpage,
									), λ.KWArgs{
										{Name: "default", Value: λ.None},
									})
								})
						} else {
							return λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									_ = ϒx
									return λ.None
								})
						}
					}()
					ϒvideo_details = func() λ.Object {
						if λv := λ.Calm(ϒplayer_response, "get", λ.StrLiteral("videoDetails")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒmicroformat = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒplayer_response, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("microformat")), λ.StrLiteral("playerMicroformatRenderer"))
							}), λ.DictType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒvideo_title = func() λ.Object {
						if λv := λ.Calm(ϒvideo_details, "get", λ.StrLiteral("title")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Cal(ϒget_text, λ.Calm(ϒmicroformat, "get", λ.StrLiteral("title"))); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒsearch_meta, λ.NewList(
								λ.StrLiteral("og:title"),
								λ.StrLiteral("twitter:title"),
								λ.StrLiteral("title"),
							))
						}
					}()
					ϒvideo_description = λ.Calm(ϒvideo_details, "get", λ.StrLiteral("shortDescription"))
					if !λ.IsTrue(λ.Calm(ϒsmuggled_data, "get", λ.StrLiteral("force_singlefeed"), λ.False)) {
						if !λ.IsTrue(λ.Calm(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", λ.StrLiteral("noplaylist"))) {
							ϒmultifeed_metadata_list = λ.Cal(ϒtry_get, ϒplayer_response, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("multicamera")), λ.StrLiteral("playerLegacyMulticameraRenderer")), λ.StrLiteral("metadataList"))
								}), ϒcompat_str)
							if λ.IsTrue(ϒmultifeed_metadata_list) {
								ϒentries = λ.NewList()
								ϒfeed_ids = λ.NewList()
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒmultifeed_metadata_list, "split", λ.StrLiteral(",")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒfeed = τmp1
									ϒfeed_data = λ.Cal(ϒcompat_parse_qs, λ.Cal(ϒcompat_urllib_parse_unquote_plus, ϒfeed))
									ϒfeed_entry = λ.NewFunction("feed_entry",
										[]λ.Param{
											{Name: "name"},
										},
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											var (
												ϒname = λargs[0]
											)
											return λ.Cal(ϒtry_get, ϒfeed_data, λ.NewFunction("<lambda>",
												[]λ.Param{
													{Name: "x"},
												},
												0, false, false,
												func(λargs []λ.Object) λ.Object {
													var (
														ϒx = λargs[0]
													)
													return λ.GetItem(λ.GetItem(ϒx, ϒname), λ.IntLiteral(0))
												}), ϒcompat_str)
										})
									ϒfeed_id = λ.Cal(ϒfeed_entry, λ.StrLiteral("id"))
									if !λ.IsTrue(ϒfeed_id) {
										continue
									}
									ϒfeed_title = λ.Cal(ϒfeed_entry, λ.StrLiteral("title"))
									ϒtitle = ϒvideo_title
									if λ.IsTrue(ϒfeed_title) {
										τmp2 = λ.IAdd(ϒtitle, λ.Mod(λ.StrLiteral(" (%s)"), ϒfeed_title))
										ϒtitle = τmp2
									}
									λ.Calm(ϒentries, "append", λ.DictLiteral(map[string]λ.Object{
										"_type":  λ.StrLiteral("url_transparent"),
										"ie_key": λ.StrLiteral("Youtube"),
										"url": λ.Cal(ϒsmuggle_url, λ.Add(λ.Add(ϒbase_url, λ.StrLiteral("watch?v=")), λ.GetItem(λ.GetItem(ϒfeed_data, λ.StrLiteral("id")), λ.IntLiteral(0))), λ.DictLiteral(map[string]λ.Object{
											"force_singlefeed": λ.True,
										})),
										"title": ϒtitle,
									}))
									λ.Calm(ϒfeed_ids, "append", ϒfeed_id)
								}
								λ.Calm(ϒself, "to_screen", λ.Mod(λ.StrLiteral("Downloading multifeed video (%s) - add --no-playlist to just download video %s"), λ.NewTuple(
									λ.Calm(λ.StrLiteral(", "), "join", ϒfeed_ids),
									ϒvideo_id,
								)))
								return λ.Calm(ϒself, "playlist_result", ϒentries, ϒvideo_id, ϒvideo_title, ϒvideo_description)
							}
						} else {
							λ.Calm(ϒself, "to_screen", λ.Mod(λ.StrLiteral("Downloading just video %s because of --no-playlist"), ϒvideo_id))
						}
					}
					ϒformats = λ.NewList()
					ϒitags = λ.NewList()
					ϒitag_qualities = λ.DictLiteral(map[λ.Object]λ.Object{})
					ϒplayer_url = λ.None
					ϒq = λ.Cal(ϒqualities, λ.NewList(
						λ.StrLiteral("tiny"),
						λ.StrLiteral("small"),
						λ.StrLiteral("medium"),
						λ.StrLiteral("large"),
						λ.StrLiteral("hd720"),
						λ.StrLiteral("hd1080"),
						λ.StrLiteral("hd1440"),
						λ.StrLiteral("hd2160"),
						λ.StrLiteral("hd2880"),
						λ.StrLiteral("highres"),
					))
					ϒstreaming_data = func() λ.Object {
						if λv := λ.Calm(ϒplayer_response, "get", λ.StrLiteral("streamingData")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒstreaming_formats = func() λ.Object {
						if λv := λ.Calm(ϒstreaming_data, "get", λ.StrLiteral("formats")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}()
					λ.Calm(ϒstreaming_formats, "extend", func() λ.Object {
						if λv := λ.Calm(ϒstreaming_data, "get", λ.StrLiteral("adaptiveFormats")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}())
					τmp0 = λ.Cal(λ.BuiltinIter, ϒstreaming_formats)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒfmt = τmp1
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Calm(ϒfmt, "get", λ.StrLiteral("targetDurationSec")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒfmt, "get", λ.StrLiteral("drmFamilies"))
							}
						}()) {
							continue
						}
						ϒitag = λ.Cal(ϒstr_or_none, λ.Calm(ϒfmt, "get", λ.StrLiteral("itag")))
						ϒquality = λ.Calm(ϒfmt, "get", λ.StrLiteral("quality"))
						if λ.IsTrue(func() λ.Object {
							if λv := ϒitag; !λ.IsTrue(λv) {
								return λv
							} else {
								return ϒquality
							}
						}()) {
							λ.SetItem(ϒitag_qualities, ϒitag, ϒquality)
						}
						if λ.IsTrue(λ.Eq(λ.Calm(ϒfmt, "get", λ.StrLiteral("type")), λ.StrLiteral("FORMAT_STREAM_TYPE_OTF"))) {
							continue
						}
						ϒfmt_url = λ.Calm(ϒfmt, "get", λ.StrLiteral("url"))
						if !λ.IsTrue(ϒfmt_url) {
							ϒsc = λ.Cal(ϒcompat_parse_qs, λ.Calm(ϒfmt, "get", λ.StrLiteral("signatureCipher")))
							ϒfmt_url = λ.Cal(ϒurl_or_none, λ.Cal(ϒtry_get, ϒsc, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("url")), λ.IntLiteral(0))
								})))
							ϒencrypted_sig = λ.Cal(ϒtry_get, ϒsc, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("s")), λ.IntLiteral(0))
								}))
							if !λ.IsTrue(func() λ.Object {
								if λv := ϒsc; !λ.IsTrue(λv) {
									return λv
								} else if λv := ϒfmt_url; !λ.IsTrue(λv) {
									return λv
								} else {
									return ϒencrypted_sig
								}
							}()) {
								continue
							}
							if !λ.IsTrue(ϒplayer_url) {
								if !λ.IsTrue(ϒwebpage) {
									continue
								}
								ϒplayer_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.StrLiteral("\"(?:PLAYER_JS_URL|jsUrl)\"\\s*:\\s*\"([^\"]+)\""),
									ϒwebpage,
									λ.StrLiteral("player URL"),
								), λ.KWArgs{
									{Name: "fatal", Value: λ.False},
								})
							}
							if !λ.IsTrue(ϒplayer_url) {
								continue
							}
							ϒsignature = λ.Calm(ϒself, "_decrypt_signature", λ.GetItem(λ.GetItem(ϒsc, λ.StrLiteral("s")), λ.IntLiteral(0)), ϒvideo_id, ϒplayer_url)
							ϒsp = func() λ.Object {
								if λv := λ.Cal(ϒtry_get, ϒsc, λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "x"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒx = λargs[0]
										)
										return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("sp")), λ.IntLiteral(0))
									})); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.StrLiteral("signature")
								}
							}()
							τmp2 = λ.IAdd(ϒfmt_url, λ.Add(λ.Add(λ.Add(λ.StrLiteral("&"), ϒsp), λ.StrLiteral("=")), ϒsignature))
							ϒfmt_url = τmp2
						}
						if λ.IsTrue(ϒitag) {
							λ.Calm(ϒitags, "append", ϒitag)
						}
						ϒtbr = λ.Cal(ϒfloat_or_none, func() λ.Object {
							if λv := λ.Calm(ϒfmt, "get", λ.StrLiteral("averageBitrate")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒfmt, "get", λ.StrLiteral("bitrate"))
							}
						}(), λ.IntLiteral(1000))
						ϒdct = λ.DictLiteral(map[string]λ.Object{
							"asr":       λ.Cal(ϒint_or_none, λ.Calm(ϒfmt, "get", λ.StrLiteral("audioSampleRate"))),
							"filesize":  λ.Cal(ϒint_or_none, λ.Calm(ϒfmt, "get", λ.StrLiteral("contentLength"))),
							"format_id": ϒitag,
							"format_note": func() λ.Object {
								if λv := λ.Calm(ϒfmt, "get", λ.StrLiteral("qualityLabel")); λ.IsTrue(λv) {
									return λv
								} else {
									return ϒquality
								}
							}(),
							"fps":     λ.Cal(ϒint_or_none, λ.Calm(ϒfmt, "get", λ.StrLiteral("fps"))),
							"height":  λ.Cal(ϒint_or_none, λ.Calm(ϒfmt, "get", λ.StrLiteral("height"))),
							"quality": λ.Cal(ϒq, ϒquality),
							"tbr":     ϒtbr,
							"url":     ϒfmt_url,
							"width":   λ.Calm(ϒfmt, "get", λ.StrLiteral("width")),
						})
						ϒmimetype = λ.Calm(ϒfmt, "get", λ.StrLiteral("mimeType"))
						if λ.IsTrue(ϒmimetype) {
							ϒmobj = λ.Cal(Ωre.ϒmatch, λ.StrLiteral("((?:[^/]+)/(?:[^;]+))(?:;\\s*codecs=\"([^\"]+)\")?"), ϒmimetype)
							if λ.IsTrue(ϒmobj) {
								λ.SetItem(ϒdct, λ.StrLiteral("ext"), λ.Cal(ϒmimetype2ext, λ.Calm(ϒmobj, "group", λ.IntLiteral(1))))
								λ.Calm(ϒdct, "update", λ.Cal(ϒparse_codecs, λ.Calm(ϒmobj, "group", λ.IntLiteral(2))))
							}
						}
						ϒno_audio = λ.Eq(λ.Calm(ϒdct, "get", λ.StrLiteral("acodec")), λ.StrLiteral("none"))
						ϒno_video = λ.Eq(λ.Calm(ϒdct, "get", λ.StrLiteral("vcodec")), λ.StrLiteral("none"))
						if λ.IsTrue(ϒno_audio) {
							λ.SetItem(ϒdct, λ.StrLiteral("vbr"), ϒtbr)
						}
						if λ.IsTrue(ϒno_video) {
							λ.SetItem(ϒdct, λ.StrLiteral("abr"), ϒtbr)
						}
						if λ.IsTrue(func() λ.Object {
							if λv := ϒno_audio; λ.IsTrue(λv) {
								return λv
							} else {
								return ϒno_video
							}
						}()) {
							λ.SetItem(ϒdct, λ.StrLiteral("downloader_options"), λ.DictLiteral(map[string]int{
								"http_chunk_size": 10485760,
							}))
							if λ.IsTrue(λ.Calm(ϒdct, "get", λ.StrLiteral("ext"))) {
								λ.SetItem(ϒdct, λ.StrLiteral("container"), λ.Add(λ.GetItem(ϒdct, λ.StrLiteral("ext")), λ.StrLiteral("_dash")))
							}
						}
						λ.Calm(ϒformats, "append", ϒdct)
					}
					ϒhls_manifest_url = λ.Calm(ϒstreaming_data, "get", λ.StrLiteral("hlsManifestUrl"))
					if λ.IsTrue(ϒhls_manifest_url) {
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒhls_manifest_url,
							ϒvideo_id,
							λ.StrLiteral("mp4"),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						}))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒf = τmp1
							ϒitag = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.StrLiteral("/itag/(\\d+)"),
								λ.GetItem(ϒf, λ.StrLiteral("url")),
								λ.StrLiteral("itag"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
							if λ.IsTrue(ϒitag) {
								λ.SetItem(ϒf, λ.StrLiteral("format_id"), ϒitag)
							}
							λ.Calm(ϒformats, "append", ϒf)
						}
					}
					if λ.IsTrue(λ.Calm(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", λ.StrLiteral("youtube_include_dash_manifest"))) {
						ϒdash_manifest_url = λ.Calm(ϒstreaming_data, "get", λ.StrLiteral("dashManifestUrl"))
						if λ.IsTrue(ϒdash_manifest_url) {
							τmp0 = λ.Cal(λ.BuiltinIter, λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
								ϒdash_manifest_url,
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							}))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒf = τmp1
								ϒitag = λ.GetItem(ϒf, λ.StrLiteral("format_id"))
								if λ.Contains(ϒitags, ϒitag) {
									continue
								}
								if λ.Contains(ϒitag_qualities, ϒitag) {
									λ.SetItem(ϒf, λ.StrLiteral("quality"), λ.Cal(ϒq, λ.GetItem(ϒitag_qualities, ϒitag)))
								}
								ϒfilesize = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.StrLiteral("/clen/(\\d+)"),
									func() λ.Object {
										if λv := λ.Calm(ϒf, "get", λ.StrLiteral("fragment_base_url")); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.GetItem(ϒf, λ.StrLiteral("url"))
										}
									}(),
									λ.StrLiteral("file size"),
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
								}))
								if λ.IsTrue(ϒfilesize) {
									λ.SetItem(ϒf, λ.StrLiteral("filesize"), ϒfilesize)
								}
								λ.Calm(ϒformats, "append", ϒf)
							}
						}
					}
					if !λ.IsTrue(ϒformats) {
						if λ.IsTrue(λ.Calm(ϒstreaming_data, "get", λ.StrLiteral("licenseInfos"))) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("This video is DRM protected.")), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
						ϒpemr = func() λ.Object {
							if λv := λ.Cal(ϒtry_get, ϒplayability_status, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("errorScreen")), λ.StrLiteral("playerErrorMessageRenderer"))
								}), λ.DictType); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.DictLiteral(map[λ.Object]λ.Object{})
							}
						}()
						ϒreason = func() λ.Object {
							if λv := λ.Cal(ϒget_text, λ.Calm(ϒpemr, "get", λ.StrLiteral("reason"))); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒplayability_status, "get", λ.StrLiteral("reason"))
							}
						}()
						ϒsubreason = λ.Calm(ϒpemr, "get", λ.StrLiteral("subreason"))
						if λ.IsTrue(ϒsubreason) {
							ϒsubreason = λ.Cal(ϒclean_html, λ.Cal(ϒget_text, ϒsubreason))
							if λ.IsTrue(λ.Eq(ϒsubreason, λ.StrLiteral("The uploader has not made this video available in your country."))) {
								ϒcountries = λ.Calm(ϒmicroformat, "get", λ.StrLiteral("availableCountries"))
								if !λ.IsTrue(ϒcountries) {
									ϒregions_allowed = λ.Cal(ϒsearch_meta, λ.StrLiteral("regionsAllowed"))
									ϒcountries = func() λ.Object {
										if λ.IsTrue(ϒregions_allowed) {
											return λ.Calm(ϒregions_allowed, "split", λ.StrLiteral(","))
										} else {
											return λ.None
										}
									}()
								}
								λ.Calm(ϒself, "raise_geo_restricted", ϒsubreason, ϒcountries)
							}
							τmp0 = λ.IAdd(ϒreason, λ.Add(λ.StrLiteral("\n"), ϒsubreason))
							ϒreason = τmp0
						}
						if λ.IsTrue(ϒreason) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒreason), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒkeywords = func() λ.Object {
						if λv := λ.Calm(ϒvideo_details, "get", λ.StrLiteral("keywords")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}()
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒkeywords)); !λ.IsTrue(λv) {
							return λv
						} else {
							return ϒwebpage
						}
					}()) {
						ϒkeywords = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒm   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.Calm(ϒself, "_meta_regex", λ.StrLiteral("og:video:tag")), ϒwebpage))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒm = τmp1
										λgy.Yield(λ.Cal(ϒunescapeHTML, λ.Calm(ϒm, "group", λ.StrLiteral("content"))))
									}
									return λ.None
								})
							})))
					}
					τmp0 = λ.Cal(λ.BuiltinIter, ϒkeywords)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒkeyword = τmp1
						if λ.IsTrue(λ.Calm(ϒkeyword, "startswith", λ.StrLiteral("yt:stretch="))) {
							τmp2 = λ.Calm(λ.GetItem(λ.Calm(ϒkeyword, "split", λ.StrLiteral("=")), λ.IntLiteral(1)), "split", λ.StrLiteral(":"))
							ϒw = λ.GetItem(τmp2, λ.IntLiteral(0))
							ϒh = λ.GetItem(τmp2, λ.IntLiteral(1))
							τmp2 = λ.NewTuple(
								λ.Cal(λ.IntType, ϒw),
								λ.Cal(λ.IntType, ϒh),
							)
							ϒw = λ.GetItem(τmp2, λ.IntLiteral(0))
							ϒh = λ.GetItem(τmp2, λ.IntLiteral(1))
							if λ.IsTrue(func() λ.Object {
								if λv := λ.Gt(ϒw, λ.IntLiteral(0)); !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Gt(ϒh, λ.IntLiteral(0))
								}
							}()) {
								ϒratio = λ.TrueDiv(ϒw, ϒh)
								τmp2 = λ.Cal(λ.BuiltinIter, ϒformats)
								for {
									if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
										break
									}
									ϒf = τmp3
									if λ.IsTrue(λ.Ne(λ.Calm(ϒf, "get", λ.StrLiteral("vcodec")), λ.StrLiteral("none"))) {
										λ.SetItem(ϒf, λ.StrLiteral("stretched_ratio"), ϒratio)
									}
								}
							}
						}
					}
					ϒthumbnails = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						ϒvideo_details,
						ϒmicroformat,
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒcontainer = τmp1
						τmp2 = λ.Cal(λ.BuiltinIter, func() λ.Object {
							if λv := λ.Cal(ϒtry_get, ϒcontainer, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("thumbnail")), λ.StrLiteral("thumbnails"))
								}), λ.ListType); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewList()
							}
						}())
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒthumbnail = τmp3
							ϒthumbnail_url = λ.Calm(ϒthumbnail, "get", λ.StrLiteral("url"))
							if !λ.IsTrue(ϒthumbnail_url) {
								continue
							}
							λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
								"height": λ.Cal(ϒint_or_none, λ.Calm(ϒthumbnail, "get", λ.StrLiteral("height"))),
								"url":    ϒthumbnail_url,
								"width":  λ.Cal(ϒint_or_none, λ.Calm(ϒthumbnail, "get", λ.StrLiteral("width"))),
							}))
						}
						if λ.IsTrue(ϒthumbnails) {
							break
						}
					}
					if τmp1 == λ.AfterLast {
						ϒthumbnail = λ.Cal(ϒsearch_meta, λ.NewList(
							λ.StrLiteral("og:image"),
							λ.StrLiteral("twitter:image"),
						))
						if λ.IsTrue(ϒthumbnail) {
							ϒthumbnails = λ.NewList(λ.DictLiteral(map[string]λ.Object{
								"url": ϒthumbnail,
							}))
						}
					}
					ϒcategory = func() λ.Object {
						if λv := λ.Calm(ϒmicroformat, "get", λ.StrLiteral("category")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒsearch_meta, λ.StrLiteral("genre"))
						}
					}()
					ϒchannel_id = func() λ.Object {
						if λv := λ.Calm(ϒvideo_details, "get", λ.StrLiteral("channelId")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Calm(ϒmicroformat, "get", λ.StrLiteral("externalChannelId")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒsearch_meta, λ.StrLiteral("channelId"))
						}
					}()
					ϒduration = func() λ.Object {
						if λv := λ.Cal(ϒint_or_none, func() λ.Object {
							if λv := λ.Calm(ϒvideo_details, "get", λ.StrLiteral("lengthSeconds")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒmicroformat, "get", λ.StrLiteral("lengthSeconds"))
							}
						}()); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒparse_duration, λ.Cal(ϒsearch_meta, λ.StrLiteral("duration")))
						}
					}()
					ϒis_live = λ.Calm(ϒvideo_details, "get", λ.StrLiteral("isLive"))
					ϒowner_profile_url = λ.Calm(ϒmicroformat, "get", λ.StrLiteral("ownerProfileUrl"))
					ϒinfo = λ.DictLiteral(map[string]λ.Object{
						"id": ϒvideo_id,
						"title": func() λ.Object {
							if λ.IsTrue(ϒis_live) {
								return λ.Calm(ϒself, "_live_title", ϒvideo_title)
							} else {
								return ϒvideo_title
							}
						}(),
						"formats":     ϒformats,
						"thumbnails":  ϒthumbnails,
						"description": ϒvideo_description,
						"upload_date": λ.Cal(ϒunified_strdate, func() λ.Object {
							if λv := λ.Calm(ϒmicroformat, "get", λ.StrLiteral("uploadDate")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(ϒsearch_meta, λ.StrLiteral("uploadDate"))
							}
						}()),
						"uploader": λ.GetItem(ϒvideo_details, λ.StrLiteral("author")),
						"uploader_id": func() λ.Object {
							if λ.IsTrue(ϒowner_profile_url) {
								return λ.Calm(ϒself, "_search_regex", λ.StrLiteral("/(?:channel|user)/([^/?&#]+)"), ϒowner_profile_url, λ.StrLiteral("uploader id"))
							} else {
								return λ.None
							}
						}(),
						"uploader_url": ϒowner_profile_url,
						"channel_id":   ϒchannel_id,
						"channel_url": func() λ.Object {
							if λ.IsTrue(ϒchannel_id) {
								return λ.Add(λ.StrLiteral("https://www.youtube.com/channel/"), ϒchannel_id)
							} else {
								return λ.None
							}
						}(),
						"duration": ϒduration,
						"view_count": λ.Cal(ϒint_or_none, func() λ.Object {
							if λv := λ.Calm(ϒvideo_details, "get", λ.StrLiteral("viewCount")); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Calm(ϒmicroformat, "get", λ.StrLiteral("viewCount")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(ϒsearch_meta, λ.StrLiteral("interactionCount"))
							}
						}()),
						"average_rating": λ.Cal(ϒfloat_or_none, λ.Calm(ϒvideo_details, "get", λ.StrLiteral("averageRating"))),
						"age_limit": func() λ.Object {
							if λ.IsTrue(func() λ.Object {
								if λv := λ.NewBool(λ.Calm(ϒmicroformat, "get", λ.StrLiteral("isFamilySafe")) == λ.False); λ.IsTrue(λv) {
									return λv
								} else if λv := λ.Eq(λ.Cal(ϒsearch_meta, λ.StrLiteral("isFamilyFriendly")), λ.StrLiteral("false")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Eq(λ.Cal(ϒsearch_meta, λ.StrLiteral("og:restrictions:age")), λ.StrLiteral("18+"))
								}
							}()) {
								return λ.IntLiteral(18)
							} else {
								return λ.IntLiteral(0)
							}
						}(),
						"webpage_url": ϒwebpage_url,
						"categories": func() λ.Object {
							if λ.IsTrue(ϒcategory) {
								return λ.NewList(ϒcategory)
							} else {
								return λ.None
							}
						}(),
						"tags":    ϒkeywords,
						"is_live": ϒis_live,
					})
					ϒpctr = λ.Cal(ϒtry_get, ϒplayer_response, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("captions")), λ.StrLiteral("playerCaptionsTracklistRenderer"))
						}), λ.DictType)
					if λ.IsTrue(ϒpctr) {
						ϒprocess_language = λ.NewFunction("process_language",
							[]λ.Param{
								{Name: "container"},
								{Name: "base_url"},
								{Name: "lang_code"},
								{Name: "query"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒbase_url  = λargs[1]
									ϒcontainer = λargs[0]
									ϒfmt       λ.Object
									ϒlang_code = λargs[2]
									ϒlang_subs λ.Object
									ϒquery     = λargs[3]
									τmp0       λ.Object
									τmp1       λ.Object
								)
								ϒlang_subs = λ.NewList()
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetAttr(ϒself, "_SUBTITLE_FORMATS", nil))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒfmt = τmp1
									λ.Calm(ϒquery, "update", λ.DictLiteral(map[string]λ.Object{
										"fmt": ϒfmt,
									}))
									λ.Calm(ϒlang_subs, "append", λ.DictLiteral(map[string]λ.Object{
										"ext": ϒfmt,
										"url": λ.Cal(ϒupdate_url_query, ϒbase_url, ϒquery),
									}))
								}
								λ.SetItem(ϒcontainer, ϒlang_code, ϒlang_subs)
								return λ.None
							})
						ϒsubtitles = λ.DictLiteral(map[λ.Object]λ.Object{})
						τmp0 = λ.Cal(λ.BuiltinIter, func() λ.Object {
							if λv := λ.Calm(ϒpctr, "get", λ.StrLiteral("captionTracks")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewList()
							}
						}())
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒcaption_track = τmp1
							ϒbase_url = λ.Calm(ϒcaption_track, "get", λ.StrLiteral("baseUrl"))
							if !λ.IsTrue(ϒbase_url) {
								continue
							}
							if λ.IsTrue(λ.Ne(λ.Calm(ϒcaption_track, "get", λ.StrLiteral("kind")), λ.StrLiteral("asr"))) {
								ϒlang_code = λ.Calm(ϒcaption_track, "get", λ.StrLiteral("languageCode"))
								if !λ.IsTrue(ϒlang_code) {
									continue
								}
								λ.Cal(ϒprocess_language, ϒsubtitles, ϒbase_url, ϒlang_code, λ.DictLiteral(map[λ.Object]λ.Object{}))
								continue
							}
							ϒautomatic_captions = λ.DictLiteral(map[λ.Object]λ.Object{})
							τmp2 = λ.Cal(λ.BuiltinIter, func() λ.Object {
								if λv := λ.Calm(ϒpctr, "get", λ.StrLiteral("translationLanguages")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewList()
								}
							}())
							for {
								if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
									break
								}
								ϒtranslation_language = τmp3
								ϒtranslation_language_code = λ.Calm(ϒtranslation_language, "get", λ.StrLiteral("languageCode"))
								if !λ.IsTrue(ϒtranslation_language_code) {
									continue
								}
								λ.Cal(ϒprocess_language, ϒautomatic_captions, ϒbase_url, ϒtranslation_language_code, λ.DictLiteral(map[string]λ.Object{
									"tlang": ϒtranslation_language_code,
								}))
							}
							λ.SetItem(ϒinfo, λ.StrLiteral("automatic_captions"), ϒautomatic_captions)
						}
						λ.SetItem(ϒinfo, λ.StrLiteral("subtitles"), ϒsubtitles)
					}
					ϒparsed_url = λ.Cal(ϒcompat_urllib_parse_urlparse, ϒurl)
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewList(
						λ.GetAttr(ϒparsed_url, "fragment", nil),
						λ.GetAttr(ϒparsed_url, "query", nil),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒcomponent = τmp1
						ϒquery = λ.Cal(ϒcompat_parse_qs, ϒcomponent)
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒquery, "items"))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							τmp4 = τmp3
							ϒk = λ.GetItem(τmp4, λ.IntLiteral(0))
							ϒv = λ.GetItem(τmp4, λ.IntLiteral(1))
							τmp4 = λ.Cal(λ.BuiltinIter, λ.NewList(
								λ.NewTuple(
									λ.StrLiteral("start"),
									λ.NewTuple(
										λ.StrLiteral("start"),
										λ.StrLiteral("t"),
									),
								),
								λ.NewTuple(
									λ.StrLiteral("end"),
									λ.NewTuple(λ.StrLiteral("end")),
								),
							))
							for {
								if τmp5 = λ.NextDefault(τmp4, λ.AfterLast); τmp5 == λ.AfterLast {
									break
								}
								τmp6 = τmp5
								ϒd_k = λ.GetItem(τmp6, λ.IntLiteral(0))
								ϒs_ks = λ.GetItem(τmp6, λ.IntLiteral(1))
								τmp6 = λ.IAdd(ϒd_k, λ.StrLiteral("_time"))
								ϒd_k = τmp6
								if λ.IsTrue(func() λ.Object {
									if λv := λ.NewBool(!λ.Contains(ϒinfo, ϒd_k)); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.NewBool(λ.Contains(ϒs_ks, ϒk))
									}
								}()) {
									λ.SetItem(ϒinfo, ϒd_k, λ.Cal(ϒparse_duration, λ.GetItem(λ.GetItem(ϒquery, ϒk), λ.IntLiteral(0))))
								}
							}
						}
					}
					if λ.IsTrue(ϒvideo_description) {
						ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("(?s)(?P<track>[^·\\n]+)·(?P<artist>[^\\n]+)\\n+(?P<album>[^\\n]+)(?:.+?℗\\s*(?P<release_year>\\d{4})(?!\\d))?(?:.+?Released on\\s*:\\s*(?P<release_date>\\d{4}-\\d{2}-\\d{2}))?(.+?\\nArtist\\s*:\\s*(?P<clean_artist>[^\\n]+))?.+\\nAuto-generated by YouTube\\.\\s*$"), ϒvideo_description)
						if λ.IsTrue(ϒmobj) {
							ϒrelease_year = λ.Calm(ϒmobj, "group", λ.StrLiteral("release_year"))
							ϒrelease_date = λ.Calm(ϒmobj, "group", λ.StrLiteral("release_date"))
							if λ.IsTrue(ϒrelease_date) {
								ϒrelease_date = λ.Calm(ϒrelease_date, "replace", λ.StrLiteral("-"), λ.StrLiteral(""))
								if !λ.IsTrue(ϒrelease_year) {
									ϒrelease_year = λ.GetItem(ϒrelease_date, λ.NewSlice(λ.None, λ.IntLiteral(4), λ.None))
								}
							}
							λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
								"album": λ.Calm(ϒmobj, "group", λ.Calm(λ.StrLiteral("album"), "strip")),
								"artist": func() λ.Object {
									if λv := λ.Calm(ϒmobj, "group", λ.StrLiteral("clean_artist")); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Calm(λ.StrLiteral(", "), "join", λ.Cal(λ.NewFunction("<generator>",
											nil,
											0, false, false,
											func(λargs []λ.Object) λ.Object {
												return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
													var (
														ϒa   λ.Object
														τmp0 λ.Object
														τmp1 λ.Object
													)
													τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.Calm(ϒmobj, "group", λ.StrLiteral("artist")), "split", λ.StrLiteral("·")))
													for {
														if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
															break
														}
														ϒa = τmp1
														λgy.Yield(λ.Calm(ϒa, "strip"))
													}
													return λ.None
												})
											})))
									}
								}(),
								"track":        λ.Calm(λ.Calm(ϒmobj, "group", λ.StrLiteral("track")), "strip"),
								"release_date": ϒrelease_date,
								"release_year": λ.Cal(ϒint_or_none, ϒrelease_year),
							}))
						}
					}
					ϒinitial_data = λ.None
					if λ.IsTrue(ϒwebpage) {
						ϒinitial_data = λ.Calm(ϒself, "_extract_yt_initial_variable", ϒwebpage, λ.GetAttr(ϒself, "_YT_INITIAL_DATA_RE", nil), ϒvideo_id, λ.StrLiteral("yt initial data"))
					}
					if !λ.IsTrue(ϒinitial_data) {
						ϒinitial_data = λ.Call(λ.GetAttr(ϒself, "_call_api", nil), λ.NewArgs(
							λ.StrLiteral("next"),
							λ.DictLiteral(map[string]λ.Object{
								"videoId": ϒvideo_id,
							}),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
					}
					if λ.IsTrue(ϒinitial_data) {
						ϒchapters = λ.Calm(ϒself, "_extract_chapters_from_json", ϒinitial_data, ϒvideo_id, ϒduration)
						if !λ.IsTrue(ϒchapters) {
							τmp0 = λ.Cal(λ.BuiltinIter, func() λ.Object {
								if λv := λ.Calm(ϒinitial_data, "get", λ.StrLiteral("engagementPanels")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewList()
								}
							}())
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒengagment_pannel = τmp1
								ϒcontents = λ.Cal(ϒtry_get, ϒengagment_pannel, λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "x"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒx = λargs[0]
										)
										return λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("engagementPanelSectionListRenderer")), λ.StrLiteral("content")), λ.StrLiteral("macroMarkersListRenderer")), λ.StrLiteral("contents"))
									}), λ.ListType)
								if !λ.IsTrue(ϒcontents) {
									continue
								}
								ϒchapter_time = λ.NewFunction("chapter_time",
									[]λ.Param{
										{Name: "mmlir"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒmmlir = λargs[0]
										)
										return λ.Cal(ϒparse_duration, λ.Cal(ϒget_text, λ.Calm(ϒmmlir, "get", λ.StrLiteral("timeDescription"))))
									})
								ϒchapters = λ.NewList()
								τmp2 = λ.Cal(λ.BuiltinIter, λ.Call(λ.EnumerateIteratorType, λ.NewArgs(ϒcontents), λ.KWArgs{
									{Name: "start", Value: λ.IntLiteral(1)},
								}))
								for {
									if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
										break
									}
									τmp4 = τmp3
									ϒnext_num = λ.GetItem(τmp4, λ.IntLiteral(0))
									ϒcontent = λ.GetItem(τmp4, λ.IntLiteral(1))
									ϒmmlir = func() λ.Object {
										if λv := λ.Calm(ϒcontent, "get", λ.StrLiteral("macroMarkersListItemRenderer")); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.DictLiteral(map[λ.Object]λ.Object{})
										}
									}()
									ϒstart_time = λ.Cal(ϒchapter_time, ϒmmlir)
									ϒend_time = func() λ.Object {
										if λ.IsTrue(λ.Lt(ϒnext_num, λ.Cal(λ.BuiltinLen, ϒcontents))) {
											return λ.Cal(ϒchapter_time, λ.Cal(ϒtry_get, ϒcontents, λ.NewFunction("<lambda>",
												[]λ.Param{
													{Name: "x"},
												},
												0, false, false,
												func(λargs []λ.Object) λ.Object {
													var (
														ϒx = λargs[0]
													)
													return λ.GetItem(λ.GetItem(ϒx, ϒnext_num), λ.StrLiteral("macroMarkersListItemRenderer"))
												})))
										} else {
											return ϒduration
										}
									}()
									if λ.IsTrue(func() λ.Object {
										if λv := λ.NewBool(ϒstart_time == λ.None); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.NewBool(ϒend_time == λ.None)
										}
									}()) {
										continue
									}
									λ.Calm(ϒchapters, "append", λ.DictLiteral(map[string]λ.Object{
										"start_time": ϒstart_time,
										"end_time":   ϒend_time,
										"title":      λ.Cal(ϒget_text, λ.Calm(ϒmmlir, "get", λ.StrLiteral("title"))),
									}))
								}
								if λ.IsTrue(ϒchapters) {
									break
								}
							}
						}
						if λ.IsTrue(ϒchapters) {
							λ.SetItem(ϒinfo, λ.StrLiteral("chapters"), ϒchapters)
						}
						ϒcontents = func() λ.Object {
							if λv := λ.Cal(ϒtry_get, ϒinitial_data, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("contents")), λ.StrLiteral("twoColumnWatchNextResults")), λ.StrLiteral("results")), λ.StrLiteral("results")), λ.StrLiteral("contents"))
								}), λ.ListType); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewList()
							}
						}()
						τmp0 = λ.Cal(λ.BuiltinIter, ϒcontents)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒcontent = τmp1
							ϒvpir = λ.Calm(ϒcontent, "get", λ.StrLiteral("videoPrimaryInfoRenderer"))
							if λ.IsTrue(ϒvpir) {
								ϒstl = λ.Calm(ϒvpir, "get", λ.StrLiteral("superTitleLink"))
								if λ.IsTrue(ϒstl) {
									ϒstl = λ.Cal(ϒget_text, ϒstl)
									if λ.IsTrue(λ.Eq(λ.Cal(ϒtry_get, ϒvpir, λ.NewFunction("<lambda>",
										[]λ.Param{
											{Name: "x"},
										},
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											var (
												ϒx = λargs[0]
											)
											return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("superTitleIcon")), λ.StrLiteral("iconType"))
										})), λ.StrLiteral("LOCATION_PIN"))) {
										λ.SetItem(ϒinfo, λ.StrLiteral("location"), ϒstl)
									} else {
										ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("(.+?)\\s*S(\\d+)\\s*•\\s*E(\\d+)"), ϒstl)
										if λ.IsTrue(ϒmobj) {
											λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
												"series":         λ.Calm(ϒmobj, "group", λ.IntLiteral(1)),
												"season_number":  λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(2))),
												"episode_number": λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(3))),
											}))
										}
									}
								}
								τmp2 = λ.Cal(λ.BuiltinIter, func() λ.Object {
									if λv := λ.Cal(ϒtry_get, ϒvpir, λ.NewFunction("<lambda>",
										[]λ.Param{
											{Name: "x"},
										},
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											var (
												ϒx = λargs[0]
											)
											return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("videoActions")), λ.StrLiteral("menuRenderer")), λ.StrLiteral("topLevelButtons"))
										}), λ.ListType); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.NewList()
									}
								}())
								for {
									if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
										break
									}
									ϒtlb = τmp3
									ϒtbr = func() λ.Object {
										if λv := λ.Calm(ϒtlb, "get", λ.StrLiteral("toggleButtonRenderer")); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.DictLiteral(map[λ.Object]λ.Object{})
										}
									}()
									τmp4 = λ.Cal(λ.BuiltinIter, λ.NewList(
										λ.NewTuple(
											λ.NewFunction("<lambda>",
												[]λ.Param{
													{Name: "x"},
												},
												0, false, false,
												func(λargs []λ.Object) λ.Object {
													var (
														ϒx = λargs[0]
													)
													return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("defaultText")), λ.StrLiteral("accessibility")), λ.StrLiteral("accessibilityData"))
												}),
											λ.StrLiteral("(?P<count>[\\d,]+)\\s*(?P<type>(?:dis)?like)"),
										),
										λ.NewTuple(
											λ.NewList(
												λ.NewFunction("<lambda>",
													[]λ.Param{
														{Name: "x"},
													},
													0, false, false,
													func(λargs []λ.Object) λ.Object {
														var (
															ϒx = λargs[0]
														)
														return λ.GetItem(ϒx, λ.StrLiteral("accessibility"))
													}),
												λ.NewFunction("<lambda>",
													[]λ.Param{
														{Name: "x"},
													},
													0, false, false,
													func(λargs []λ.Object) λ.Object {
														var (
															ϒx = λargs[0]
														)
														return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("accessibilityData")), λ.StrLiteral("accessibilityData"))
													}),
											),
											λ.StrLiteral("(?P<type>(?:dis)?like) this video along with (?P<count>[\\d,]+) other people"),
										),
									))
									for {
										if τmp5 = λ.NextDefault(τmp4, λ.AfterLast); τmp5 == λ.AfterLast {
											break
										}
										τmp6 = τmp5
										ϒgetter = λ.GetItem(τmp6, λ.IntLiteral(0))
										ϒregex = λ.GetItem(τmp6, λ.IntLiteral(1))
										ϒlabel = λ.Calm(func() λ.Object {
											if λv := λ.Cal(ϒtry_get, ϒtbr, ϒgetter, λ.DictType); λ.IsTrue(λv) {
												return λv
											} else {
												return λ.DictLiteral(map[λ.Object]λ.Object{})
											}
										}(), "get", λ.StrLiteral("label"))
										if λ.IsTrue(ϒlabel) {
											ϒmobj = λ.Cal(Ωre.ϒmatch, ϒregex, ϒlabel)
											if λ.IsTrue(ϒmobj) {
												λ.SetItem(ϒinfo, λ.Add(λ.Calm(ϒmobj, "group", λ.StrLiteral("type")), λ.StrLiteral("_count")), λ.Cal(ϒstr_to_int, λ.Calm(ϒmobj, "group", λ.StrLiteral("count"))))
												break
											}
										}
									}
								}
								ϒsbr_tooltip = λ.Cal(ϒtry_get, ϒvpir, λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "x"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒx = λargs[0]
										)
										return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("sentimentBar")), λ.StrLiteral("sentimentBarRenderer")), λ.StrLiteral("tooltip"))
									}))
								if λ.IsTrue(ϒsbr_tooltip) {
									τmp2 = λ.Calm(ϒsbr_tooltip, "split", λ.StrLiteral(" / "))
									ϒlike_count = λ.GetItem(τmp2, λ.IntLiteral(0))
									ϒdislike_count = λ.GetItem(τmp2, λ.IntLiteral(1))
									λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
										"like_count":    λ.Cal(ϒstr_to_int, ϒlike_count),
										"dislike_count": λ.Cal(ϒstr_to_int, ϒdislike_count),
									}))
								}
							}
							ϒvsir = λ.Calm(ϒcontent, "get", λ.StrLiteral("videoSecondaryInfoRenderer"))
							if λ.IsTrue(ϒvsir) {
								λ.SetItem(ϒinfo, λ.StrLiteral("channel"), λ.Cal(ϒget_text, λ.Cal(ϒtry_get, ϒvsir, λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "x"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒx = λargs[0]
										)
										return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("owner")), λ.StrLiteral("videoOwnerRenderer")), λ.StrLiteral("title"))
									}), ϒcompat_str)))
								ϒrows = func() λ.Object {
									if λv := λ.Cal(ϒtry_get, ϒvsir, λ.NewFunction("<lambda>",
										[]λ.Param{
											{Name: "x"},
										},
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											var (
												ϒx = λargs[0]
											)
											return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("metadataRowContainer")), λ.StrLiteral("metadataRowContainerRenderer")), λ.StrLiteral("rows"))
										}), λ.ListType); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.NewList()
									}
								}()
								ϒmultiple_songs = λ.False
								τmp2 = λ.Cal(λ.BuiltinIter, ϒrows)
								for {
									if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
										break
									}
									ϒrow = τmp3
									if λ.Cal(ϒtry_get, ϒrow, λ.NewFunction("<lambda>",
										[]λ.Param{
											{Name: "x"},
										},
										0, false, false,
										func(λargs []λ.Object) λ.Object {
											var (
												ϒx = λargs[0]
											)
											return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("metadataRowRenderer")), λ.StrLiteral("hasDividerLine"))
										})) == λ.True {
										ϒmultiple_songs = λ.True
										break
									}
								}
								τmp2 = λ.Cal(λ.BuiltinIter, ϒrows)
								for {
									if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
										break
									}
									ϒrow = τmp3
									ϒmrr = func() λ.Object {
										if λv := λ.Calm(ϒrow, "get", λ.StrLiteral("metadataRowRenderer")); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.DictLiteral(map[λ.Object]λ.Object{})
										}
									}()
									ϒmrr_title = λ.Calm(ϒmrr, "get", λ.StrLiteral("title"))
									if !λ.IsTrue(ϒmrr_title) {
										continue
									}
									ϒmrr_title = λ.Cal(ϒget_text, λ.GetItem(ϒmrr, λ.StrLiteral("title")))
									ϒmrr_contents_text = λ.Cal(ϒget_text, λ.GetItem(λ.GetItem(ϒmrr, λ.StrLiteral("contents")), λ.IntLiteral(0)))
									if λ.IsTrue(λ.Eq(ϒmrr_title, λ.StrLiteral("License"))) {
										λ.SetItem(ϒinfo, λ.StrLiteral("license"), ϒmrr_contents_text)
									} else {
										if !λ.IsTrue(ϒmultiple_songs) {
											if λ.IsTrue(λ.Eq(ϒmrr_title, λ.StrLiteral("Album"))) {
												λ.SetItem(ϒinfo, λ.StrLiteral("album"), ϒmrr_contents_text)
											} else {
												if λ.IsTrue(λ.Eq(ϒmrr_title, λ.StrLiteral("Artist"))) {
													λ.SetItem(ϒinfo, λ.StrLiteral("artist"), ϒmrr_contents_text)
												} else {
													if λ.IsTrue(λ.Eq(ϒmrr_title, λ.StrLiteral("Song"))) {
														λ.SetItem(ϒinfo, λ.StrLiteral("track"), ϒmrr_contents_text)
													}
												}
											}
										}
									}
								}
							}
						}
					}
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewList(
						λ.NewTuple(
							λ.StrLiteral("artist"),
							λ.StrLiteral("creator"),
						),
						λ.NewTuple(
							λ.StrLiteral("track"),
							λ.StrLiteral("alt_title"),
						),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒs_k = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒd_k = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒv = λ.Calm(ϒinfo, "get", ϒs_k)
						if λ.IsTrue(ϒv) {
							λ.SetItem(ϒinfo, ϒd_k, ϒv)
						}
					}
					λ.Calm(ϒself, "mark_watched", ϒvideo_id, ϒplayer_response)
					return ϒinfo
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":                      YoutubeIE_IE_NAME,
				"_GEO_BYPASS":                  YoutubeIE__GEO_BYPASS,
				"_INVIDIOUS_SITES":             YoutubeIE__INVIDIOUS_SITES,
				"_PLAYER_INFO_RE":              YoutubeIE__PLAYER_INFO_RE,
				"_SUBTITLE_FORMATS":            YoutubeIE__SUBTITLE_FORMATS,
				"_VALID_URL":                   YoutubeIE__VALID_URL,
				"__init__":                     YoutubeIE___init__,
				"_decrypt_signature":           YoutubeIE__decrypt_signature,
				"_extract_chapters_from_json":  YoutubeIE__extract_chapters_from_json,
				"_extract_player_info":         YoutubeIE__extract_player_info,
				"_extract_signature_function":  YoutubeIE__extract_signature_function,
				"_extract_url":                 YoutubeIE__extract_url,
				"_extract_urls":                YoutubeIE__extract_urls,
				"_extract_yt_initial_variable": YoutubeIE__extract_yt_initial_variable,
				"_parse_sig_js":                YoutubeIE__parse_sig_js,
				"_real_extract":                YoutubeIE__real_extract,
				"_signature_cache_id":          YoutubeIE__signature_cache_id,
			})
		}())
		YoutubeTabIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeTabIE"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeTabIE_IE_NAME       λ.Object
				YoutubeTabIE__VALID_URL    λ.Object
				YoutubeTabIE__real_extract λ.Object
				YoutubeTabIE_suitable      λ.Object
			)
			YoutubeTabIE__VALID_URL = λ.StrLiteral("(?x)\n                    https?://\n                        (?:\\w+\\.)?\n                        (?:\n                            youtube(?:kids)?\\.com|\n                            invidio\\.us\n                        )/\n                        (?:\n                            (?:channel|c|user|feed)/|\n                            (?:playlist|watch)\\?.*?\\blist=|\n                            (?!(?:watch|embed|v|e)\\b)\n                        )\n                        (?P<id>[^/?\\#&]+)\n                    ")
			YoutubeTabIE_IE_NAME = λ.StrLiteral("youtube:tab")
			YoutubeTabIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Calm(YoutubeIE, "suitable", ϒurl)) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, YoutubeTabIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			YoutubeTabIE_suitable = λ.Cal(λ.ClassMethodType, YoutubeTabIE_suitable)
			YoutubeTabIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒalert          λ.Object
						ϒdata           λ.Object
						ϒidentity_token λ.Object
						ϒitem_id        λ.Object
						ϒplaylist       λ.Object
						ϒplaylist_id    λ.Object
						ϒqs             λ.Object
						ϒself           = λargs[0]
						ϒtabs           λ.Object
						ϒurl            = λargs[1]
						ϒvideo_id       λ.Object
						ϒwebpage        λ.Object
					)
					ϒitem_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒurl = λ.Cal(Ωparse.ϒurlunparse, λ.Call(λ.GetAttr(λ.Cal(Ωparse.ϒurlparse, ϒurl), "_replace", nil), nil, λ.KWArgs{
						{Name: "netloc", Value: λ.StrLiteral("www.youtube.com")},
					}))
					ϒqs = λ.Cal(Ωparse.ϒparse_qs, λ.GetAttr(λ.Cal(Ωparse.ϒurlparse, ϒurl), "query", nil))
					ϒvideo_id = λ.GetItem(λ.Calm(ϒqs, "get", λ.StrLiteral("v"), λ.NewList(λ.None)), λ.IntLiteral(0))
					ϒplaylist_id = λ.GetItem(λ.Calm(ϒqs, "get", λ.StrLiteral("list"), λ.NewList(λ.None)), λ.IntLiteral(0))
					if λ.IsTrue(func() λ.Object {
						if λv := ϒvideo_id; !λ.IsTrue(λv) {
							return λv
						} else {
							return ϒplaylist_id
						}
					}()) {
						if λ.IsTrue(λ.Calm(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", λ.StrLiteral("noplaylist"))) {
							λ.Calm(ϒself, "to_screen", λ.Mod(λ.StrLiteral("Downloading just video %s because of --no-playlist"), ϒvideo_id))
							return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(ϒvideo_id), λ.KWArgs{
								{Name: "ie", Value: λ.Calm(YoutubeIE, "ie_key")},
								{Name: "video_id", Value: ϒvideo_id},
							})
						}
						λ.Calm(ϒself, "to_screen", λ.Mod(λ.StrLiteral("Downloading playlist %s - add --no-playlist to just download video %s"), λ.NewTuple(
							ϒplaylist_id,
							ϒvideo_id,
						)))
					}
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒitem_id)
					ϒidentity_token = λ.Calm(ϒself, "_extract_identity_token", ϒwebpage, ϒitem_id)
					ϒdata = λ.Calm(ϒself, "_extract_yt_initial_data", ϒitem_id, ϒwebpage)
					ϒtabs = λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("contents")), λ.StrLiteral("twoColumnBrowseResultsRenderer")), λ.StrLiteral("tabs"))
						}), λ.ListType)
					if λ.IsTrue(ϒtabs) {
						return λ.Calm(ϒself, "_extract_from_tabs", ϒitem_id, ϒwebpage, ϒdata, ϒtabs, ϒidentity_token)
					}
					ϒplaylist = λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("contents")), λ.StrLiteral("twoColumnWatchNextResults")), λ.StrLiteral("playlist")), λ.StrLiteral("playlist"))
						}), λ.DictType)
					if λ.IsTrue(ϒplaylist) {
						return λ.Calm(ϒself, "_extract_from_playlist", ϒitem_id, ϒurl, ϒdata, ϒplaylist)
					}
					ϒvideo_id = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("currentVideoEndpoint")), λ.StrLiteral("watchEndpoint")), λ.StrLiteral("videoId"))
							}), ϒcompat_str); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_id
						}
					}()
					if λ.IsTrue(ϒvideo_id) {
						return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(ϒvideo_id), λ.KWArgs{
							{Name: "ie", Value: λ.Calm(YoutubeIE, "ie_key")},
							{Name: "video_id", Value: ϒvideo_id},
						})
					}
					ϒalert = λ.Calm(ϒself, "_extract_alert", ϒdata)
					if λ.IsTrue(ϒalert) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒalert), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					panic(λ.Raise(λ.Cal(ExtractorError, λ.StrLiteral("Unable to recognize tab page"))))
					return λ.None
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       YoutubeTabIE_IE_NAME,
				"_VALID_URL":    YoutubeTabIE__VALID_URL,
				"_real_extract": YoutubeTabIE__real_extract,
				"suitable":      YoutubeTabIE_suitable,
			})
		}())
		YoutubePlaylistIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubePlaylistIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubePlaylistIE__VALID_URL λ.Object
				YoutubePlaylistIE_suitable   λ.Object
			)
			YoutubePlaylistIE__VALID_URL = λ.Mod(λ.StrLiteral("(?x)(?:\n                        (?:https?://)?\n                        (?:\\w+\\.)?\n                        (?:\n                            (?:\n                                youtube(?:kids)?\\.com|\n                                invidio\\.us\n                            )\n                            /.*?\\?.*?\\blist=\n                        )?\n                        (?P<id>%(playlist_id)s)\n                     )"), λ.DictLiteral(map[string]λ.Object{
				"playlist_id": λ.GetAttr(YoutubeBaseInfoExtractor, "_PLAYLIST_ID_RE", nil),
			}))
			YoutubePlaylistIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Calm(YoutubeTabIE, "suitable", ϒurl)) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, YoutubePlaylistIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			YoutubePlaylistIE_suitable = λ.Cal(λ.ClassMethodType, YoutubePlaylistIE_suitable)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubePlaylistIE__VALID_URL,
				"suitable":   YoutubePlaylistIE_suitable,
			})
		}())
		YoutubeYtBeIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeYtBeIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubeYtBeIE__VALID_URL λ.Object
			)
			YoutubeYtBeIE__VALID_URL = λ.Mod(λ.StrLiteral("https?://youtu\\.be/(?P<id>[0-9A-Za-z_-]{11})/*?.*?\\blist=(?P<playlist_id>%(playlist_id)s)"), λ.DictLiteral(map[string]λ.Object{
				"playlist_id": λ.GetAttr(YoutubeBaseInfoExtractor, "_PLAYLIST_ID_RE", nil),
			}))
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeYtBeIE__VALID_URL,
			})
		}())
		YoutubeYtUserIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeYtUserIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubeYtUserIE__VALID_URL λ.Object
			)
			YoutubeYtUserIE__VALID_URL = λ.StrLiteral("ytuser:(?P<id>.+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeYtUserIE__VALID_URL,
			})
		}())
		YoutubeFavouritesIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeFavouritesIE"), λ.NewTuple(YoutubeBaseInfoExtractor), func() λ.Dict {
			var (
				YoutubeFavouritesIE__VALID_URL λ.Object
			)
			YoutubeFavouritesIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?youtube\\.com/my_favorites|:ytfav(?:ou?rites)?")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeFavouritesIE__VALID_URL,
			})
		}())
		YoutubeSearchIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeSearchIE"), λ.NewTuple(
			SearchInfoExtractor,
			YoutubeBaseInfoExtractor,
		), func() λ.Dict {
			var (
				YoutubeSearchIE_IE_NAME λ.Object
			)
			YoutubeSearchIE_IE_NAME = λ.StrLiteral("youtube:search")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME": YoutubeSearchIE_IE_NAME,
			})
		}())
		YoutubeFeedsInfoExtractor = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeFeedsInfoExtractor"), λ.NewTuple(YoutubeTabIE), func() λ.Dict {

			return λ.ClassDictLiteral(map[λ.Object]λ.Object{})
		}())
		YoutubeWatchLaterIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeWatchLaterIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubeWatchLaterIE__VALID_URL λ.Object
			)
			YoutubeWatchLaterIE__VALID_URL = λ.StrLiteral(":ytwatchlater")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeWatchLaterIE__VALID_URL,
			})
		}())
		YoutubeRecommendedIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeRecommendedIE"), λ.NewTuple(YoutubeFeedsInfoExtractor), func() λ.Dict {
			var (
				YoutubeRecommendedIE__VALID_URL λ.Object
			)
			YoutubeRecommendedIE__VALID_URL = λ.StrLiteral(":ytrec(?:ommended)?")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeRecommendedIE__VALID_URL,
			})
		}())
		YoutubeSubscriptionsIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeSubscriptionsIE"), λ.NewTuple(YoutubeFeedsInfoExtractor), func() λ.Dict {
			var (
				YoutubeSubscriptionsIE__VALID_URL λ.Object
			)
			YoutubeSubscriptionsIE__VALID_URL = λ.StrLiteral(":ytsubs(?:criptions)?")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeSubscriptionsIE__VALID_URL,
			})
		}())
		YoutubeHistoryIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeHistoryIE"), λ.NewTuple(YoutubeFeedsInfoExtractor), func() λ.Dict {
			var (
				YoutubeHistoryIE__VALID_URL λ.Object
			)
			YoutubeHistoryIE__VALID_URL = λ.StrLiteral(":ythistory")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeHistoryIE__VALID_URL,
			})
		}())
		YoutubeTruncatedURLIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeTruncatedURLIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubeTruncatedURLIE__VALID_URL λ.Object
			)
			YoutubeTruncatedURLIE__VALID_URL = λ.StrLiteral("(?x)\n        (?:https?://)?\n        (?:\\w+\\.)?[yY][oO][uU][tT][uU][bB][eE](?:-nocookie)?\\.com/\n        (?:watch\\?(?:\n            feature=[a-z_]+|\n            annotation_id=annotation_[^&]+|\n            x-yt-cl=[0-9]+|\n            hl=[^&]*|\n            t=[0-9]+\n        )?\n        |\n            attribution_link\\?a=[^&]+\n        )\n        $\n    ")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeTruncatedURLIE__VALID_URL,
			})
		}())
		YoutubeTruncatedIDIE = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeTruncatedIDIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				YoutubeTruncatedIDIE__VALID_URL λ.Object
			)
			YoutubeTruncatedIDIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?youtube\\.com/watch\\?v=(?P<id>[0-9A-Za-z_-]{1,10})$")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": YoutubeTruncatedIDIE__VALID_URL,
			})
		}())
	})
}
