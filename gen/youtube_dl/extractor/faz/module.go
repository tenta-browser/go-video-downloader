// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * faz/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/faz.py
 */

package faz

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	FazIE                    λ.Object
	InfoExtractor            λ.Object
	ϒcompat_etree_fromstring λ.Object
	ϒint_or_none             λ.Object
	ϒxpath_element           λ.Object
	ϒxpath_text              λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_etree_fromstring = Ωcompat.ϒcompat_etree_fromstring
		ϒxpath_element = Ωutils.ϒxpath_element
		ϒxpath_text = Ωutils.ϒxpath_text
		ϒint_or_none = Ωutils.ϒint_or_none
		FazIE = λ.Cal(λ.TypeType, λ.StrLiteral("FazIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				FazIE_IE_NAME       λ.Object
				FazIE__VALID_URL    λ.Object
				FazIE__real_extract λ.Object
			)
			FazIE_IE_NAME = λ.StrLiteral("faz.net")
			FazIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?faz\\.net/(?:[^/]+/)*.*?-(?P<id>\\d+)\\.html")
			FazIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcode         λ.Object
						ϒconfig       λ.Object
						ϒdescription  λ.Object
						ϒencoding     λ.Object
						ϒencoding_url λ.Object
						ϒencodings    λ.Object
						ϒf            λ.Object
						ϒformats      λ.Object
						ϒmedia        λ.Object
						ϒmobj         λ.Object
						ϒperform_url  λ.Object
						ϒpref         λ.Object
						ϒself         = λargs[0]
						ϒtbr          λ.Object
						ϒurl          = λargs[1]
						ϒvideo_id     λ.Object
						ϒwebpage      λ.Object
						τmp0          λ.Object
						τmp1          λ.Object
						τmp2          λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒdescription = λ.Calm(ϒself, "_og_search_description", ϒwebpage)
					ϒmedia = λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("data-videojs-media='([^']+)"), ϒwebpage, λ.StrLiteral("media"))
					if λ.IsTrue(λ.Eq(ϒmedia, λ.StrLiteral("extern"))) {
						ϒperform_url = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("<iframe[^>]+?src='((?:http:)?//player\\.performgroup\\.com/eplayer/eplayer\\.html#/?[0-9a-f]{26}\\.[0-9a-z]{26})"), ϒwebpage, λ.StrLiteral("perform url"))
						return λ.Calm(ϒself, "url_result", ϒperform_url)
					}
					ϒconfig = λ.Cal(ϒcompat_etree_fromstring, ϒmedia)
					ϒencodings = λ.Cal(ϒxpath_element, ϒconfig, λ.StrLiteral("ENCODINGS"), λ.StrLiteral("encodings"), λ.True)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.EnumerateIteratorType, λ.NewList(
						λ.StrLiteral("LOW"),
						λ.StrLiteral("HIGH"),
						λ.StrLiteral("HQ"),
					)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒpref = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒcode = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒencoding = λ.Cal(ϒxpath_element, ϒencodings, ϒcode)
						if ϒencoding != λ.None {
							ϒencoding_url = λ.Cal(ϒxpath_text, ϒencoding, λ.StrLiteral("FILENAME"))
							if λ.IsTrue(ϒencoding_url) {
								ϒtbr = λ.Cal(ϒxpath_text, ϒencoding, λ.StrLiteral("AVERAGEBITRATE"), λ.IntLiteral(1000))
								if λ.IsTrue(ϒtbr) {
									ϒtbr = λ.Cal(ϒint_or_none, λ.Calm(ϒtbr, "replace", λ.StrLiteral(","), λ.StrLiteral(".")))
								}
								ϒf = λ.DictLiteral(map[string]λ.Object{
									"url":       ϒencoding_url,
									"format_id": λ.Calm(ϒcode, "lower"),
									"quality":   ϒpref,
									"tbr":       ϒtbr,
									"vcodec":    λ.Cal(ϒxpath_text, ϒencoding, λ.StrLiteral("CODEC")),
								})
								ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("(\\d+)x(\\d+)_(\\d+)\\.mp4"), ϒencoding_url)
								if λ.IsTrue(ϒmobj) {
									λ.Calm(ϒf, "update", λ.DictLiteral(map[string]λ.Object{
										"width":  λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(1))),
										"height": λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(2))),
										"tbr": func() λ.Object {
											if λv := ϒtbr; λ.IsTrue(λv) {
												return λv
											} else {
												return λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(3)))
											}
										}(),
									}))
								}
								λ.Calm(ϒformats, "append", ϒf)
							}
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":      ϒvideo_id,
						"title":   λ.Calm(ϒself, "_og_search_title", ϒwebpage),
						"formats": ϒformats,
						"description": func() λ.Object {
							if λ.IsTrue(ϒdescription) {
								return λ.Calm(ϒdescription, "strip")
							} else {
								return λ.None
							}
						}(),
						"thumbnail": λ.Cal(ϒxpath_text, ϒconfig, λ.StrLiteral("STILL/STILL_BIG")),
						"duration":  λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒconfig, λ.StrLiteral("DURATION"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       FazIE_IE_NAME,
				"_VALID_URL":    FazIE__VALID_URL,
				"_real_extract": FazIE__real_extract,
			})
		}())
	})
}
