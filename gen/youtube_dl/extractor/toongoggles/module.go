// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * toongoggles/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/toongoggles.py
 */

package toongoggles

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor   λ.Object
	ToonGogglesIE   λ.Object
	ϒint_or_none    λ.Object
	ϒparse_duration λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ToonGogglesIE = λ.Cal(λ.TypeType, λ.StrLiteral("ToonGogglesIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ToonGogglesIE__VALID_URL          λ.Object
				ToonGogglesIE__call_api           λ.Object
				ToonGogglesIE__parse_episode_data λ.Object
				ToonGogglesIE__real_extract       λ.Object
			)
			ToonGogglesIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?toongoggles\\.com/shows/(?P<show_id>\\d+)(?:/[^/]+/episodes/(?P<episode_id>\\d+))?")
			ToonGogglesIE__call_api = λ.NewFunction("_call_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "action"},
					{Name: "page_id"},
					{Name: "query"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaction  = λargs[1]
						ϒpage_id = λargs[2]
						ϒquery   = λargs[3]
						ϒself    = λargs[0]
					)
					λ.Calm(ϒquery, "update", λ.DictLiteral(map[string]λ.Object{
						"for_ng":    λ.IntLiteral(1),
						"for_web":   λ.IntLiteral(1),
						"show_meta": λ.IntLiteral(1),
						"version":   λ.FloatLiteral(7.0),
					}))
					return λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.StrLiteral("http://api.toongoggles.com/"), ϒaction),
						ϒpage_id,
					), λ.KWArgs{
						{Name: "query", Value: ϒquery},
					})
				})
			ToonGogglesIE__parse_episode_data = λ.NewFunction("_parse_episode_data",
				[]λ.Param{
					{Name: "self"},
					{Name: "episode_data"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒepisode_data = λargs[1]
						ϒself         = λargs[0]
						ϒtitle        λ.Object
					)
					_ = ϒself
					ϒtitle = λ.GetItem(ϒepisode_data, λ.StrLiteral("episode_name"))
					return λ.DictLiteral(map[string]λ.Object{
						"_type":          λ.StrLiteral("url_transparent"),
						"id":             λ.GetItem(ϒepisode_data, λ.StrLiteral("episode_id")),
						"title":          ϒtitle,
						"url":            λ.Add(λ.StrLiteral("kaltura:513551:"), λ.GetItem(ϒepisode_data, λ.StrLiteral("entry_id"))),
						"thumbnail":      λ.Calm(ϒepisode_data, "get", λ.StrLiteral("thumbnail_url")),
						"description":    λ.Calm(ϒepisode_data, "get", λ.StrLiteral("description")),
						"duration":       λ.Cal(ϒparse_duration, λ.Calm(ϒepisode_data, "get", λ.StrLiteral("hms"))),
						"series":         λ.Calm(ϒepisode_data, "get", λ.StrLiteral("show_name")),
						"season_number":  λ.Cal(ϒint_or_none, λ.Calm(ϒepisode_data, "get", λ.StrLiteral("season_num"))),
						"episode_id":     λ.Calm(ϒepisode_data, "get", λ.StrLiteral("episode_id")),
						"episode":        ϒtitle,
						"episode_number": λ.Cal(ϒint_or_none, λ.Calm(ϒepisode_data, "get", λ.StrLiteral("episode_num"))),
						"categories":     λ.Calm(ϒepisode_data, "get", λ.StrLiteral("categories")),
						"ie_key":         λ.StrLiteral("Kaltura"),
					})
				})
			ToonGogglesIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒentries      λ.Object
						ϒepisode_data λ.Object
						ϒepisode_id   λ.Object
						ϒself         = λargs[0]
						ϒshow_data    λ.Object
						ϒshow_id      λ.Object
						ϒurl          = λargs[1]
						τmp0          λ.Object
						τmp1          λ.Object
					)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒshow_id = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒepisode_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					if λ.IsTrue(ϒepisode_id) {
						ϒepisode_data = λ.GetItem(λ.GetItem(λ.Calm(ϒself, "_call_api", λ.StrLiteral("search"), ϒepisode_id, λ.DictLiteral(map[string]λ.Object{
							"filter": λ.StrLiteral("episode"),
							"id":     ϒepisode_id,
						})), λ.StrLiteral("objects")), λ.IntLiteral(0))
						return λ.Calm(ϒself, "_parse_episode_data", ϒepisode_data)
					} else {
						ϒshow_data = λ.Calm(ϒself, "_call_api", λ.StrLiteral("getepisodesbyshow"), ϒshow_id, λ.DictLiteral(map[string]λ.Object{
							"max":    λ.IntLiteral(1000000000),
							"showid": ϒshow_id,
						}))
						ϒentries = λ.NewList()
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒshow_data, "get", λ.StrLiteral("objects"), λ.NewList()))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒepisode_data = τmp1
							λ.Calm(ϒentries, "append", λ.Calm(ϒself, "_parse_episode_data", ϒepisode_data))
						}
						return λ.Calm(ϒself, "playlist_result", ϒentries, ϒshow_id, λ.Calm(ϒshow_data, "get", λ.StrLiteral("show_name")))
					}
					return λ.None
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":          ToonGogglesIE__VALID_URL,
				"_call_api":           ToonGogglesIE__call_api,
				"_parse_episode_data": ToonGogglesIE__parse_episode_data,
				"_real_extract":       ToonGogglesIE__real_extract,
			})
		}())
	})
}
