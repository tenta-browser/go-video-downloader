// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * eporner/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/eporner.py
 */

package eporner

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	EpornerIE       λ.Object
	ExtractorError  λ.Object
	InfoExtractor   λ.Object
	ϒencode_base_n  λ.Object
	ϒint_or_none    λ.Object
	ϒmerge_dicts    λ.Object
	ϒparse_duration λ.Object
	ϒstr_to_int     λ.Object
	ϒurl_or_none    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒencode_base_n = Ωutils.ϒencode_base_n
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmerge_dicts = Ωutils.ϒmerge_dicts
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ϒurl_or_none = Ωutils.ϒurl_or_none
		EpornerIE = λ.Cal(λ.TypeType, λ.StrLiteral("EpornerIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				EpornerIE__VALID_URL    λ.Object
				EpornerIE__real_extract λ.Object
			)
			EpornerIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?eporner\\.com/(?:(?:hd-porn|embed)/|video-)(?P<id>\\w+)(?:/(?P<display_id>[\\w-]+))?")
			EpornerIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcalc_hash    λ.Object
						ϒdisplay_id   λ.Object
						ϒduration     λ.Object
						ϒformat_dict  λ.Object
						ϒformat_id    λ.Object
						ϒformats      λ.Object
						ϒformats_dict λ.Object
						ϒfps          λ.Object
						ϒhash         λ.Object
						ϒheight       λ.Object
						ϒjson_ld      λ.Object
						ϒkind         λ.Object
						ϒmobj         λ.Object
						ϒself         = λargs[0]
						ϒsources      λ.Object
						ϒsrc          λ.Object
						ϒtitle        λ.Object
						ϒurl          = λargs[1]
						ϒurlh         λ.Object
						ϒvideo        λ.Object
						ϒvideo_id     λ.Object
						ϒview_count   λ.Object
						ϒwebpage      λ.Object
						τmp0          λ.Object
						τmp1          λ.Object
						τmp2          λ.Object
						τmp3          λ.Object
						τmp4          λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒdisplay_id = func() λ.Object {
						if λv := λ.Calm(ϒmobj, "group", λ.StrLiteral("display_id")); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_id
						}
					}()
					τmp0 = λ.Calm(ϒself, "_download_webpage_handle", ϒurl, ϒdisplay_id)
					ϒwebpage = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒurlh = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒvideo_id = λ.Calm(ϒself, "_match_id", λ.Calm(ϒurlh, "geturl"))
					ϒhash = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("hash\\s*[:=]\\s*[\"\\']([\\da-f]{32})"), ϒwebpage, λ.StrLiteral("hash"))
					ϒtitle = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_title", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("<title>(.+?) - EPORNER"), ϒwebpage, λ.StrLiteral("title"))
						}
					}()
					ϒcalc_hash = λ.NewFunction("calc_hash",
						[]λ.Param{
							{Name: "s"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒs = λargs[0]
							)
							return λ.Calm(λ.StrLiteral(""), "join", λ.Cal(λ.NewFunction("<generator>",
								nil,
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
										var (
											ϒlb  λ.Object
											τmp0 λ.Object
											τmp1 λ.Object
										)
										τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.RangeType, λ.IntLiteral(0), λ.IntLiteral(32), λ.IntLiteral(8)))
										for {
											if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
												break
											}
											ϒlb = τmp1
											λgy.Yield(λ.Cal(ϒencode_base_n, λ.Cal(λ.IntType, λ.GetItem(ϒs, λ.NewSlice(ϒlb, λ.Add(ϒlb, λ.IntLiteral(8)), λ.None)), λ.IntLiteral(16)), λ.IntLiteral(36)))
										}
										return λ.None
									})
								})))
						})
					ϒvideo = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("http://www.eporner.com/xhr/video/%s"), ϒvideo_id),
						ϒdisplay_id,
					), λ.KWArgs{
						{Name: "note", Value: λ.StrLiteral("Downloading video JSON")},
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"hash":     λ.Cal(ϒcalc_hash, ϒhash),
							"device":   λ.StrLiteral("generic"),
							"domain":   λ.StrLiteral("www.eporner.com"),
							"fallback": λ.StrLiteral("false"),
						})},
					})
					if λ.Calm(ϒvideo, "get", λ.StrLiteral("available")) == λ.False {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							λ.GetItem(ϒvideo, λ.StrLiteral("message")),
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒsources = λ.GetItem(ϒvideo, λ.StrLiteral("sources"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒsources, "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒkind = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒformats_dict = λ.GetItem(τmp2, λ.IntLiteral(1))
						if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒformats_dict, λ.DictType)) {
							continue
						}
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒformats_dict, "items"))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							τmp4 = τmp3
							ϒformat_id = λ.GetItem(τmp4, λ.IntLiteral(0))
							ϒformat_dict = λ.GetItem(τmp4, λ.IntLiteral(1))
							if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒformat_dict, λ.DictType)) {
								continue
							}
							ϒsrc = λ.Cal(ϒurl_or_none, λ.Calm(ϒformat_dict, "get", λ.StrLiteral("src")))
							if λ.IsTrue(func() λ.Object {
								if λv := λ.NewBool(!λ.IsTrue(ϒsrc)); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewBool(!λ.IsTrue(λ.Calm(ϒsrc, "startswith", λ.StrLiteral("http"))))
								}
							}()) {
								continue
							}
							if λ.IsTrue(λ.Eq(ϒkind, λ.StrLiteral("hls"))) {
								λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒsrc,
									ϒdisplay_id,
									λ.StrLiteral("mp4"),
								), λ.KWArgs{
									{Name: "entry_protocol", Value: λ.StrLiteral("m3u8_native")},
									{Name: "m3u8_id", Value: ϒkind},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								ϒheight = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.StrLiteral("(\\d+)[pP]"),
									ϒformat_id,
									λ.StrLiteral("height"),
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
								}))
								ϒfps = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.StrLiteral("(\\d+)fps"),
									ϒformat_id,
									λ.StrLiteral("fps"),
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
								}))
								λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
									"url":       ϒsrc,
									"format_id": ϒformat_id,
									"height":    ϒheight,
									"fps":       ϒfps,
								}))
							}
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒjson_ld = λ.Call(λ.GetAttr(ϒself, "_search_json_ld", nil), λ.NewArgs(
						ϒwebpage,
						ϒdisplay_id,
					), λ.KWArgs{
						{Name: "default", Value: λ.DictLiteral(map[λ.Object]λ.Object{})},
					})
					ϒduration = λ.Cal(ϒparse_duration, λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.StrLiteral("duration"),
						ϒwebpage,
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒview_count = λ.Cal(ϒstr_to_int, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("id=[\"\\']cinemaviews1[\"\\'][^>]*>\\s*([0-9,]+)"),
						ϒwebpage,
						λ.StrLiteral("view count"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					return λ.Cal(ϒmerge_dicts, ϒjson_ld, λ.DictLiteral(map[string]λ.Object{
						"id":         ϒvideo_id,
						"display_id": ϒdisplay_id,
						"title":      ϒtitle,
						"duration":   ϒduration,
						"view_count": ϒview_count,
						"formats":    ϒformats,
						"age_limit":  λ.IntLiteral(18),
					}))
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    EpornerIE__VALID_URL,
				"_real_extract": EpornerIE__real_extract,
			})
		}())
	})
}
