// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * spiegel/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/spiegel.py
 */

package spiegel

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωjwplatform "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/jwplatform"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	JWPlatformIE  λ.Object
	SpiegelIE     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		JWPlatformIE = Ωjwplatform.JWPlatformIE
		SpiegelIE = λ.Cal(λ.TypeType, λ.StrLiteral("SpiegelIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SpiegelIE__UUID_RE      λ.Object
				SpiegelIE__VALID_URL    λ.Object
				SpiegelIE__real_extract λ.Object
			)
			SpiegelIE__UUID_RE = λ.StrLiteral("[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}")
			SpiegelIE__VALID_URL = λ.Mod(λ.StrLiteral("https?://(?:www\\.)?(?:spiegel|manager-magazin)\\.de(?:/[^/]+)+/[^/]*-(?P<id>[0-9]+|%s)(?:-embed|-iframe)?(?:\\.html)?(?:#.*)?$"), SpiegelIE__UUID_RE)
			SpiegelIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒmedia_id λ.Object
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
						ϒwebpage  λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒmedia_id = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(&#34;|[\"\\'])mediaId\\1\\s*:\\s*(&#34;|[\"\\'])(?P<id>(?:(?!\\2).)+)\\2"),
						ϒwebpage,
						λ.StrLiteral("media id"),
					), λ.KWArgs{
						{Name: "group", Value: λ.StrLiteral("id")},
					})
					return λ.DictLiteral(map[string]λ.Object{
						"_type":      λ.StrLiteral("url_transparent"),
						"id":         ϒvideo_id,
						"display_id": ϒvideo_id,
						"url":        λ.Mod(λ.StrLiteral("jwplatform:%s"), ϒmedia_id),
						"title": λ.Call(λ.GetAttr(ϒself, "_og_search_title", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}),
						"ie_key": λ.Calm(JWPlatformIE, "ie_key"),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_UUID_RE":      SpiegelIE__UUID_RE,
				"_VALID_URL":    SpiegelIE__VALID_URL,
				"_real_extract": SpiegelIE__real_extract,
			})
		}())
	})
}
