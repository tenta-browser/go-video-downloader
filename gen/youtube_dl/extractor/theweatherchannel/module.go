// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * theweatherchannel/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/theweatherchannel.py
 */

package theweatherchannel

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωtheplatform "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/theplatform"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ThePlatformIE       λ.Object
	TheWeatherChannelIE λ.Object
	ϒdetermine_ext      λ.Object
	ϒparse_duration     λ.Object
	ϒparse_iso8601      λ.Object
)

func init() {
	λ.InitModule(func() {
		ThePlatformIE = Ωtheplatform.ThePlatformIE
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		TheWeatherChannelIE = λ.Cal(λ.TypeType, λ.StrLiteral("TheWeatherChannelIE"), λ.NewTuple(ThePlatformIE), func() λ.Dict {
			var (
				TheWeatherChannelIE__VALID_URL    λ.Object
				TheWeatherChannelIE__real_extract λ.Object
			)
			TheWeatherChannelIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?weather\\.com(?P<asset_name>(?:/(?P<locale>[a-z]{2}-[A-Z]{2}))?/(?:[^/]+/)*video/(?P<id>[^/?#]+))")
			TheWeatherChannelIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒasset_name  λ.Object
						ϒcc_url      λ.Object
						ϒdisplay_id  λ.Object
						ϒext         λ.Object
						ϒformats     λ.Object
						ϒlocale      λ.Object
						ϒself        = λargs[0]
						ϒseo_meta    λ.Object
						ϒthumbnails  λ.Object
						ϒtitle       λ.Object
						ϒtp_formats  λ.Object
						ϒurl         = λargs[1]
						ϒurls        λ.Object
						ϒvariant_id  λ.Object
						ϒvariant_url λ.Object
						ϒvideo_data  λ.Object
						ϒvideo_id    λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
						τmp2         λ.Object
					)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒasset_name = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒlocale = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒdisplay_id = λ.GetItem(τmp0, λ.IntLiteral(2))
					if !λ.IsTrue(ϒlocale) {
						ϒlocale = λ.StrLiteral("en-US")
					}
					ϒvideo_data = λ.GetItem(λ.GetItem(λ.GetItem(λ.Cal(λ.ListType, λ.Calm(λ.GetItem(λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("https://weather.com/api/v1/p/redux-dal"),
						ϒdisplay_id,
					), λ.KWArgs{
						{Name: "data", Value: λ.Calm(λ.Cal(Ωjson.ϒdumps, λ.NewList(λ.DictLiteral(map[string]λ.Object{
							"name": λ.StrLiteral("getCMSAssetsUrlConfig"),
							"params": λ.DictLiteral(map[string]λ.Object{
								"language": λ.Calm(ϒlocale, "replace", λ.StrLiteral("-"), λ.StrLiteral("_")),
								"query": λ.DictLiteral(map[string]λ.Object{
									"assetName": λ.DictLiteral(map[string]λ.Object{
										"$in": ϒasset_name,
									}),
								}),
							}),
						}))), "encode")},
						{Name: "headers", Value: λ.DictLiteral(map[string]string{
							"Content-Type": "application/json",
						})},
					}), λ.StrLiteral("dal")), λ.StrLiteral("getCMSAssetsUrlConfig")), "values")), λ.IntLiteral(0)), λ.StrLiteral("data")), λ.IntLiteral(0))
					ϒvideo_id = λ.GetItem(ϒvideo_data, λ.StrLiteral("id"))
					ϒseo_meta = λ.Calm(ϒvideo_data, "get", λ.StrLiteral("seometa"), λ.DictLiteral(map[λ.Object]λ.Object{}))
					ϒtitle = func() λ.Object {
						if λv := λ.Calm(ϒvideo_data, "get", λ.StrLiteral("title")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒseo_meta, λ.StrLiteral("title"))
						}
					}()
					ϒurls = λ.NewList()
					ϒthumbnails = λ.NewList()
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.Calm(ϒvideo_data, "get", λ.StrLiteral("variants"), λ.NewList()), "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒvariant_id = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒvariant_url = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒvariant_url = λ.Calm(ϒvariant_url, "strip")
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒvariant_url)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒurls, ϒvariant_url))
							}
						}()) {
							continue
						}
						λ.Calm(ϒurls, "append", ϒvariant_url)
						ϒext = λ.Cal(ϒdetermine_ext, ϒvariant_url)
						if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("jpg"))) {
							λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
								"url": ϒvariant_url,
								"id":  ϒvariant_id,
							}))
						} else {
							if λ.IsTrue(λ.Calm(ThePlatformIE, "suitable", ϒvariant_url)) {
								τmp2 = λ.Calm(ϒself, "_extract_theplatform_smil", ϒvariant_url, ϒvideo_id)
								ϒtp_formats = λ.GetItem(τmp2, λ.IntLiteral(0))
								_ = λ.GetItem(τmp2, λ.IntLiteral(1))
								λ.Calm(ϒformats, "extend", ϒtp_formats)
							} else {
								if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("m3u8"))) {
									λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
										ϒvariant_url,
										ϒvideo_id,
										λ.StrLiteral("mp4"),
										λ.StrLiteral("m3u8_native"),
									), λ.KWArgs{
										{Name: "m3u8_id", Value: ϒvariant_id},
										{Name: "fatal", Value: λ.False},
									}))
								} else {
									if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("f4m"))) {
										λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
											ϒvariant_url,
											ϒvideo_id,
										), λ.KWArgs{
											{Name: "f4m_id", Value: ϒvariant_id},
											{Name: "fatal", Value: λ.False},
										}))
									} else {
										λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
											"url":       ϒvariant_url,
											"format_id": ϒvariant_id,
										}))
									}
								}
							}
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒcc_url = λ.Calm(ϒvideo_data, "get", λ.StrLiteral("cc_url"))
					return λ.DictLiteral(map[string]λ.Object{
						"id":         ϒvideo_id,
						"display_id": ϒdisplay_id,
						"title":      ϒtitle,
						"description": func() λ.Object {
							if λv := λ.Calm(ϒvideo_data, "get", λ.StrLiteral("description")); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Calm(ϒseo_meta, "get", λ.StrLiteral("description")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒseo_meta, "get", λ.StrLiteral("og:description"))
							}
						}(),
						"duration":    λ.Cal(ϒparse_duration, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("duration"))),
						"uploader":    λ.Calm(ϒvideo_data, "get", λ.StrLiteral("providername")),
						"uploader_id": λ.Calm(ϒvideo_data, "get", λ.StrLiteral("providerid")),
						"timestamp":   λ.Cal(ϒparse_iso8601, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("publishdate"))),
						"subtitles": func() λ.Object {
							if λ.IsTrue(ϒcc_url) {
								return λ.DictLiteral(map[λ.Object]λ.Object{
									λ.GetItem(ϒlocale, λ.NewSlice(λ.None, λ.IntLiteral(2), λ.None)): λ.NewList(λ.DictLiteral(map[string]λ.Object{
										"url": ϒcc_url,
									})),
								})
							} else {
								return λ.None
							}
						}(),
						"thumbnails": ϒthumbnails,
						"formats":    ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    TheWeatherChannelIE__VALID_URL,
				"_real_extract": TheWeatherChannelIE__real_extract,
			})
		}())
	})
}
