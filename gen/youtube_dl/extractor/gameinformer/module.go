// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * gameinformer/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/gameinformer.py
 */

package gameinformer

import (
	Ωbrightcove "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/brightcove"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BrightcoveNewIE       λ.Object
	GameInformerIE        λ.Object
	InfoExtractor         λ.Object
	ϒclean_html           λ.Object
	ϒget_element_by_class λ.Object
	ϒget_element_by_id    λ.Object
)

func init() {
	λ.InitModule(func() {
		BrightcoveNewIE = Ωbrightcove.BrightcoveNewIE
		InfoExtractor = Ωcommon.InfoExtractor
		ϒclean_html = Ωutils.ϒclean_html
		ϒget_element_by_class = Ωutils.ϒget_element_by_class
		ϒget_element_by_id = Ωutils.ϒget_element_by_id
		GameInformerIE = λ.Cal(λ.TypeType, λ.StrLiteral("GameInformerIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				GameInformerIE_BRIGHTCOVE_URL_TEMPLATE λ.Object
				GameInformerIE__VALID_URL              λ.Object
				GameInformerIE__real_extract           λ.Object
			)
			GameInformerIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?gameinformer\\.com/(?:[^/]+/)*(?P<id>[^.?&#]+)")
			GameInformerIE_BRIGHTCOVE_URL_TEMPLATE = λ.StrLiteral("http://players.brightcove.net/694940074001/default_default/index.html?videoId=%s")
			GameInformerIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbrightcove_id  λ.Object
						ϒbrightcove_url λ.Object
						ϒdisplay_id     λ.Object
						ϒself           = λargs[0]
						ϒurl            = λargs[1]
						ϒwebpage        λ.Object
					)
					ϒdisplay_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						ϒurl,
						ϒdisplay_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.Calm(ϒself, "geo_verification_headers")},
					})
					ϒbrightcove_id = λ.Cal(ϒclean_html, func() λ.Object {
						if λv := λ.Cal(ϒget_element_by_class, λ.StrLiteral("field--name-field-brightcove-video-id"), ϒwebpage); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒget_element_by_id, λ.StrLiteral("video-source-content"), ϒwebpage)
						}
					}())
					ϒbrightcove_url = func() λ.Object {
						if λ.IsTrue(ϒbrightcove_id) {
							return λ.Mod(λ.GetAttr(ϒself, "BRIGHTCOVE_URL_TEMPLATE", nil), ϒbrightcove_id)
						} else {
							return λ.Calm(BrightcoveNewIE, "_extract_url", ϒself, ϒwebpage)
						}
					}()
					return λ.Calm(ϒself, "url_result", ϒbrightcove_url, λ.StrLiteral("BrightcoveNew"), ϒbrightcove_id)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"BRIGHTCOVE_URL_TEMPLATE": GameInformerIE_BRIGHTCOVE_URL_TEMPLATE,
				"_VALID_URL":              GameInformerIE__VALID_URL,
				"_real_extract":           GameInformerIE__real_extract,
			})
		}())
	})
}
