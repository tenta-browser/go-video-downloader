// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * spreaker/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/spreaker.py
 */

package spreaker

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	SpreakerIE         λ.Object
	SpreakerPageIE     λ.Object
	SpreakerShowIE     λ.Object
	SpreakerShowPageIE λ.Object
	ϒ_extract_episode  λ.Object
	ϒcompat_str        λ.Object
	ϒfloat_or_none     λ.Object
	ϒint_or_none       λ.Object
	ϒstr_or_none       λ.Object
	ϒtry_get           λ.Object
	ϒunified_timestamp λ.Object
	ϒurl_or_none       λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒurl_or_none = Ωutils.ϒurl_or_none
		ϒ_extract_episode = λ.NewFunction("_extract_episode",
			[]λ.Param{
				{Name: "data"},
				{Name: "episode_id", Def: λ.None},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdata         = λargs[0]
					ϒdownload_url λ.Object
					ϒduration     λ.Object
					ϒepisode_id   = λargs[1]
					ϒimage        λ.Object
					ϒimage_url    λ.Object
					ϒseries       λ.Object
					ϒstats        λ.Object
					ϒthumbnails   λ.Object
					ϒtitle        λ.Object
					ϒuploader     λ.Object
					τmp0          λ.Object
					τmp1          λ.Object
				)
				ϒtitle = λ.GetItem(ϒdata, λ.StrLiteral("title"))
				ϒdownload_url = λ.GetItem(ϒdata, λ.StrLiteral("download_url"))
				ϒseries = λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
					[]λ.Param{
						{Name: "x"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒx = λargs[0]
						)
						return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("show")), λ.StrLiteral("title"))
					}), ϒcompat_str)
				ϒuploader = λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
					[]λ.Param{
						{Name: "x"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒx = λargs[0]
						)
						return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("author")), λ.StrLiteral("fullname"))
					}), ϒcompat_str)
				ϒthumbnails = λ.NewList()
				τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
					λ.StrLiteral("image_original"),
					λ.StrLiteral("image_medium"),
					λ.StrLiteral("image"),
				))
				for {
					if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
						break
					}
					ϒimage = τmp1
					ϒimage_url = λ.Cal(ϒurl_or_none, λ.Calm(ϒdata, "get", λ.Mod(λ.StrLiteral("%s_url"), ϒimage)))
					if λ.IsTrue(ϒimage_url) {
						λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
							"url": ϒimage_url,
						}))
					}
				}
				ϒstats = λ.NewFunction("stats",
					[]λ.Param{
						{Name: "key"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒkey = λargs[0]
						)
						return λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒdata, λ.NewTuple(
							λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(ϒx, λ.Mod(λ.StrLiteral("%ss_count"), ϒkey))
								}),
							λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("stats")), λ.Mod(λ.StrLiteral("%ss"), ϒkey))
								}),
						)))
					})
				ϒduration = λ.NewFunction("duration",
					[]λ.Param{
						{Name: "key"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒkey = λargs[0]
						)
						return λ.Call(ϒfloat_or_none, λ.NewArgs(λ.Calm(ϒdata, "get", ϒkey)), λ.KWArgs{
							{Name: "scale", Value: λ.IntLiteral(1000)},
						})
					})
				return λ.DictLiteral(map[string]λ.Object{
					"id": λ.Cal(ϒcompat_str, func() λ.Object {
						if λv := ϒepisode_id; λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒdata, λ.StrLiteral("episode_id"))
						}
					}()),
					"url":         ϒdownload_url,
					"display_id":  λ.Calm(ϒdata, "get", λ.StrLiteral("permalink")),
					"title":       ϒtitle,
					"description": λ.Calm(ϒdata, "get", λ.StrLiteral("description")),
					"timestamp":   λ.Cal(ϒunified_timestamp, λ.Calm(ϒdata, "get", λ.StrLiteral("published_at"))),
					"uploader":    ϒuploader,
					"uploader_id": λ.Cal(ϒstr_or_none, λ.Calm(ϒdata, "get", λ.StrLiteral("author_id"))),
					"creator":     ϒuploader,
					"duration": func() λ.Object {
						if λv := λ.Cal(ϒduration, λ.StrLiteral("duration")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒduration, λ.StrLiteral("length"))
						}
					}(),
					"view_count":    λ.Cal(ϒstats, λ.StrLiteral("play")),
					"like_count":    λ.Cal(ϒstats, λ.StrLiteral("like")),
					"comment_count": λ.Cal(ϒstats, λ.StrLiteral("message")),
					"format":        λ.StrLiteral("MPEG Layer 3"),
					"format_id":     λ.StrLiteral("mp3"),
					"container":     λ.StrLiteral("mp3"),
					"ext":           λ.StrLiteral("mp3"),
					"thumbnails":    ϒthumbnails,
					"series":        ϒseries,
					"extractor_key": λ.Calm(SpreakerIE, "ie_key"),
				})
			})
		SpreakerIE = λ.Cal(λ.TypeType, λ.StrLiteral("SpreakerIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SpreakerIE__VALID_URL    λ.Object
				SpreakerIE__real_extract λ.Object
			)
			SpreakerIE__VALID_URL = λ.StrLiteral("(?x)\n                    https?://\n                        api\\.spreaker\\.com/\n                        (?:\n                            (?:download/)?episode|\n                            v2/episodes\n                        )/\n                        (?P<id>\\d+)\n                    ")
			SpreakerIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata       λ.Object
						ϒepisode_id λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
					)
					ϒepisode_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒdata = λ.GetItem(λ.GetItem(λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("https://api.spreaker.com/v2/episodes/%s"), ϒepisode_id), ϒepisode_id), λ.StrLiteral("response")), λ.StrLiteral("episode"))
					return λ.Cal(ϒ_extract_episode, ϒdata, ϒepisode_id)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    SpreakerIE__VALID_URL,
				"_real_extract": SpreakerIE__real_extract,
			})
		}())
		SpreakerPageIE = λ.Cal(λ.TypeType, λ.StrLiteral("SpreakerPageIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SpreakerPageIE__VALID_URL λ.Object
			)
			SpreakerPageIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?spreaker\\.com/user/[^/]+/(?P<id>[^/?#&]+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": SpreakerPageIE__VALID_URL,
			})
		}())
		SpreakerShowIE = λ.Cal(λ.TypeType, λ.StrLiteral("SpreakerShowIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SpreakerShowIE__VALID_URL λ.Object
			)
			SpreakerShowIE__VALID_URL = λ.StrLiteral("https?://api\\.spreaker\\.com/show/(?P<id>\\d+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": SpreakerShowIE__VALID_URL,
			})
		}())
		SpreakerShowPageIE = λ.Cal(λ.TypeType, λ.StrLiteral("SpreakerShowPageIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SpreakerShowPageIE__VALID_URL λ.Object
			)
			SpreakerShowPageIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?spreaker\\.com/show/(?P<id>[^/?#&]+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": SpreakerShowPageIE__VALID_URL,
			})
		}())
	})
}
