// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * mailru/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/mailru.py
 */

package mailru

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor                λ.Object
	MailRuIE                     λ.Object
	MailRuMusicIE                λ.Object
	MailRuMusicSearchBaseIE      λ.Object
	MailRuMusicSearchIE          λ.Object
	ϒcompat_urllib_parse_unquote λ.Object
	ϒint_or_none                 λ.Object
	ϒparse_duration              λ.Object
	ϒremove_end                  λ.Object
	ϒtry_get                     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒremove_end = Ωutils.ϒremove_end
		ϒtry_get = Ωutils.ϒtry_get
		MailRuIE = λ.Cal(λ.TypeType, λ.StrLiteral("MailRuIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				MailRuIE__VALID_URL λ.Object
			)
			MailRuIE__VALID_URL = λ.StrLiteral("(?x)\n                    https?://\n                        (?:(?:www|m)\\.)?my\\.mail\\.ru/+\n                        (?:\n                            video/.*\\#video=/?(?P<idv1>(?:[^/]+/){3}\\d+)|\n                            (?:(?P<idv2prefix>(?:[^/]+/+){2})video/(?P<idv2suffix>[^/]+/\\d+))\\.html|\n                            (?:video/embed|\\+/video/meta)/(?P<metaid>\\d+)\n                        )\n                    ")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": MailRuIE__VALID_URL,
			})
		}())
		MailRuMusicSearchBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("MailRuMusicSearchBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				MailRuMusicSearchBaseIE__extract_track λ.Object
				MailRuMusicSearchBaseIE__search        λ.Object
			)
			MailRuMusicSearchBaseIE__search = λ.NewFunction("_search",
				[]λ.Param{
					{Name: "self"},
					{Name: "query"},
					{Name: "url"},
					{Name: "audio_id"},
					{Name: "limit", Def: λ.IntLiteral(100)},
					{Name: "offset", Def: λ.IntLiteral(0)},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaudio_id = λargs[3]
						ϒlimit    = λargs[4]
						ϒoffset   = λargs[5]
						ϒquery    = λargs[1]
						ϒsearch   λ.Object
						ϒself     = λargs[0]
						ϒurl      = λargs[2]
					)
					ϒsearch = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("https://my.mail.ru/cgi-bin/my/ajax"),
						ϒaudio_id,
						λ.Mod(λ.StrLiteral("Downloading songs JSON page %d"), λ.Add(λ.FloorDiv(ϒoffset, ϒlimit), λ.IntLiteral(1))),
					), λ.KWArgs{
						{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
							"Referer":          ϒurl,
							"X-Requested-With": λ.StrLiteral("XMLHttpRequest"),
						})},
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"xemail":       λ.StrLiteral(""),
							"ajax_call":    λ.StrLiteral("1"),
							"func_name":    λ.StrLiteral("music.search"),
							"mna":          λ.StrLiteral(""),
							"mnb":          λ.StrLiteral(""),
							"arg_query":    ϒquery,
							"arg_extended": λ.StrLiteral("1"),
							"arg_search_params": λ.Cal(Ωjson.ϒdumps, λ.DictLiteral(map[string]λ.Object{
								"music": λ.DictLiteral(map[string]λ.Object{
									"limit":  ϒlimit,
									"offset": ϒoffset,
								}),
							})),
							"arg_limit":  ϒlimit,
							"arg_offset": ϒoffset,
						})},
					})
					return λ.Cal(λ.BuiltinNext, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒe   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, ϒsearch)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒe = τmp1
									if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒe, λ.DictType)) {
										λgy.Yield(ϒe)
									}
								}
								return λ.None
							})
						})))
				})
			MailRuMusicSearchBaseIE__extract_track = λ.NewFunction("_extract_track",
				[]λ.Param{
					{Name: "t"},
					{Name: "fatal", Def: λ.True},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒartist      λ.Object
						ϒaudio_id    λ.Object
						ϒaudio_url   λ.Object
						ϒduration    λ.Object
						ϒfatal       = λargs[1]
						ϒt           = λargs[0]
						ϒthumbnail   λ.Object
						ϒtitle       λ.Object
						ϒtrack       λ.Object
						ϒuploader    λ.Object
						ϒuploader_id λ.Object
						ϒview_count  λ.Object
					)
					ϒaudio_url = func() λ.Object {
						if λ.IsTrue(ϒfatal) {
							return λ.GetItem(ϒt, λ.StrLiteral("URL"))
						} else {
							return λ.Calm(ϒt, "get", λ.StrLiteral("URL"))
						}
					}()
					if !λ.IsTrue(ϒaudio_url) {
						return λ.None
					}
					ϒaudio_id = func() λ.Object {
						if λ.IsTrue(ϒfatal) {
							return λ.GetItem(ϒt, λ.StrLiteral("File"))
						} else {
							return λ.Calm(ϒt, "get", λ.StrLiteral("File"))
						}
					}()
					if !λ.IsTrue(ϒaudio_id) {
						return λ.None
					}
					ϒthumbnail = func() λ.Object {
						if λv := λ.Calm(ϒt, "get", λ.StrLiteral("AlbumCoverURL")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒt, "get", λ.StrLiteral("FiledAlbumCover"))
						}
					}()
					ϒuploader = func() λ.Object {
						if λv := λ.Calm(ϒt, "get", λ.StrLiteral("OwnerName")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒt, "get", λ.StrLiteral("OwnerName_Text_HTML"))
						}
					}()
					ϒuploader_id = λ.Calm(ϒt, "get", λ.StrLiteral("UploaderID"))
					ϒduration = func() λ.Object {
						if λv := λ.Cal(ϒint_or_none, λ.Calm(ϒt, "get", λ.StrLiteral("DurationInSeconds"))); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒparse_duration, func() λ.Object {
								if λv := λ.Calm(ϒt, "get", λ.StrLiteral("Duration")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Calm(ϒt, "get", λ.StrLiteral("DurationStr"))
								}
							}())
						}
					}()
					ϒview_count = λ.Cal(ϒint_or_none, func() λ.Object {
						if λv := λ.Calm(ϒt, "get", λ.StrLiteral("PlayCount")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒt, "get", λ.StrLiteral("PlayCount_hr"))
						}
					}())
					ϒtrack = func() λ.Object {
						if λv := λ.Calm(ϒt, "get", λ.StrLiteral("Name")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒt, "get", λ.StrLiteral("Name_Text_HTML"))
						}
					}()
					ϒartist = func() λ.Object {
						if λv := λ.Calm(ϒt, "get", λ.StrLiteral("Author")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒt, "get", λ.StrLiteral("Author_Text_HTML"))
						}
					}()
					if λ.IsTrue(ϒtrack) {
						ϒtitle = func() λ.Object {
							if λ.IsTrue(ϒartist) {
								return λ.Mod(λ.StrLiteral("%s - %s"), λ.NewTuple(
									ϒartist,
									ϒtrack,
								))
							} else {
								return ϒtrack
							}
						}()
					} else {
						ϒtitle = ϒaudio_id
					}
					return λ.DictLiteral(map[string]λ.Object{
						"extractor_key": λ.Calm(MailRuMusicIE, "ie_key"),
						"id":            ϒaudio_id,
						"title":         ϒtitle,
						"thumbnail":     ϒthumbnail,
						"uploader":      ϒuploader,
						"uploader_id":   ϒuploader_id,
						"duration":      ϒduration,
						"view_count":    ϒview_count,
						"vcodec":        λ.StrLiteral("none"),
						"abr":           λ.Cal(ϒint_or_none, λ.Calm(ϒt, "get", λ.StrLiteral("BitRate"))),
						"track":         ϒtrack,
						"artist":        ϒartist,
						"album":         λ.Calm(ϒt, "get", λ.StrLiteral("Album")),
						"url":           ϒaudio_url,
					})
				})
			MailRuMusicSearchBaseIE__extract_track = λ.Cal(λ.StaticMethodType, MailRuMusicSearchBaseIE__extract_track)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_extract_track": MailRuMusicSearchBaseIE__extract_track,
				"_search":        MailRuMusicSearchBaseIE__search,
			})
		}())
		MailRuMusicIE = λ.Cal(λ.TypeType, λ.StrLiteral("MailRuMusicIE"), λ.NewTuple(MailRuMusicSearchBaseIE), func() λ.Dict {
			var (
				MailRuMusicIE_IE_NAME       λ.Object
				MailRuMusicIE__VALID_URL    λ.Object
				MailRuMusicIE__real_extract λ.Object
			)
			MailRuMusicIE_IE_NAME = λ.StrLiteral("mailru:music")
			MailRuMusicIE__VALID_URL = λ.StrLiteral("https?://my\\.mail\\.ru/+music/+songs/+[^/?#&]+-(?P<id>[\\da-f]+)")
			MailRuMusicIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaudio_id   λ.Object
						ϒinfo       λ.Object
						ϒmusic_data λ.Object
						ϒself       = λargs[0]
						ϒt          λ.Object
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒwebpage    λ.Object
					)
					ϒaudio_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒaudio_id)
					ϒtitle = λ.Calm(ϒself, "_og_search_title", ϒwebpage)
					ϒmusic_data = λ.GetItem(λ.Calm(ϒself, "_search", ϒtitle, ϒurl, ϒaudio_id), λ.StrLiteral("MusicData"))
					ϒt = λ.Cal(λ.BuiltinNext, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒt   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, ϒmusic_data)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒt = τmp1
									if λ.IsTrue(λ.Eq(λ.Calm(ϒt, "get", λ.StrLiteral("File")), ϒaudio_id)) {
										λgy.Yield(ϒt)
									}
								}
								return λ.None
							})
						})))
					ϒinfo = λ.Calm(ϒself, "_extract_track", ϒt)
					λ.SetItem(ϒinfo, λ.StrLiteral("title"), ϒtitle)
					return ϒinfo
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       MailRuMusicIE_IE_NAME,
				"_VALID_URL":    MailRuMusicIE__VALID_URL,
				"_real_extract": MailRuMusicIE__real_extract,
			})
		}())
		MailRuMusicSearchIE = λ.Cal(λ.TypeType, λ.StrLiteral("MailRuMusicSearchIE"), λ.NewTuple(MailRuMusicSearchBaseIE), func() λ.Dict {
			var (
				MailRuMusicSearchIE__VALID_URL λ.Object
			)
			MailRuMusicSearchIE__VALID_URL = λ.StrLiteral("https?://my\\.mail\\.ru/+music/+search/+(?P<id>[^/?#&]+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": MailRuMusicSearchIE__VALID_URL,
			})
		}())
	})
}
