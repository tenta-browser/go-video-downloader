// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * zapiks/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/zapiks.py
 */

package zapiks

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor   λ.Object
	ZapiksIE        λ.Object
	ϒint_or_none    λ.Object
	ϒparse_duration λ.Object
	ϒparse_iso8601  λ.Object
	ϒxpath_text     λ.Object
	ϒxpath_with_ns  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒxpath_with_ns = Ωutils.ϒxpath_with_ns
		ϒxpath_text = Ωutils.ϒxpath_text
		ϒint_or_none = Ωutils.ϒint_or_none
		ZapiksIE = λ.Cal(λ.TypeType, λ.StrLiteral("ZapiksIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ZapiksIE__VALID_URL    λ.Object
				ZapiksIE__real_extract λ.Object
			)
			ZapiksIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?zapiks\\.(?:fr|com)/(?:(?:[a-z]{2}/)?(?P<display_id>.+?)\\.html|index\\.php\\?.*\\bmedia_id=(?P<id>\\d+))")
			ZapiksIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						NS_MAP         λ.Object
						ϒcomment_count λ.Object
						ϒdescription   λ.Object
						ϒdisplay_id    λ.Object
						ϒduration      λ.Object
						ϒf             λ.Object
						ϒformat_id     λ.Object
						ϒformats       λ.Object
						ϒitem          λ.Object
						ϒm             λ.Object
						ϒmobj          λ.Object
						ϒns            λ.Object
						ϒplaylist      λ.Object
						ϒself          = λargs[0]
						ϒsource        λ.Object
						ϒthumbnail     λ.Object
						ϒtimestamp     λ.Object
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						ϒview_count    λ.Object
						ϒwebpage       λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒdisplay_id = func() λ.Object {
						if λv := λ.Calm(ϒmobj, "group", λ.StrLiteral("display_id")); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_id
						}
					}()
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
					if !λ.IsTrue(ϒvideo_id) {
						ϒvideo_id = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("data-media-id=\"(\\d+)\""), ϒwebpage, λ.StrLiteral("video id"))
					}
					ϒplaylist = λ.Calm(ϒself, "_download_xml", λ.Mod(λ.StrLiteral("http://www.zapiks.fr/view/index.php?action=playlist&media_id=%s&lang=en"), ϒvideo_id), ϒdisplay_id)
					NS_MAP = λ.DictLiteral(map[string]string{
						"jwplayer": "http://rss.jwpcdn.com/",
					})
					ϒns = λ.NewFunction("ns",
						[]λ.Param{
							{Name: "path"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒpath = λargs[0]
							)
							return λ.Cal(ϒxpath_with_ns, ϒpath, NS_MAP)
						})
					ϒitem = λ.Calm(ϒplaylist, "find", λ.StrLiteral("./channel/item"))
					ϒtitle = func() λ.Object {
						if λv := λ.Cal(ϒxpath_text, ϒitem, λ.StrLiteral("title"), λ.StrLiteral("title")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒself, "_og_search_title", ϒwebpage)
						}
					}()
					ϒdescription = λ.Call(λ.GetAttr(ϒself, "_og_search_description", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒthumbnail = func() λ.Object {
						if λv := λ.Cal(ϒxpath_text, ϒitem, λ.Cal(ϒns, λ.StrLiteral("./jwplayer:image")), λ.StrLiteral("thumbnail")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Call(λ.GetAttr(ϒself, "_og_search_thumbnail", nil), λ.NewArgs(ϒwebpage), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
						}
					}()
					ϒduration = λ.Cal(ϒparse_duration, λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.StrLiteral("duration"),
						ϒwebpage,
						λ.StrLiteral("duration"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒtimestamp = λ.Cal(ϒparse_iso8601, λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.StrLiteral("uploadDate"),
						ϒwebpage,
						λ.StrLiteral("upload date"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}), λ.StrLiteral(" "))
					ϒview_count = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("UserPlays:(\\d+)"),
						ϒwebpage,
						λ.StrLiteral("view count"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒcomment_count = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("UserComments:(\\d+)"),
						ϒwebpage,
						λ.StrLiteral("comment count"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒitem, "findall", λ.Cal(ϒns, λ.StrLiteral("./jwplayer:source"))))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒsource = τmp1
						ϒformat_id = λ.GetItem(λ.GetAttr(ϒsource, "attrib", nil), λ.StrLiteral("label"))
						ϒf = λ.DictLiteral(map[string]λ.Object{
							"url":       λ.GetItem(λ.GetAttr(ϒsource, "attrib", nil), λ.StrLiteral("file")),
							"format_id": ϒformat_id,
						})
						ϒm = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("^(?P<height>\\d+)[pP]"), ϒformat_id)
						if λ.IsTrue(ϒm) {
							λ.SetItem(ϒf, λ.StrLiteral("height"), λ.Cal(λ.IntType, λ.Calm(ϒm, "group", λ.StrLiteral("height"))))
						}
						λ.Calm(ϒformats, "append", ϒf)
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":            ϒvideo_id,
						"title":         ϒtitle,
						"description":   ϒdescription,
						"thumbnail":     ϒthumbnail,
						"duration":      ϒduration,
						"timestamp":     ϒtimestamp,
						"view_count":    ϒview_count,
						"comment_count": ϒcomment_count,
						"formats":       ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    ZapiksIE__VALID_URL,
				"_real_extract": ZapiksIE__real_extract,
			})
		}())
	})
}
