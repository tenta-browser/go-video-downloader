// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * aol/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/aol.py
 */

package aol

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AolIE                         λ.Object
	ExtractorError                λ.Object
	InfoExtractor                 λ.Object
	ϒcompat_parse_qs              λ.Object
	ϒcompat_urllib_parse_urlparse λ.Object
	ϒint_or_none                  λ.Object
	ϒurl_or_none                  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒurl_or_none = Ωutils.ϒurl_or_none
		AolIE = λ.Cal(λ.TypeType, λ.StrLiteral("AolIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				AolIE_IE_NAME       λ.Object
				AolIE__VALID_URL    λ.Object
				AolIE__real_extract λ.Object
			)
			AolIE_IE_NAME = λ.StrLiteral("aol.com")
			AolIE__VALID_URL = λ.StrLiteral("(?:aol-video:|https?://(?:www\\.)?aol\\.(?:com|ca|co\\.uk|de|jp)/video/(?:[^/]+/)*)(?P<id>[0-9a-f]+)")
			AolIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒext        λ.Object
						ϒf          λ.Object
						ϒformats    λ.Object
						ϒm3u8_url   λ.Object
						ϒmobj       λ.Object
						ϒqs         λ.Object
						ϒrendition  λ.Object
						ϒresponse   λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒvideo_data λ.Object
						ϒvideo_id   λ.Object
						ϒvideo_url  λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒresponse = λ.GetItem(λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("https://feedapi.b2c.on.aol.com/v1.0/app/videos/aolon/%s/details"), ϒvideo_id), ϒvideo_id), λ.StrLiteral("response"))
					if λ.IsTrue(λ.Ne(λ.GetItem(ϒresponse, λ.StrLiteral("statusText")), λ.StrLiteral("Ok"))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							λ.GetItem(ϒresponse, λ.StrLiteral("statusText")),
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒvideo_data = λ.GetItem(ϒresponse, λ.StrLiteral("data"))
					ϒformats = λ.NewList()
					ϒm3u8_url = λ.Cal(ϒurl_or_none, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("videoMasterPlaylist")))
					if λ.IsTrue(ϒm3u8_url) {
						λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒm3u8_url,
							ϒvideo_id,
							λ.StrLiteral("mp4"),
						), λ.KWArgs{
							{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("renditions"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒrendition = τmp1
						ϒvideo_url = λ.Cal(ϒurl_or_none, λ.Calm(ϒrendition, "get", λ.StrLiteral("url")))
						if !λ.IsTrue(ϒvideo_url) {
							continue
						}
						ϒext = λ.Calm(ϒrendition, "get", λ.StrLiteral("format"))
						if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("m3u8"))) {
							λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒvideo_url,
								ϒvideo_id,
								λ.StrLiteral("mp4"),
							), λ.KWArgs{
								{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							ϒf = λ.DictLiteral(map[string]λ.Object{
								"url":       ϒvideo_url,
								"format_id": λ.Calm(ϒrendition, "get", λ.StrLiteral("quality")),
							})
							ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("(\\d+)x(\\d+)"), ϒvideo_url)
							if λ.IsTrue(ϒmobj) {
								λ.Calm(ϒf, "update", λ.DictLiteral(map[string]λ.Object{
									"width":  λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(1))),
									"height": λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(2))),
								}))
							} else {
								ϒqs = λ.Cal(ϒcompat_parse_qs, λ.GetAttr(λ.Cal(ϒcompat_urllib_parse_urlparse, ϒvideo_url), "query", nil))
								λ.Calm(ϒf, "update", λ.DictLiteral(map[string]λ.Object{
									"width":  λ.Cal(ϒint_or_none, λ.GetItem(λ.Calm(ϒqs, "get", λ.StrLiteral("w"), λ.NewList(λ.None)), λ.IntLiteral(0))),
									"height": λ.Cal(ϒint_or_none, λ.GetItem(λ.Calm(ϒqs, "get", λ.StrLiteral("h"), λ.NewList(λ.None)), λ.IntLiteral(0))),
								}))
							}
							λ.Calm(ϒformats, "append", ϒf)
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats, λ.NewTuple(
						λ.StrLiteral("width"),
						λ.StrLiteral("height"),
						λ.StrLiteral("tbr"),
						λ.StrLiteral("format_id"),
					))
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       λ.GetItem(ϒvideo_data, λ.StrLiteral("title")),
						"duration":    λ.Cal(ϒint_or_none, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("duration"))),
						"timestamp":   λ.Cal(ϒint_or_none, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("publishDate"))),
						"view_count":  λ.Cal(ϒint_or_none, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("views"))),
						"description": λ.Calm(ϒvideo_data, "get", λ.StrLiteral("description")),
						"uploader":    λ.Calm(ϒvideo_data, "get", λ.StrLiteral("videoOwner")),
						"formats":     ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       AolIE_IE_NAME,
				"_VALID_URL":    AolIE__VALID_URL,
				"_real_extract": AolIE__real_extract,
			})
		}())
	})
}
