// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * arcpublishing/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/arcpublishing.py
 */

package arcpublishing

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ArcPublishingIE     λ.Object
	InfoExtractor       λ.Object
	ϒextract_attributes λ.Object
	ϒint_or_none        λ.Object
	ϒparse_iso8601      λ.Object
	ϒtry_get            λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒextract_attributes = Ωutils.ϒextract_attributes
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒtry_get = Ωutils.ϒtry_get
		ArcPublishingIE = λ.Cal(λ.TypeType, λ.StrLiteral("ArcPublishingIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ArcPublishingIE__POWA_DEFAULTS λ.Object
				ArcPublishingIE__UUID_REGEX    λ.Object
				ArcPublishingIE__VALID_URL     λ.Object
				ArcPublishingIE__real_extract  λ.Object
			)
			ArcPublishingIE__UUID_REGEX = λ.StrLiteral("[\\da-f]{8}-(?:[\\da-f]{4}-){3}[\\da-f]{12}")
			ArcPublishingIE__VALID_URL = λ.Mod(λ.StrLiteral("arcpublishing:(?P<org>[a-z]+):(?P<id>%s)"), ArcPublishingIE__UUID_REGEX)
			ArcPublishingIE__POWA_DEFAULTS = λ.NewList(
				λ.NewTuple(
					λ.NewList(
						λ.StrLiteral("cmg"),
						λ.StrLiteral("prisa"),
					),
					λ.StrLiteral("%s-config-prod.api.cdn.arcpublishing.com/video"),
				),
				λ.NewTuple(
					λ.NewList(
						λ.StrLiteral("adn"),
						λ.StrLiteral("advancelocal"),
						λ.StrLiteral("answers"),
						λ.StrLiteral("bonnier"),
						λ.StrLiteral("bostonglobe"),
						λ.StrLiteral("demo"),
						λ.StrLiteral("gmg"),
						λ.StrLiteral("gruponacion"),
						λ.StrLiteral("infobae"),
						λ.StrLiteral("mco"),
						λ.StrLiteral("nzme"),
						λ.StrLiteral("pmn"),
						λ.StrLiteral("raycom"),
						λ.StrLiteral("spectator"),
						λ.StrLiteral("tbt"),
						λ.StrLiteral("tgam"),
						λ.StrLiteral("tronc"),
						λ.StrLiteral("wapo"),
						λ.StrLiteral("wweek"),
					),
					λ.StrLiteral("video-api-cdn.%s.arcpublishing.com/api"),
				),
			)
			ArcPublishingIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbase_api_tmpl λ.Object
						ϒf             λ.Object
						ϒformats       λ.Object
						ϒheight        λ.Object
						ϒis_live       λ.Object
						ϒm3u8_formats  λ.Object
						ϒorg           λ.Object
						ϒorgs          λ.Object
						ϒs             λ.Object
						ϒs_url         λ.Object
						ϒself          = λargs[0]
						ϒsmil_formats  λ.Object
						ϒstream_type   λ.Object
						ϒsubtitle      λ.Object
						ϒsubtitle_url  λ.Object
						ϒsubtitles     λ.Object
						ϒtitle         λ.Object
						ϒtmpl          λ.Object
						ϒurl           = λargs[1]
						ϒurls          λ.Object
						ϒuuid          λ.Object
						ϒvbr           λ.Object
						ϒvideo         λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
						τmp3           λ.Object
					)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒorg = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒuuid = λ.GetItem(τmp0, λ.IntLiteral(1))
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetAttr(ϒself, "_POWA_DEFAULTS", nil))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒorgs = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒtmpl = λ.GetItem(τmp2, λ.IntLiteral(1))
						if λ.Contains(ϒorgs, ϒorg) {
							ϒbase_api_tmpl = ϒtmpl
							break
						}
					}
					if τmp1 == λ.AfterLast {
						ϒbase_api_tmpl = λ.StrLiteral("%s-prod-cdn.video-api.arcpublishing.com/api")
					}
					if λ.IsTrue(λ.Eq(ϒorg, λ.StrLiteral("wapo"))) {
						ϒorg = λ.StrLiteral("washpost")
					}
					ϒvideo = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("https://%s/v1/ansvideos/findByUuid"), λ.Mod(ϒbase_api_tmpl, ϒorg)),
						ϒuuid,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"uuid": ϒuuid,
						})},
					}), λ.IntLiteral(0))
					ϒtitle = λ.GetItem(λ.GetItem(ϒvideo, λ.StrLiteral("headlines")), λ.StrLiteral("basic"))
					ϒis_live = λ.Eq(λ.Calm(ϒvideo, "get", λ.StrLiteral("status")), λ.StrLiteral("live"))
					ϒurls = λ.NewList()
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒvideo, "get", λ.StrLiteral("streams"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒs = τmp1
						ϒs_url = λ.Calm(ϒs, "get", λ.StrLiteral("url"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒs_url)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒurls, ϒs_url))
							}
						}()) {
							continue
						}
						λ.Calm(ϒurls, "append", ϒs_url)
						ϒstream_type = λ.Calm(ϒs, "get", λ.StrLiteral("stream_type"))
						if λ.IsTrue(λ.Eq(ϒstream_type, λ.StrLiteral("smil"))) {
							ϒsmil_formats = λ.Call(λ.GetAttr(ϒself, "_extract_smil_formats", nil), λ.NewArgs(
								ϒs_url,
								ϒuuid,
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							})
							τmp2 = λ.Cal(λ.BuiltinIter, ϒsmil_formats)
							for {
								if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
									break
								}
								ϒf = τmp3
								if λ.IsTrue(λ.Calm(λ.GetItem(ϒf, λ.StrLiteral("url")), "endswith", λ.StrLiteral("/cfx/st"))) {
									λ.SetItem(ϒf, λ.StrLiteral("app"), λ.StrLiteral("cfx/st"))
									if !λ.IsTrue(λ.Calm(λ.GetItem(ϒf, λ.StrLiteral("play_path")), "startswith", λ.StrLiteral("mp4:"))) {
										λ.SetItem(ϒf, λ.StrLiteral("play_path"), λ.Add(λ.StrLiteral("mp4:"), λ.GetItem(ϒf, λ.StrLiteral("play_path"))))
									}
									if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, λ.GetItem(ϒf, λ.StrLiteral("tbr")), λ.FloatType)) {
										λ.SetItem(ϒf, λ.StrLiteral("vbr"), λ.Mul(λ.GetItem(ϒf, λ.StrLiteral("tbr")), λ.IntLiteral(1000)))
										λ.DelItem(ϒf, λ.StrLiteral("tbr"))
										λ.SetItem(ϒf, λ.StrLiteral("format_id"), λ.Mod(λ.StrLiteral("rtmp-%d"), λ.GetItem(ϒf, λ.StrLiteral("vbr"))))
									}
								}
							}
							λ.Calm(ϒformats, "extend", ϒsmil_formats)
						} else {
							if λ.Contains(λ.NewTuple(
								λ.StrLiteral("ts"),
								λ.StrLiteral("hls"),
							), ϒstream_type) {
								ϒm3u8_formats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒs_url,
									ϒuuid,
									λ.StrLiteral("mp4"),
									func() λ.Object {
										if λ.IsTrue(ϒis_live) {
											return λ.StrLiteral("m3u8")
										} else {
											return λ.StrLiteral("m3u8_native")
										}
									}(),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
									{Name: "fatal", Value: λ.False},
								})
								if λ.IsTrue(λ.Cal(λ.BuiltinAll, λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
									nil,
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
											var (
												ϒf   λ.Object
												τmp0 λ.Object
												τmp1 λ.Object
											)
											τmp0 = λ.Cal(λ.BuiltinIter, ϒm3u8_formats)
											for {
												if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
													break
												}
												ϒf = τmp1
												λgy.Yield(λ.Eq(λ.Calm(ϒf, "get", λ.StrLiteral("acodec")), λ.StrLiteral("none")))
											}
											return λ.None
										})
									}))))) {
									continue
								}
								τmp2 = λ.Cal(λ.BuiltinIter, ϒm3u8_formats)
								for {
									if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
										break
									}
									ϒf = τmp3
									if λ.IsTrue(λ.Eq(λ.Calm(ϒf, "get", λ.StrLiteral("acodec")), λ.StrLiteral("none"))) {
										λ.SetItem(ϒf, λ.StrLiteral("preference"), λ.Neg(λ.IntLiteral(40)))
									} else {
										if λ.IsTrue(λ.Eq(λ.Calm(ϒf, "get", λ.StrLiteral("vcodec")), λ.StrLiteral("none"))) {
											λ.SetItem(ϒf, λ.StrLiteral("preference"), λ.Neg(λ.IntLiteral(50)))
										}
									}
									ϒheight = λ.Calm(ϒf, "get", λ.StrLiteral("height"))
									if !λ.IsTrue(ϒheight) {
										continue
									}
									ϒvbr = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
										λ.Mod(λ.StrLiteral("[_x]%d[_-](\\d+)"), ϒheight),
										λ.GetItem(ϒf, λ.StrLiteral("url")),
										λ.StrLiteral("vbr"),
									), λ.KWArgs{
										{Name: "default", Value: λ.None},
									})
									if λ.IsTrue(ϒvbr) {
										λ.SetItem(ϒf, λ.StrLiteral("vbr"), λ.Cal(λ.IntType, ϒvbr))
									}
								}
								λ.Calm(ϒformats, "extend", ϒm3u8_formats)
							} else {
								ϒvbr = λ.Cal(ϒint_or_none, λ.Calm(ϒs, "get", λ.StrLiteral("bitrate")))
								λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
									"format_id": func() λ.Object {
										if λ.IsTrue(ϒvbr) {
											return λ.Mod(λ.StrLiteral("%s-%d"), λ.NewTuple(
												ϒstream_type,
												ϒvbr,
											))
										} else {
											return ϒstream_type
										}
									}(),
									"vbr":        ϒvbr,
									"width":      λ.Cal(ϒint_or_none, λ.Calm(ϒs, "get", λ.StrLiteral("width"))),
									"height":     λ.Cal(ϒint_or_none, λ.Calm(ϒs, "get", λ.StrLiteral("height"))),
									"filesize":   λ.Cal(ϒint_or_none, λ.Calm(ϒs, "get", λ.StrLiteral("filesize"))),
									"url":        ϒs_url,
									"preference": λ.Neg(λ.IntLiteral(1)),
								}))
							}
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats, λ.NewTuple(
						λ.StrLiteral("preference"),
						λ.StrLiteral("width"),
						λ.StrLiteral("height"),
						λ.StrLiteral("vbr"),
						λ.StrLiteral("filesize"),
						λ.StrLiteral("tbr"),
						λ.StrLiteral("ext"),
						λ.StrLiteral("format_id"),
					))
					ϒsubtitles = λ.DictLiteral(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("subtitles")), λ.StrLiteral("urls"))
							}), λ.ListType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}())
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒsubtitle = τmp1
						ϒsubtitle_url = λ.Calm(ϒsubtitle, "get", λ.StrLiteral("url"))
						if λ.IsTrue(ϒsubtitle_url) {
							λ.Calm(λ.Calm(ϒsubtitles, "setdefault", λ.StrLiteral("en"), λ.NewList()), "append", λ.DictLiteral(map[string]λ.Object{
								"url": ϒsubtitle_url,
							}))
						}
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id": ϒuuid,
						"title": func() λ.Object {
							if λ.IsTrue(ϒis_live) {
								return λ.Calm(ϒself, "_live_title", ϒtitle)
							} else {
								return ϒtitle
							}
						}(),
						"thumbnail": λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("promo_image")), λ.StrLiteral("url"))
							})),
						"description": λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("subheadlines")), λ.StrLiteral("basic"))
							})),
						"formats":   ϒformats,
						"duration":  λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("duration")), λ.IntLiteral(100)),
						"timestamp": λ.Cal(ϒparse_iso8601, λ.Calm(ϒvideo, "get", λ.StrLiteral("created_date"))),
						"subtitles": ϒsubtitles,
						"is_live":   ϒis_live,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_POWA_DEFAULTS": ArcPublishingIE__POWA_DEFAULTS,
				"_UUID_REGEX":    ArcPublishingIE__UUID_REGEX,
				"_VALID_URL":     ArcPublishingIE__VALID_URL,
				"_real_extract":  ArcPublishingIE__real_extract,
			})
		}())
	})
}
