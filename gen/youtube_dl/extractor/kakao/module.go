// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * kakao/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/kakao.py
 */

package kakao

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError     λ.Object
	InfoExtractor      λ.Object
	KakaoIE            λ.Object
	ϒint_or_none       λ.Object
	ϒstr_or_none       λ.Object
	ϒstrip_or_none     λ.Object
	ϒtry_get           λ.Object
	ϒunified_timestamp λ.Object
	ϒupdate_url_query  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		KakaoIE = λ.Cal(λ.TypeType, λ.StrLiteral("KakaoIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				KakaoIE__API_BASE_TMPL λ.Object
				KakaoIE__VALID_URL     λ.Object
				KakaoIE__real_extract  λ.Object
			)
			KakaoIE__VALID_URL = λ.StrLiteral("https?://(?:play-)?tv\\.kakao\\.com/(?:channel/\\d+|embed/player)/cliplink/(?P<id>\\d+|[^?#&]+@my)")
			KakaoIE__API_BASE_TMPL = λ.StrLiteral("http://tv.kakao.com/api/v1/ft/cliplinks/%s/")
			KakaoIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒapi_base      λ.Object
						ϒclip          λ.Object
						ϒclip_link     λ.Object
						ϒdisplay_id    λ.Object
						ϒfmt           λ.Object
						ϒfmt_url       λ.Object
						ϒfmt_url_json  λ.Object
						ϒformats       λ.Object
						ϒimpress       λ.Object
						ϒplayer_header λ.Object
						ϒprofile_name  λ.Object
						ϒquery         λ.Object
						ϒresp          λ.Object
						ϒself          = λargs[0]
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
						τmp3           λ.Object
						τmp4           λ.Object
						τmp5           λ.Object
					)
					_ = τmp3
					_ = τmp5
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒdisplay_id = λ.Calm(ϒvideo_id, "rstrip", λ.StrLiteral("@my"))
					ϒapi_base = λ.Mod(λ.GetAttr(ϒself, "_API_BASE_TMPL", nil), ϒvideo_id)
					ϒplayer_header = λ.DictLiteral(map[string]λ.Object{
						"Referer": λ.Cal(ϒupdate_url_query, λ.Mod(λ.StrLiteral("http://tv.kakao.com/embed/player/cliplink/%s"), ϒvideo_id), λ.DictLiteral(map[string]string{
							"service":  "kakao_tv",
							"autoplay": "1",
							"profile":  "HIGH",
							"wmode":    "transparent",
						})),
					})
					ϒquery = λ.DictLiteral(map[string]λ.Object{
						"player":  λ.StrLiteral("monet_html5"),
						"referer": ϒurl,
						"uuid":    λ.StrLiteral(""),
						"service": λ.StrLiteral("kakao_tv"),
						"section": λ.StrLiteral(""),
						"dteType": λ.StrLiteral("PC"),
						"fields": λ.Calm(λ.StrLiteral(","), "join", λ.NewList(
							λ.StrLiteral("-*"),
							λ.StrLiteral("tid"),
							λ.StrLiteral("clipLink"),
							λ.StrLiteral("displayTitle"),
							λ.StrLiteral("clip"),
							λ.StrLiteral("title"),
							λ.StrLiteral("description"),
							λ.StrLiteral("channelId"),
							λ.StrLiteral("createTime"),
							λ.StrLiteral("duration"),
							λ.StrLiteral("playCount"),
							λ.StrLiteral("likeCount"),
							λ.StrLiteral("commentCount"),
							λ.StrLiteral("tagList"),
							λ.StrLiteral("channel"),
							λ.StrLiteral("name"),
							λ.StrLiteral("thumbnailUrl"),
							λ.StrLiteral("videoOutputList"),
							λ.StrLiteral("width"),
							λ.StrLiteral("height"),
							λ.StrLiteral("kbps"),
							λ.StrLiteral("profile"),
							λ.StrLiteral("label"),
						)),
					})
					ϒimpress = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(ϒapi_base, λ.StrLiteral("impress")),
						ϒdisplay_id,
						λ.StrLiteral("Downloading video info"),
					), λ.KWArgs{
						{Name: "query", Value: ϒquery},
						{Name: "headers", Value: ϒplayer_header},
					})
					ϒclip_link = λ.GetItem(ϒimpress, λ.StrLiteral("clipLink"))
					ϒclip = λ.GetItem(ϒclip_link, λ.StrLiteral("clip"))
					ϒtitle = func() λ.Object {
						if λv := λ.Calm(ϒclip, "get", λ.StrLiteral("title")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒclip_link, "get", λ.StrLiteral("displayTitle"))
						}
					}()
					λ.Calm(ϒquery, "update", λ.DictLiteral(map[string]λ.Object{
						"fields": λ.StrLiteral("-*,code,message,url"),
						"tid": func() λ.Object {
							if λv := λ.Calm(ϒimpress, "get", λ.StrLiteral("tid")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.StrLiteral("")
							}
						}(),
					}))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, func() λ.Object {
						if λv := λ.Calm(ϒclip, "get", λ.StrLiteral("videoOutputList")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}())
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒfmt = τmp1
						τmp2, τmp3 = func() (λexit λ.Object, λret λ.Object) {
							defer λ.CatchMulti(
								nil,
								&λ.Catcher{λ.KeyErrorType, func(λex λ.BaseException) {
									// pass
								}},
							)
							ϒprofile_name = λ.GetItem(ϒfmt, λ.StrLiteral("profile"))
							if λ.IsTrue(λ.Eq(ϒprofile_name, λ.StrLiteral("AUDIO"))) {
								λexit = λ.BlockExitContinue
								return
							}
							λ.SetItem(ϒquery, λ.StrLiteral("profile"), ϒprofile_name)
							τmp4, τmp5 = func() (λexit λ.Object, λret λ.Object) {
								defer λ.CatchMulti(
									nil,
									&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
										var ϒe λ.Object = λex
										if λ.IsTrue(func() λ.Object {
											if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), λ.None); !λ.IsTrue(λv) {
												return λv
											} else {
												return λ.Eq(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil), λ.IntLiteral(403))
											}
										}()) {
											ϒresp = λ.Calm(ϒself, "_parse_json", λ.Calm(λ.Calm(λ.GetAttr(ϒe, "cause", nil), "read"), "decode"), ϒvideo_id)
											if λ.IsTrue(λ.Eq(λ.Calm(ϒresp, "get", λ.StrLiteral("code")), λ.StrLiteral("GeoBlocked"))) {
												λ.Calm(ϒself, "raise_geo_restricted")
											}
										}
										λexit = λ.BlockExitContinue
										return
									}},
								)
								ϒfmt_url_json = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
									λ.Add(ϒapi_base, λ.StrLiteral("raw/videolocation")),
									ϒdisplay_id,
									λ.Mod(λ.StrLiteral("Downloading video URL for profile %s"), ϒprofile_name),
								), λ.KWArgs{
									{Name: "query", Value: ϒquery},
									{Name: "headers", Value: ϒplayer_header},
								})
								return λ.BlockExitNormally, nil
							}()
							if τmp4 == λ.BlockExitContinue {
								λexit = λ.BlockExitContinue
								return
							}
							ϒfmt_url = λ.GetItem(ϒfmt_url_json, λ.StrLiteral("url"))
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"url":         ϒfmt_url,
								"format_id":   ϒprofile_name,
								"width":       λ.Cal(ϒint_or_none, λ.Calm(ϒfmt, "get", λ.StrLiteral("width"))),
								"height":      λ.Cal(ϒint_or_none, λ.Calm(ϒfmt, "get", λ.StrLiteral("height"))),
								"format_note": λ.Calm(ϒfmt, "get", λ.StrLiteral("label")),
								"filesize":    λ.Cal(ϒint_or_none, λ.Calm(ϒfmt, "get", λ.StrLiteral("filesize"))),
								"tbr":         λ.Cal(ϒint_or_none, λ.Calm(ϒfmt, "get", λ.StrLiteral("kbps"))),
							}))
							return λ.BlockExitNormally, nil
						}()
						if τmp2 == λ.BlockExitContinue {
							continue
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒdisplay_id,
						"title":       ϒtitle,
						"description": λ.Cal(ϒstrip_or_none, λ.Calm(ϒclip, "get", λ.StrLiteral("description"))),
						"uploader": λ.Cal(ϒtry_get, ϒclip_link, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("channel")), λ.StrLiteral("name"))
							})),
						"uploader_id":   λ.Cal(ϒstr_or_none, λ.Calm(ϒclip_link, "get", λ.StrLiteral("channelId"))),
						"thumbnail":     λ.Calm(ϒclip, "get", λ.StrLiteral("thumbnailUrl")),
						"timestamp":     λ.Cal(ϒunified_timestamp, λ.Calm(ϒclip_link, "get", λ.StrLiteral("createTime"))),
						"duration":      λ.Cal(ϒint_or_none, λ.Calm(ϒclip, "get", λ.StrLiteral("duration"))),
						"view_count":    λ.Cal(ϒint_or_none, λ.Calm(ϒclip, "get", λ.StrLiteral("playCount"))),
						"like_count":    λ.Cal(ϒint_or_none, λ.Calm(ϒclip, "get", λ.StrLiteral("likeCount"))),
						"comment_count": λ.Cal(ϒint_or_none, λ.Calm(ϒclip, "get", λ.StrLiteral("commentCount"))),
						"formats":       ϒformats,
						"tags":          λ.Calm(ϒclip, "get", λ.StrLiteral("tagList")),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_API_BASE_TMPL": KakaoIE__API_BASE_TMPL,
				"_VALID_URL":     KakaoIE__VALID_URL,
				"_real_extract":  KakaoIE__real_extract,
			})
		}())
	})
}
