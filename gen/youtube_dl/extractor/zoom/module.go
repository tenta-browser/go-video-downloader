// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * zoom/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/zoom.py
 */

package zoom

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError      λ.Object
	InfoExtractor       λ.Object
	ZoomIE              λ.Object
	ϒint_or_none        λ.Object
	ϒjs_to_json         λ.Object
	ϒparse_filesize     λ.Object
	ϒurlencode_postdata λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒparse_filesize = Ωutils.ϒparse_filesize
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		ZoomIE = λ.Cal(λ.TypeType, λ.StrLiteral("ZoomIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ZoomIE_IE_NAME       λ.Object
				ZoomIE__VALID_URL    λ.Object
				ZoomIE__real_extract λ.Object
			)
			ZoomIE_IE_NAME = λ.StrLiteral("zoom")
			ZoomIE__VALID_URL = λ.StrLiteral("(?P<base_url>https?://(?:[^.]+\\.)?zoom.us/)rec(?:ording)?/(?:play|share)/(?P<id>[A-Za-z0-9_.-]+)")
			ZoomIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbase_url   λ.Object
						ϒdata       λ.Object
						ϒform       λ.Object
						ϒis_meeting λ.Object
						ϒpassword   λ.Object
						ϒplay_id    λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒvalidation λ.Object
						ϒwebpage    λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
					)
					_ = τmp0
					_ = τmp1
					τmp0 = λ.UnpackIterable(λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups"), 2)
					ϒbase_url = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒplay_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒplay_id)
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								ϒform = λ.None
							}},
						)
						ϒform = λ.Calm(ϒself, "_form_hidden_inputs", λ.StrLiteral("password_form"), ϒwebpage)
						return λ.BlockExitNormally, nil
					}()
					if λ.IsTrue(ϒform) {
						ϒpassword = λ.Calm(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", λ.StrLiteral("videopassword"))
						if !λ.IsTrue(ϒpassword) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("This video is protected by a passcode, use the --video-password option")), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
						ϒis_meeting = λ.Eq(λ.Calm(ϒform, "get", λ.StrLiteral("useWhichPasswd")), λ.StrLiteral("meeting"))
						ϒvalidation = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Add(ϒbase_url, λ.Mod(λ.StrLiteral("rec/validate%s_passwd"), func() λ.Object {
								if λ.IsTrue(ϒis_meeting) {
									return λ.StrLiteral("_meet")
								} else {
									return λ.StrLiteral("")
								}
							}())),
							ϒplay_id,
							λ.StrLiteral("Validating passcode"),
							λ.StrLiteral("Wrong passcode"),
						), λ.KWArgs{
							{Name: "data", Value: λ.Cal(ϒurlencode_postdata, λ.DictLiteral(map[string]λ.Object{
								"id": λ.GetItem(ϒform, λ.Add(func() λ.Object {
									if λ.IsTrue(ϒis_meeting) {
										return λ.StrLiteral("meet")
									} else {
										return λ.StrLiteral("file")
									}
								}(), λ.StrLiteral("Id"))),
								"passwd": ϒpassword,
								"action": λ.Calm(ϒform, "get", λ.StrLiteral("action")),
							}))},
						})
						if !λ.IsTrue(λ.Calm(ϒvalidation, "get", λ.StrLiteral("status"))) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.GetItem(ϒvalidation, λ.StrLiteral("errorMessage"))), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
						ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒplay_id)
					}
					ϒdata = λ.Calm(ϒself, "_parse_json", λ.Calm(ϒself, "_search_regex", λ.StrLiteral("(?s)window\\.__data__\\s*=\\s*({.+?});"), ϒwebpage, λ.StrLiteral("data")), ϒplay_id, ϒjs_to_json)
					return λ.DictLiteral(map[string]λ.Object{
						"id":     ϒplay_id,
						"title":  λ.GetItem(ϒdata, λ.StrLiteral("topic")),
						"url":    λ.GetItem(ϒdata, λ.StrLiteral("viewMp4Url")),
						"width":  λ.Cal(ϒint_or_none, λ.Calm(ϒdata, "get", λ.StrLiteral("viewResolvtionsWidth"))),
						"height": λ.Cal(ϒint_or_none, λ.Calm(ϒdata, "get", λ.StrLiteral("viewResolvtionsHeight"))),
						"http_headers": λ.DictLiteral(map[string]λ.Object{
							"Referer": ϒbase_url,
						}),
						"filesize_approx": λ.Cal(ϒparse_filesize, λ.Calm(ϒdata, "get", λ.StrLiteral("fileSize"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       ZoomIE_IE_NAME,
				"_VALID_URL":    ZoomIE__VALID_URL,
				"_real_extract": ZoomIE__real_extract,
			})
		}())
	})
}
