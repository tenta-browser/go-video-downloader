// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * franceinter/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/franceinter.py
 */

package franceinter

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	FranceInterIE  λ.Object
	InfoExtractor  λ.Object
	ϒmonth_by_name λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒmonth_by_name = Ωutils.ϒmonth_by_name
		FranceInterIE = λ.Cal(λ.TypeType, λ.StrLiteral("FranceInterIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				FranceInterIE__VALID_URL    λ.Object
				FranceInterIE__real_extract λ.Object
			)
			FranceInterIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?franceinter\\.fr/emissions/(?P<id>[^?#]+)")
			FranceInterIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription      λ.Object
						ϒself             = λargs[0]
						ϒthumbnail        λ.Object
						ϒtitle            λ.Object
						ϒupload_date      λ.Object
						ϒupload_date_list λ.Object
						ϒupload_date_str  λ.Object
						ϒurl              = λargs[1]
						ϒvideo_id         λ.Object
						ϒvideo_url        λ.Object
						ϒwebpage          λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒvideo_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(?s)<div[^>]+class=[\"\\']page-diffusion[\"\\'][^>]*>.*?<button[^>]+data-url=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.StrLiteral("video url"),
					), λ.KWArgs{
						{Name: "group", Value: λ.StrLiteral("url")},
					})
					ϒtitle = λ.Calm(ϒself, "_og_search_title", ϒwebpage)
					ϒdescription = λ.Calm(ϒself, "_og_search_description", ϒwebpage)
					ϒthumbnail = λ.Calm(ϒself, "_html_search_meta", λ.NewList(
						λ.StrLiteral("og:image"),
						λ.StrLiteral("twitter:image"),
					), ϒwebpage)
					ϒupload_date_str = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("class=[\"\\']\\s*cover-emission-period\\s*[\"\\'][^>]*>[^<]+\\s+(\\d{1,2}\\s+[^\\s]+\\s+\\d{4})<"),
						ϒwebpage,
						λ.StrLiteral("upload date"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(ϒupload_date_str) {
						ϒupload_date_list = λ.Calm(ϒupload_date_str, "split")
						λ.Calm(ϒupload_date_list, "reverse")
						λ.SetItem(ϒupload_date_list, λ.IntLiteral(1), λ.Mod(λ.StrLiteral("%02d"), func() λ.Object {
							if λv := λ.Call(ϒmonth_by_name, λ.NewArgs(λ.GetItem(ϒupload_date_list, λ.IntLiteral(1))), λ.KWArgs{
								{Name: "lang", Value: λ.StrLiteral("fr")},
							}); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.IntLiteral(0)
							}
						}()))
						λ.SetItem(ϒupload_date_list, λ.IntLiteral(2), λ.Mod(λ.StrLiteral("%02d"), λ.Cal(λ.IntType, λ.GetItem(ϒupload_date_list, λ.IntLiteral(2)))))
						ϒupload_date = λ.Calm(λ.StrLiteral(""), "join", ϒupload_date_list)
					} else {
						ϒupload_date = λ.None
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": ϒdescription,
						"thumbnail":   ϒthumbnail,
						"upload_date": ϒupload_date,
						"formats": λ.NewList(λ.DictLiteral(map[string]λ.Object{
							"url":    ϒvideo_url,
							"vcodec": λ.StrLiteral("none"),
						})),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    FranceInterIE__VALID_URL,
				"_real_extract": FranceInterIE__real_extract,
			})
		}())
	})
}
