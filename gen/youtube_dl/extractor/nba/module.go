// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * nba/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/nba.py
 */

package nba

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωturner "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/turner"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	NBABaseIE                     λ.Object
	NBACVPBaseIE                  λ.Object
	NBAChannelIE                  λ.Object
	NBAEmbedIE                    λ.Object
	NBAIE                         λ.Object
	NBAWatchBaseIE                λ.Object
	NBAWatchCollectionIE          λ.Object
	NBAWatchEmbedIE               λ.Object
	NBAWatchIE                    λ.Object
	TurnerBaseIE                  λ.Object
	ϒcompat_parse_qs              λ.Object
	ϒcompat_str                   λ.Object
	ϒcompat_urllib_parse_unquote  λ.Object
	ϒcompat_urllib_parse_urlparse λ.Object
	ϒint_or_none                  λ.Object
	ϒmerge_dicts                  λ.Object
	ϒparse_duration               λ.Object
	ϒparse_iso8601                λ.Object
	ϒtry_get                      λ.Object
	ϒupdate_url_query             λ.Object
	ϒurljoin                      λ.Object
)

func init() {
	λ.InitModule(func() {
		TurnerBaseIE = Ωturner.TurnerBaseIE
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmerge_dicts = Ωutils.ϒmerge_dicts
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒtry_get = Ωutils.ϒtry_get
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		ϒurljoin = Ωutils.ϒurljoin
		NBACVPBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("NBACVPBaseIE"), λ.NewTuple(TurnerBaseIE), func() λ.Dict {
			var (
				NBACVPBaseIE__extract_nba_cvp_info λ.Object
			)
			NBACVPBaseIE__extract_nba_cvp_info = λ.NewFunction("_extract_nba_cvp_info",
				[]λ.Param{
					{Name: "self"},
					{Name: "path"},
					{Name: "video_id"},
					{Name: "fatal", Def: λ.False},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒfatal    = λargs[3]
						ϒpath     = λargs[1]
						ϒself     = λargs[0]
						ϒvideo_id = λargs[2]
					)
					return λ.Call(λ.GetAttr(ϒself, "_extract_cvp_info", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("http://secure.nba.com/%s"), ϒpath),
						ϒvideo_id,
						λ.DictLiteral(map[string]λ.Object{
							"default": λ.DictLiteral(map[string]string{
								"media_src": "http://nba.cdn.turner.com/nba/big",
							}),
							"m3u8": λ.DictLiteral(map[string]string{
								"media_src": "http://nbavod-f.akamaihd.net",
							}),
						}),
					), λ.KWArgs{
						{Name: "fatal", Value: ϒfatal},
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_extract_nba_cvp_info": NBACVPBaseIE__extract_nba_cvp_info,
			})
		}())
		NBAWatchBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("NBAWatchBaseIE"), λ.NewTuple(NBACVPBaseIE), func() λ.Dict {
			var (
				NBAWatchBaseIE__VALID_URL_BASE λ.Object
			)
			NBAWatchBaseIE__VALID_URL_BASE = λ.StrLiteral("https?://(?:(?:www\\.)?nba\\.com(?:/watch)?|watch\\.nba\\.com)/")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL_BASE": NBAWatchBaseIE__VALID_URL_BASE,
			})
		}())
		NBAWatchEmbedIE = λ.Cal(λ.TypeType, λ.StrLiteral("NBAWatchEmbedIE"), λ.NewTuple(NBAWatchBaseIE), func() λ.Dict {
			var (
				NBAWatchEmbedIE__VALID_URL λ.Object
			)
			NBAWatchEmbedIE__VALID_URL = λ.Add(λ.GetAttr(NBAWatchBaseIE, "_VALID_URL_BASE", nil), λ.StrLiteral("embed\\?.*?\\bid=(?P<id>\\d+)"))
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": NBAWatchEmbedIE__VALID_URL,
			})
		}())
		NBAWatchIE = λ.Cal(λ.TypeType, λ.StrLiteral("NBAWatchIE"), λ.NewTuple(NBAWatchBaseIE), func() λ.Dict {
			var (
				NBAWatchIE__VALID_URL λ.Object
			)
			NBAWatchIE__VALID_URL = λ.Add(λ.GetAttr(NBAWatchBaseIE, "_VALID_URL_BASE", nil), λ.StrLiteral("(?:nba/)?video/(?P<id>.+?(?=/index\\.html)|(?:[^/]+/)*[^/?#&]+)"))
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": NBAWatchIE__VALID_URL,
			})
		}())
		NBAWatchCollectionIE = λ.Cal(λ.TypeType, λ.StrLiteral("NBAWatchCollectionIE"), λ.NewTuple(NBAWatchBaseIE), func() λ.Dict {
			var (
				NBAWatchCollectionIE__VALID_URL λ.Object
			)
			NBAWatchCollectionIE__VALID_URL = λ.Add(λ.GetAttr(NBAWatchBaseIE, "_VALID_URL_BASE", nil), λ.StrLiteral("list/collection/(?P<id>[^/?#&]+)"))
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": NBAWatchCollectionIE__VALID_URL,
			})
		}())
		NBABaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("NBABaseIE"), λ.NewTuple(NBACVPBaseIE), func() λ.Dict {
			var (
				NBABaseIE__CHANNEL_PATH_REGEX λ.Object
				NBABaseIE__VALID_URL_BASE     λ.Object
				NBABaseIE__call_api           λ.Object
				NBABaseIE__embed_url_result   λ.Object
				NBABaseIE__extract_video      λ.Object
				NBABaseIE__real_extract       λ.Object
			)
			NBABaseIE__VALID_URL_BASE = λ.StrLiteral("(?x)\n        https?://(?:www\\.)?nba\\.com/\n            (?P<team>\n                blazers|\n                bucks|\n                bulls|\n                cavaliers|\n                celtics|\n                clippers|\n                grizzlies|\n                hawks|\n                heat|\n                hornets|\n                jazz|\n                kings|\n                knicks|\n                lakers|\n                magic|\n                mavericks|\n                nets|\n                nuggets|\n                pacers|\n                pelicans|\n                pistons|\n                raptors|\n                rockets|\n                sixers|\n                spurs|\n                suns|\n                thunder|\n                timberwolves|\n                warriors|\n                wizards\n            )\n        (?:/play\\#)?/")
			NBABaseIE__CHANNEL_PATH_REGEX = λ.StrLiteral("video/channel|series")
			NBABaseIE__embed_url_result = λ.NewFunction("_embed_url_result",
				[]λ.Param{
					{Name: "self"},
					{Name: "team"},
					{Name: "content_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcontent_id = λargs[2]
						ϒself       = λargs[0]
						ϒteam       = λargs[1]
					)
					return λ.Calm(ϒself, "url_result", λ.Cal(ϒupdate_url_query, λ.StrLiteral("https://secure.nba.com/assets/amp/include/video/iframe.html"), λ.DictLiteral(map[string]λ.Object{
						"contentId": ϒcontent_id,
						"team":      ϒteam,
					})), λ.Calm(NBAEmbedIE, "ie_key"))
				})
			NBABaseIE__call_api = λ.NewFunction("_call_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "team"},
					{Name: "content_id"},
					{Name: "query"},
					{Name: "resource"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcontent_id = λargs[2]
						ϒquery      = λargs[3]
						ϒresource   = λargs[4]
						ϒself       = λargs[0]
						ϒteam       = λargs[1]
					)
					return λ.GetItem(λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("https://api.nba.net/2/%s/video,imported_video,wsc/"), ϒteam),
						ϒcontent_id,
						λ.Mod(λ.StrLiteral("Download %s JSON metadata"), ϒresource),
					), λ.KWArgs{
						{Name: "query", Value: ϒquery},
						{Name: "headers", Value: λ.DictLiteral(map[string]string{
							"accessToken": "internal|bb88df6b4c2244e78822812cecf1ee1b",
						})},
					}), λ.StrLiteral("response")), λ.StrLiteral("result"))
				})
			NBABaseIE__extract_video = λ.NewFunction("_extract_video",
				[]λ.Param{
					{Name: "self"},
					{Name: "video"},
					{Name: "team"},
					{Name: "extract_all", Def: λ.True},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcaption_url λ.Object
						ϒcaptions    λ.Object
						ϒcontent_xml λ.Object
						ϒcvp_info    λ.Object
						ϒextract_all = λargs[3]
						ϒformats     λ.Object
						ϒinfo        λ.Object
						ϒm3u8_url    λ.Object
						ϒmp4_url     λ.Object
						ϒself        = λargs[0]
						ϒsource_url  λ.Object
						ϒsubtitles   λ.Object
						ϒteam        = λargs[2]
						ϒvideo       = λargs[1]
						ϒvideo_id    λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
					)
					ϒvideo_id = λ.Cal(ϒcompat_str, λ.GetItem(ϒvideo, λ.StrLiteral("nid")))
					ϒteam = λ.GetItem(ϒvideo, λ.StrLiteral("brand"))
					ϒinfo = λ.DictLiteral(map[string]λ.Object{
						"id": ϒvideo_id,
						"title": func() λ.Object {
							if λv := λ.Calm(ϒvideo, "get", λ.StrLiteral("title")); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Calm(ϒvideo, "get", λ.StrLiteral("headline")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.GetItem(ϒvideo, λ.StrLiteral("shortHeadline"))
							}
						}(),
						"description": λ.Calm(ϒvideo, "get", λ.StrLiteral("description")),
						"timestamp":   λ.Cal(ϒparse_iso8601, λ.Calm(ϒvideo, "get", λ.StrLiteral("published"))),
					})
					ϒsubtitles = λ.DictLiteral(map[λ.Object]λ.Object{})
					ϒcaptions = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("videoCaptions")), λ.StrLiteral("sidecars"))
							}), λ.DictType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒcaptions, "values"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒcaption_url = τmp1
						λ.Calm(λ.Calm(ϒsubtitles, "setdefault", λ.StrLiteral("en"), λ.NewList()), "append", λ.DictLiteral(map[string]λ.Object{
							"url": ϒcaption_url,
						}))
					}
					ϒformats = λ.NewList()
					ϒmp4_url = λ.Calm(ϒvideo, "get", λ.StrLiteral("mp4"))
					if λ.IsTrue(ϒmp4_url) {
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url": ϒmp4_url,
						}))
					}
					if λ.IsTrue(ϒextract_all) {
						ϒsource_url = λ.Calm(ϒvideo, "get", λ.StrLiteral("videoSource"))
						if λ.IsTrue(func() λ.Object {
							if λv := ϒsource_url; !λ.IsTrue(λv) {
								return λv
							} else if λv := λ.NewBool(!λ.IsTrue(λ.Calm(ϒsource_url, "startswith", λ.StrLiteral("s3://")))); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒself, "_is_valid_url", ϒsource_url, ϒvideo_id, λ.StrLiteral("source"))
							}
						}()) {
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"format_id":  λ.StrLiteral("source"),
								"url":        ϒsource_url,
								"preference": λ.IntLiteral(1),
							}))
						}
						ϒm3u8_url = λ.Calm(ϒvideo, "get", λ.StrLiteral("m3u8"))
						if λ.IsTrue(ϒm3u8_url) {
							if λ.Contains(ϒm3u8_url, λ.StrLiteral(".akamaihd.net/i/")) {
								λ.Calm(ϒformats, "extend", λ.Calm(ϒself, "_extract_akamai_formats", ϒm3u8_url, ϒvideo_id, λ.DictLiteral(map[string]string{
									"http": "pmd.cdn.turner.com",
								})))
							} else {
								λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒm3u8_url,
									ϒvideo_id,
									λ.StrLiteral("mp4"),
									λ.StrLiteral("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
									{Name: "fatal", Value: λ.False},
								}))
							}
						}
						ϒcontent_xml = λ.Calm(ϒvideo, "get", λ.StrLiteral("contentXml"))
						if λ.IsTrue(func() λ.Object {
							if λv := ϒteam; !λ.IsTrue(λv) {
								return λv
							} else {
								return ϒcontent_xml
							}
						}()) {
							ϒcvp_info = λ.Call(λ.GetAttr(ϒself, "_extract_nba_cvp_info", nil), λ.NewArgs(
								λ.Add(ϒteam, ϒcontent_xml),
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							})
							if λ.IsTrue(ϒcvp_info) {
								λ.Calm(ϒformats, "extend", λ.GetItem(ϒcvp_info, λ.StrLiteral("formats")))
								ϒsubtitles = λ.Calm(ϒself, "_merge_subtitles", ϒsubtitles, λ.GetItem(ϒcvp_info, λ.StrLiteral("subtitles")))
								ϒinfo = λ.Cal(ϒmerge_dicts, ϒinfo, ϒcvp_info)
							}
						}
						λ.Calm(ϒself, "_sort_formats", ϒformats)
					} else {
						λ.Calm(ϒinfo, "update", λ.Calm(ϒself, "_embed_url_result", ϒteam, λ.GetItem(ϒvideo, λ.StrLiteral("videoId"))))
					}
					λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
						"formats":   ϒformats,
						"subtitles": ϒsubtitles,
					}))
					return ϒinfo
				})
			NBABaseIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id λ.Object
						ϒself       = λargs[0]
						ϒteam       λ.Object
						ϒurl        = λargs[1]
						ϒwebpage    λ.Object
						τmp0        λ.Object
					)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒteam = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒdisplay_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					if λ.Contains(ϒurl, λ.StrLiteral("/play#/")) {
						ϒdisplay_id = λ.Cal(ϒcompat_urllib_parse_unquote, ϒdisplay_id)
					} else {
						ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
						ϒdisplay_id = λ.Calm(ϒself, "_search_regex", λ.Add(λ.GetAttr(ϒself, "_CONTENT_ID_REGEX", nil), λ.StrLiteral("\\s*:\\s*\"([^\"]+)\"")), ϒwebpage, λ.StrLiteral("video id"))
					}
					return λ.Calm(ϒself, "_extract_url_results", ϒteam, ϒdisplay_id)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_CHANNEL_PATH_REGEX": NBABaseIE__CHANNEL_PATH_REGEX,
				"_VALID_URL_BASE":     NBABaseIE__VALID_URL_BASE,
				"_call_api":           NBABaseIE__call_api,
				"_embed_url_result":   NBABaseIE__embed_url_result,
				"_extract_video":      NBABaseIE__extract_video,
				"_real_extract":       NBABaseIE__real_extract,
			})
		}())
		NBAEmbedIE = λ.Cal(λ.TypeType, λ.StrLiteral("NBAEmbedIE"), λ.NewTuple(NBABaseIE), func() λ.Dict {
			var (
				NBAEmbedIE__VALID_URL    λ.Object
				NBAEmbedIE__real_extract λ.Object
			)
			NBAEmbedIE__VALID_URL = λ.StrLiteral("https?://secure\\.nba\\.com/assets/amp/include/video/(?:topI|i)frame\\.html\\?.*?\\bcontentId=(?P<id>[^?#&]+)")
			NBAEmbedIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcontent_id λ.Object
						ϒqs         λ.Object
						ϒself       = λargs[0]
						ϒteam       λ.Object
						ϒurl        = λargs[1]
						ϒvideo      λ.Object
					)
					ϒqs = λ.Cal(ϒcompat_parse_qs, λ.GetAttr(λ.Cal(ϒcompat_urllib_parse_urlparse, ϒurl), "query", nil))
					ϒcontent_id = λ.GetItem(λ.GetItem(ϒqs, λ.StrLiteral("contentId")), λ.IntLiteral(0))
					ϒteam = λ.GetItem(λ.Calm(ϒqs, "get", λ.StrLiteral("team"), λ.NewList(λ.None)), λ.IntLiteral(0))
					if !λ.IsTrue(ϒteam) {
						return λ.Calm(ϒself, "url_result", λ.Add(λ.StrLiteral("https://watch.nba.com/video/"), ϒcontent_id), λ.Calm(NBAWatchIE, "ie_key"))
					}
					ϒvideo = λ.GetItem(λ.Calm(ϒself, "_call_api", ϒteam, ϒcontent_id, λ.DictLiteral(map[string]λ.Object{
						"videoid": ϒcontent_id,
					}), λ.StrLiteral("video")), λ.IntLiteral(0))
					return λ.Calm(ϒself, "_extract_video", ϒvideo, ϒteam)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    NBAEmbedIE__VALID_URL,
				"_real_extract": NBAEmbedIE__real_extract,
			})
		}())
		NBAIE = λ.Cal(λ.TypeType, λ.StrLiteral("NBAIE"), λ.NewTuple(NBABaseIE), func() λ.Dict {
			var (
				NBAIE__CONTENT_ID_REGEX    λ.Object
				NBAIE__VALID_URL           λ.Object
				NBAIE__extract_url_results λ.Object
			)
			NBAIE__VALID_URL = λ.Add(λ.GetAttr(NBABaseIE, "_VALID_URL_BASE", nil), λ.Mod(λ.StrLiteral("(?!%s)video/(?P<id>(?:[^/]+/)*[^/?#&]+)"), λ.GetAttr(NBABaseIE, "_CHANNEL_PATH_REGEX", nil)))
			NBAIE__CONTENT_ID_REGEX = λ.StrLiteral("videoID")
			NBAIE__extract_url_results = λ.NewFunction("_extract_url_results",
				[]λ.Param{
					{Name: "self"},
					{Name: "team"},
					{Name: "content_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcontent_id = λargs[2]
						ϒself       = λargs[0]
						ϒteam       = λargs[1]
					)
					return λ.Calm(ϒself, "_embed_url_result", ϒteam, ϒcontent_id)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_CONTENT_ID_REGEX":    NBAIE__CONTENT_ID_REGEX,
				"_VALID_URL":           NBAIE__VALID_URL,
				"_extract_url_results": NBAIE__extract_url_results,
			})
		}())
		NBAChannelIE = λ.Cal(λ.TypeType, λ.StrLiteral("NBAChannelIE"), λ.NewTuple(NBABaseIE), func() λ.Dict {
			var (
				NBAChannelIE__VALID_URL λ.Object
			)
			NBAChannelIE__VALID_URL = λ.Add(λ.GetAttr(NBABaseIE, "_VALID_URL_BASE", nil), λ.Mod(λ.StrLiteral("(?:%s)/(?P<id>[^/?#&]+)"), λ.GetAttr(NBABaseIE, "_CHANNEL_PATH_REGEX", nil)))
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": NBAChannelIE__VALID_URL,
			})
		}())
	})
}
