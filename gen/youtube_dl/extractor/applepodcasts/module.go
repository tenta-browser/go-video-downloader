// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * applepodcasts/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/applepodcasts.py
 */

package applepodcasts

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ApplePodcastsIE    λ.Object
	InfoExtractor      λ.Object
	ϒclean_podcast_url λ.Object
	ϒint_or_none       λ.Object
	ϒparse_iso8601     λ.Object
	ϒtry_get           λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒclean_podcast_url = Ωutils.ϒclean_podcast_url
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒtry_get = Ωutils.ϒtry_get
		ApplePodcastsIE = λ.Cal(λ.TypeType, λ.StrLiteral("ApplePodcastsIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ApplePodcastsIE__VALID_URL    λ.Object
				ApplePodcastsIE__real_extract λ.Object
			)
			ApplePodcastsIE__VALID_URL = λ.StrLiteral("https?://podcasts\\.apple\\.com/(?:[^/]+/)?podcast(?:/[^/]+){1,2}.*?\\bi=(?P<id>\\d+)")
			ApplePodcastsIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription λ.Object
						ϒember_data  λ.Object
						ϒepisode     λ.Object
						ϒepisode_id  λ.Object
						ϒinc         λ.Object
						ϒself        = λargs[0]
						ϒseries      λ.Object
						ϒurl         = λargs[1]
						ϒwebpage     λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
					)
					ϒepisode_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒepisode_id)
					ϒember_data = λ.Calm(ϒself, "_parse_json", λ.Calm(ϒself, "_search_regex", λ.StrLiteral("id=\"shoebox-ember-data-store\"[^>]*>\\s*({.+?})\\s*<"), ϒwebpage, λ.StrLiteral("ember data")), ϒepisode_id)
					ϒember_data = func() λ.Object {
						if λv := λ.Calm(ϒember_data, "get", ϒepisode_id); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒember_data
						}
					}()
					ϒepisode = λ.GetItem(λ.GetItem(ϒember_data, λ.StrLiteral("data")), λ.StrLiteral("attributes"))
					ϒdescription = func() λ.Object {
						if λv := λ.Calm(ϒepisode, "get", λ.StrLiteral("description")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒseries = λ.None
					τmp0 = λ.Cal(λ.BuiltinIter, func() λ.Object {
						if λv := λ.Calm(ϒember_data, "get", λ.StrLiteral("included")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}())
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒinc = τmp1
						if λ.IsTrue(λ.Eq(λ.Calm(ϒinc, "get", λ.StrLiteral("type")), λ.StrLiteral("media/podcast"))) {
							ϒseries = λ.Cal(ϒtry_get, ϒinc, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("attributes")), λ.StrLiteral("name"))
								}))
						}
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":    ϒepisode_id,
						"title": λ.GetItem(ϒepisode, λ.StrLiteral("name")),
						"url":   λ.Cal(ϒclean_podcast_url, λ.GetItem(ϒepisode, λ.StrLiteral("assetUrl"))),
						"description": func() λ.Object {
							if λv := λ.Calm(ϒdescription, "get", λ.StrLiteral("standard")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒdescription, "get", λ.StrLiteral("short"))
							}
						}(),
						"timestamp": λ.Cal(ϒparse_iso8601, λ.Calm(ϒepisode, "get", λ.StrLiteral("releaseDateTime"))),
						"duration":  λ.Cal(ϒint_or_none, λ.Calm(ϒepisode, "get", λ.StrLiteral("durationInMilliseconds")), λ.IntLiteral(1000)),
						"series":    ϒseries,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    ApplePodcastsIE__VALID_URL,
				"_real_extract": ApplePodcastsIE__real_extract,
			})
		}())
	})
}
