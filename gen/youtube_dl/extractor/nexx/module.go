// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * nexx/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/nexx.py
 */

package nexx

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωtime "github.com/tenta-browser/go-video-downloader/gen/time"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError      λ.Object
	InfoExtractor       λ.Object
	NexxEmbedIE         λ.Object
	NexxIE              λ.Object
	ϒcompat_str         λ.Object
	ϒint_or_none        λ.Object
	ϒparse_duration     λ.Object
	ϒtry_get            λ.Object
	ϒurlencode_postdata λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒtry_get = Ωutils.ϒtry_get
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		NexxIE = λ.Cal(λ.TypeType, λ.StrLiteral("NexxIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NexxIE__VALID_URL             λ.Object
				NexxIE__extract_azure_formats λ.Object
				NexxIE__extract_free_formats  λ.Object
				NexxIE__real_extract          λ.Object
			)
			NexxIE__VALID_URL = λ.StrLiteral("(?x)\n                        (?:\n                            https?://api\\.nexx(?:\\.cloud|cdn\\.com)/v3/(?P<domain_id>\\d+)/videos/byid/|\n                            nexx:(?:(?P<domain_id_s>\\d+):)?|\n                            https?://arc\\.nexx\\.cloud/api/video/\n                        )\n                        (?P<id>\\d+)\n                    ")
			NexxIE__extract_free_formats = λ.NewFunction("_extract_free_formats",
				[]λ.Param{
					{Name: "self"},
					{Name: "video"},
					{Name: "video_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒa            λ.Object
						ϒcdn          λ.Object
						ϒcdn_provider λ.Object
						ϒf            λ.Object
						ϒfd           λ.Object
						ϒfilename     λ.Object
						ϒformats      λ.Object
						ϒh            λ.Object
						ϒhash         λ.Object
						ϒhttp_base    λ.Object
						ϒi            λ.Object
						ϒk            λ.Object
						ϒp            λ.Object
						ϒp0           λ.Object
						ϒps           λ.Object
						ϒs            λ.Object
						ϒself         = λargs[0]
						ϒstream_data  λ.Object
						ϒt            λ.Object
						ϒtbr          λ.Object
						ϒvideo        = λargs[1]
						ϒvideo_id     = λargs[2]
						ϒwidth_height λ.Object
						τmp0          λ.Object
						τmp1          λ.Object
						τmp2          λ.Object
					)
					ϒstream_data = λ.GetItem(ϒvideo, λ.StrLiteral("streamdata"))
					ϒcdn = λ.GetItem(ϒstream_data, λ.StrLiteral("cdnType"))
					if !λ.IsTrue(λ.Eq(ϒcdn, λ.StrLiteral("free"))) {
						panic(λ.Raise(λ.Cal(λ.AssertionErrorType)))
					}
					ϒhash = λ.GetItem(λ.GetItem(ϒvideo, λ.StrLiteral("general")), λ.StrLiteral("hash"))
					ϒps = λ.Cal(ϒcompat_str, λ.GetItem(ϒstream_data, λ.StrLiteral("originalDomain")))
					if λ.IsTrue(λ.Eq(λ.GetItem(ϒstream_data, λ.StrLiteral("applyFolderHierarchy")), λ.IntLiteral(1))) {
						ϒs = λ.GetItem(λ.Mod(λ.StrLiteral("%04d"), λ.Cal(λ.IntType, ϒvideo_id)), λ.NewSlice(λ.None, λ.None, λ.Neg(λ.IntLiteral(1))))
						τmp0 = λ.IAdd(ϒps, λ.Mod(λ.StrLiteral("/%s/%s"), λ.NewTuple(
							λ.GetItem(ϒs, λ.NewSlice(λ.IntLiteral(0), λ.IntLiteral(2), λ.None)),
							λ.GetItem(ϒs, λ.NewSlice(λ.IntLiteral(2), λ.IntLiteral(4), λ.None)),
						)))
						ϒps = τmp0
					}
					τmp0 = λ.IAdd(ϒps, λ.Mod(λ.StrLiteral("/%s/%s_"), λ.NewTuple(
						ϒvideo_id,
						ϒhash,
					)))
					ϒps = τmp0
					ϒt = λ.Add(λ.StrLiteral("http://%s"), ϒps)
					ϒfd = λ.Calm(λ.GetItem(ϒstream_data, λ.StrLiteral("azureFileDistribution")), "split", λ.StrLiteral(","))
					ϒcdn_provider = λ.GetItem(ϒstream_data, λ.StrLiteral("cdnProvider"))
					ϒp0 = λ.NewFunction("p0",
						[]λ.Param{
							{Name: "p"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒp = λargs[0]
							)
							return func() λ.Object {
								if λ.IsTrue(λ.Eq(λ.GetItem(ϒstream_data, λ.StrLiteral("applyAzureStructure")), λ.IntLiteral(1))) {
									return λ.Mod(λ.StrLiteral("_%s"), ϒp)
								} else {
									return λ.StrLiteral("")
								}
							}()
						})
					ϒformats = λ.NewList()
					if λ.IsTrue(λ.Eq(ϒcdn_provider, λ.StrLiteral("ak"))) {
						τmp0 = λ.IAdd(ϒt, λ.StrLiteral(","))
						ϒt = τmp0
						τmp0 = λ.Cal(λ.BuiltinIter, ϒfd)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒi = τmp1
							ϒp = λ.Calm(ϒi, "split", λ.StrLiteral(":"))
							τmp2 = λ.IAdd(ϒt, λ.Add(λ.Add(λ.GetItem(ϒp, λ.IntLiteral(1)), λ.Cal(ϒp0, λ.Cal(λ.IntType, λ.GetItem(ϒp, λ.IntLiteral(0))))), λ.StrLiteral(",")))
							ϒt = τmp2
						}
						τmp0 = λ.IAdd(ϒt, λ.StrLiteral(".mp4.csmil/master.%s"))
						ϒt = τmp0
					} else {
						if λ.IsTrue(λ.Eq(ϒcdn_provider, λ.StrLiteral("ce"))) {
							ϒk = λ.Calm(ϒt, "split", λ.StrLiteral("/"))
							ϒh = λ.Calm(ϒk, "pop")
							τmp0 = λ.Calm(λ.StrLiteral("/"), "join", ϒk)
							ϒhttp_base = τmp0
							ϒt = τmp0
							ϒhttp_base = λ.Mod(ϒhttp_base, λ.GetItem(ϒstream_data, λ.StrLiteral("cdnPathHTTP")))
							τmp0 = λ.IAdd(ϒt, λ.StrLiteral("/asset.ism/manifest.%s?dcp_ver=aos4&videostream="))
							ϒt = τmp0
							τmp0 = λ.Cal(λ.BuiltinIter, ϒfd)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒi = τmp1
								ϒp = λ.Calm(ϒi, "split", λ.StrLiteral(":"))
								ϒtbr = λ.Cal(λ.IntType, λ.GetItem(ϒp, λ.IntLiteral(0)))
								ϒfilename = λ.Mod(λ.StrLiteral("%s%s%s.mp4"), λ.NewTuple(
									ϒh,
									λ.GetItem(ϒp, λ.IntLiteral(1)),
									λ.Cal(ϒp0, ϒtbr),
								))
								ϒf = λ.DictLiteral(map[string]λ.Object{
									"url": λ.Add(λ.Add(ϒhttp_base, λ.StrLiteral("/")), ϒfilename),
									"format_id": λ.Mod(λ.StrLiteral("%s-http-%d"), λ.NewTuple(
										ϒcdn,
										ϒtbr,
									)),
									"tbr": ϒtbr,
								})
								ϒwidth_height = λ.Calm(λ.GetItem(ϒp, λ.IntLiteral(1)), "split", λ.StrLiteral("x"))
								if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒwidth_height), λ.IntLiteral(2))) {
									λ.Calm(ϒf, "update", λ.DictLiteral(map[string]λ.Object{
										"width":  λ.Cal(ϒint_or_none, λ.GetItem(ϒwidth_height, λ.IntLiteral(0))),
										"height": λ.Cal(ϒint_or_none, λ.GetItem(ϒwidth_height, λ.IntLiteral(1))),
									}))
								}
								λ.Calm(ϒformats, "append", ϒf)
								ϒa = λ.Add(ϒfilename, λ.Mod(λ.StrLiteral(":%s"), λ.Mul(ϒtbr, λ.IntLiteral(1000))))
								τmp2 = λ.IAdd(ϒt, λ.Add(ϒa, λ.StrLiteral(",")))
								ϒt = τmp2
							}
							ϒt = λ.Add(λ.Add(λ.GetItem(ϒt, λ.NewSlice(λ.None, λ.Neg(λ.IntLiteral(1)), λ.None)), λ.StrLiteral("&audiostream=")), λ.GetItem(λ.Calm(ϒa, "split", λ.StrLiteral(":")), λ.IntLiteral(0)))
						} else {
							if !λ.IsTrue(λ.False) {
								panic(λ.Raise(λ.Cal(λ.AssertionErrorType)))
							}
						}
					}
					if λ.IsTrue(λ.Eq(ϒcdn_provider, λ.StrLiteral("ce"))) {
						λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
							λ.Mod(ϒt, λ.NewTuple(
								λ.GetItem(ϒstream_data, λ.StrLiteral("cdnPathDASH")),
								λ.StrLiteral("mpd"),
							)),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "mpd_id", Value: λ.Mod(λ.StrLiteral("%s-dash"), ϒcdn)},
							{Name: "fatal", Value: λ.False},
						}))
					}
					λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
						λ.Mod(ϒt, λ.NewTuple(
							λ.GetItem(ϒstream_data, λ.StrLiteral("cdnPathHLS")),
							λ.StrLiteral("m3u8"),
						)),
						ϒvideo_id,
						λ.StrLiteral("mp4"),
					), λ.KWArgs{
						{Name: "entry_protocol", Value: λ.StrLiteral("m3u8_native")},
						{Name: "m3u8_id", Value: λ.Mod(λ.StrLiteral("%s-hls"), ϒcdn)},
						{Name: "fatal", Value: λ.False},
					}))
					return ϒformats
				})
			NexxIE__extract_azure_formats = λ.NewFunction("_extract_azure_formats",
				[]λ.Param{
					{Name: "self"},
					{Name: "video"},
					{Name: "video_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒazure_file_distribution λ.Object
						ϒazure_locator           λ.Object
						ϒazure_manifest_url      λ.Object
						ϒazure_progressive_base  λ.Object
						ϒazure_stream_base       λ.Object
						ϒcdn                     λ.Object
						ϒf                       λ.Object
						ϒfd                      λ.Object
						ϒfds                     λ.Object
						ϒformats                 λ.Object
						ϒget_cdn_shield_base     λ.Object
						ϒis_ml                   λ.Object
						ϒlanguage                λ.Object
						ϒprotection_token        λ.Object
						ϒself                    = λargs[0]
						ϒss                      λ.Object
						ϒstream_data             λ.Object
						ϒtbr                     λ.Object
						ϒvideo                   = λargs[1]
						ϒvideo_id                = λargs[2]
						ϒwidth_height            λ.Object
						τmp0                     λ.Object
						τmp1                     λ.Object
					)
					ϒstream_data = λ.GetItem(ϒvideo, λ.StrLiteral("streamdata"))
					ϒcdn = λ.GetItem(ϒstream_data, λ.StrLiteral("cdnType"))
					if !λ.IsTrue(λ.Eq(ϒcdn, λ.StrLiteral("azure"))) {
						panic(λ.Raise(λ.Cal(λ.AssertionErrorType)))
					}
					ϒazure_locator = λ.GetItem(ϒstream_data, λ.StrLiteral("azureLocator"))
					ϒget_cdn_shield_base = λ.NewFunction("get_cdn_shield_base",
						[]λ.Param{
							{Name: "shield_type", Def: λ.StrLiteral("")},
							{Name: "static", Def: λ.False},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒaccount     λ.Object
								ϒcdn_shield  λ.Object
								ϒprefix      λ.Object
								ϒsecure      λ.Object
								ϒshield_type = λargs[0]
								ϒstatic      = λargs[1]
								τmp0         λ.Object
								τmp1         λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
								λ.StrLiteral(""),
								λ.StrLiteral("s"),
							))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒsecure = τmp1
								ϒcdn_shield = λ.Calm(ϒstream_data, "get", λ.Mod(λ.StrLiteral("cdnShield%sHTTP%s"), λ.NewTuple(
									ϒshield_type,
									λ.Calm(ϒsecure, "upper"),
								)))
								if λ.IsTrue(ϒcdn_shield) {
									return λ.Mod(λ.StrLiteral("http%s://%s"), λ.NewTuple(
										ϒsecure,
										ϒcdn_shield,
									))
								}
							}
							if τmp1 == λ.AfterLast {
								if λ.Contains(λ.GetItem(ϒstream_data, λ.StrLiteral("azureAccount")), λ.StrLiteral("fb")) {
									ϒprefix = func() λ.Object {
										if λ.IsTrue(ϒstatic) {
											return λ.StrLiteral("df")
										} else {
											return λ.StrLiteral("f")
										}
									}()
								} else {
									ϒprefix = func() λ.Object {
										if λ.IsTrue(ϒstatic) {
											return λ.StrLiteral("d")
										} else {
											return λ.StrLiteral("p")
										}
									}()
								}
								ϒaccount = λ.Cal(λ.IntType, λ.Calm(λ.Calm(λ.GetItem(ϒstream_data, λ.StrLiteral("azureAccount")), "replace", λ.StrLiteral("nexxplayplus"), λ.StrLiteral("")), "replace", λ.StrLiteral("nexxplayfb"), λ.StrLiteral("")))
								return λ.Mod(λ.StrLiteral("http://nx-%s%02d.akamaized.net/"), λ.NewTuple(
									ϒprefix,
									ϒaccount,
								))
							}
							return λ.None
						})
					ϒlanguage = func() λ.Object {
						if λv := λ.Calm(λ.GetItem(ϒvideo, λ.StrLiteral("general")), "get", λ.StrLiteral("language_raw")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.StrLiteral("")
						}
					}()
					ϒazure_stream_base = λ.Cal(ϒget_cdn_shield_base)
					ϒis_ml = λ.NewBool(λ.Contains(ϒlanguage, λ.StrLiteral(",")))
					ϒazure_manifest_url = λ.Add(λ.Mod(λ.StrLiteral("%s%s/%s_src%s.ism/Manifest"), λ.NewTuple(
						ϒazure_stream_base,
						ϒazure_locator,
						ϒvideo_id,
						func() λ.Object {
							if λ.IsTrue(ϒis_ml) {
								return λ.StrLiteral("_manifest")
							} else {
								return λ.StrLiteral("")
							}
						}(),
					)), λ.StrLiteral("%s"))
					ϒprotection_token = λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("protectiondata")), λ.StrLiteral("token"))
						}), ϒcompat_str)
					if λ.IsTrue(ϒprotection_token) {
						τmp0 = λ.IAdd(ϒazure_manifest_url, λ.Mod(λ.StrLiteral("?hdnts=%s"), ϒprotection_token))
						ϒazure_manifest_url = τmp0
					}
					ϒformats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
						λ.Mod(ϒazure_manifest_url, λ.StrLiteral("(format=m3u8-aapl)")),
						ϒvideo_id,
						λ.StrLiteral("mp4"),
						λ.StrLiteral("m3u8_native"),
					), λ.KWArgs{
						{Name: "m3u8_id", Value: λ.Mod(λ.StrLiteral("%s-hls"), ϒcdn)},
						{Name: "fatal", Value: λ.False},
					})
					λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
						λ.Mod(ϒazure_manifest_url, λ.StrLiteral("(format=mpd-time-csf)")),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "mpd_id", Value: λ.Mod(λ.StrLiteral("%s-dash"), ϒcdn)},
						{Name: "fatal", Value: λ.False},
					}))
					λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_ism_formats", nil), λ.NewArgs(
						λ.Mod(ϒazure_manifest_url, λ.StrLiteral("")),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "ism_id", Value: λ.Mod(λ.StrLiteral("%s-mss"), ϒcdn)},
						{Name: "fatal", Value: λ.False},
					}))
					ϒazure_progressive_base = λ.Cal(ϒget_cdn_shield_base, λ.StrLiteral("Prog"), λ.True)
					ϒazure_file_distribution = λ.Calm(ϒstream_data, "get", λ.StrLiteral("azureFileDistribution"))
					if λ.IsTrue(ϒazure_file_distribution) {
						ϒfds = λ.Calm(ϒazure_file_distribution, "split", λ.StrLiteral(","))
						if λ.IsTrue(ϒfds) {
							τmp0 = λ.Cal(λ.BuiltinIter, ϒfds)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒfd = τmp1
								ϒss = λ.Calm(ϒfd, "split", λ.StrLiteral(":"))
								if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒss), λ.IntLiteral(2))) {
									ϒtbr = λ.Cal(ϒint_or_none, λ.GetItem(ϒss, λ.IntLiteral(0)))
									if λ.IsTrue(ϒtbr) {
										ϒf = λ.DictLiteral(map[string]λ.Object{
											"url": λ.Mod(λ.StrLiteral("%s%s/%s_src_%s_%d.mp4"), λ.NewTuple(
												ϒazure_progressive_base,
												ϒazure_locator,
												ϒvideo_id,
												λ.GetItem(ϒss, λ.IntLiteral(1)),
												ϒtbr,
											)),
											"format_id": λ.Mod(λ.StrLiteral("%s-http-%d"), λ.NewTuple(
												ϒcdn,
												ϒtbr,
											)),
											"tbr": ϒtbr,
										})
										ϒwidth_height = λ.Calm(λ.GetItem(ϒss, λ.IntLiteral(1)), "split", λ.StrLiteral("x"))
										if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒwidth_height), λ.IntLiteral(2))) {
											λ.Calm(ϒf, "update", λ.DictLiteral(map[string]λ.Object{
												"width":  λ.Cal(ϒint_or_none, λ.GetItem(ϒwidth_height, λ.IntLiteral(0))),
												"height": λ.Cal(ϒint_or_none, λ.GetItem(ϒwidth_height, λ.IntLiteral(1))),
											}))
										}
										λ.Calm(ϒformats, "append", ϒf)
									}
								}
							}
						}
					}
					return ϒformats
				})
			NexxIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcdn           λ.Object
						ϒcid           λ.Object
						ϒdevice_id     λ.Object
						ϒdomain_id     λ.Object
						ϒfind_video    λ.Object
						ϒformats       λ.Object
						ϒgeneral       λ.Object
						ϒmobj          λ.Object
						ϒop            λ.Object
						ϒrequest_token λ.Object
						ϒresponse      λ.Object
						ϒresult        λ.Object
						ϒsecret        λ.Object
						ϒself          = λargs[0]
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						ϒvideo         λ.Object
						ϒvideo_id      λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒdomain_id = func() λ.Object {
						if λv := λ.Calm(ϒmobj, "group", λ.StrLiteral("domain_id")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒmobj, "group", λ.StrLiteral("domain_id_s"))
						}
					}()
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒvideo = λ.None
					ϒfind_video = λ.NewFunction("find_video",
						[]λ.Param{
							{Name: "result"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒresult = λargs[0]
								ϒv      λ.Object
								ϒvid    λ.Object
								τmp0    λ.Object
								τmp1    λ.Object
							)
							if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒresult, λ.DictType)) {
								return ϒresult
							} else {
								if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒresult, λ.ListType)) {
									ϒvid = λ.Cal(λ.IntType, ϒvideo_id)
									τmp0 = λ.Cal(λ.BuiltinIter, ϒresult)
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒv = τmp1
										if λ.IsTrue(λ.Eq(λ.Cal(ϒtry_get, ϒv, λ.NewFunction("<lambda>",
											[]λ.Param{
												{Name: "x"},
											},
											0, false, false,
											func(λargs []λ.Object) λ.Object {
												var (
													ϒx = λargs[0]
												)
												return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("general")), λ.StrLiteral("ID"))
											}), λ.IntType), ϒvid)) {
											return ϒv
										}
									}
								}
							}
							return λ.None
						})
					ϒresponse = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("https://arc.nexx.cloud/api/video/%s.json"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(func() λ.Object {
						if λv := ϒresponse; !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.BuiltinIsInstance, ϒresponse, λ.DictType)
						}
					}()) {
						ϒresult = λ.Calm(ϒresponse, "get", λ.StrLiteral("result"))
						if λ.IsTrue(ϒresult) {
							ϒvideo = λ.Cal(ϒfind_video, ϒresult)
						}
					}
					if !λ.IsTrue(ϒvideo) {
						ϒdevice_id = λ.Mod(λ.StrLiteral("%d:%d:%d%d"), λ.NewTuple(
							λ.Cal(λ.None, λ.IntLiteral(1), λ.IntLiteral(4)),
							λ.Cal(λ.IntType, λ.Cal(Ωtime.ϒtime)),
							λ.Cal(λ.None, λ.FloatLiteral(10000.0), λ.IntLiteral(99999)),
							λ.Cal(λ.None, λ.IntLiteral(1), λ.IntLiteral(9)),
						))
						ϒresult = λ.Call(λ.GetAttr(ϒself, "_call_api", nil), λ.NewArgs(
							ϒdomain_id,
							λ.StrLiteral("session/init"),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "data", Value: λ.DictLiteral(map[string]λ.Object{
								"nxp_devh":         ϒdevice_id,
								"nxp_userh":        λ.StrLiteral(""),
								"precid":           λ.StrLiteral("0"),
								"playlicense":      λ.StrLiteral("0"),
								"screenx":          λ.StrLiteral("1920"),
								"screeny":          λ.StrLiteral("1080"),
								"playerversion":    λ.StrLiteral("6.0.00"),
								"gateway":          λ.StrLiteral("html5"),
								"adGateway":        λ.StrLiteral(""),
								"explicitlanguage": λ.StrLiteral("en-US"),
								"addTextTemplates": λ.StrLiteral("1"),
								"addDomainData":    λ.StrLiteral("1"),
								"addAdModel":       λ.StrLiteral("1"),
							})},
							{Name: "headers", Value: λ.DictLiteral(map[string]string{
								"X-Request-Enable-Auth-Fallback": "1",
							})},
						})
						ϒcid = λ.GetItem(λ.GetItem(ϒresult, λ.StrLiteral("general")), λ.StrLiteral("cid"))
						ϒsecret = λ.GetItem(λ.GetItem(λ.GetItem(ϒresult, λ.StrLiteral("device")), λ.StrLiteral("clienttoken")), λ.NewSlice(λ.Cal(λ.IntType, λ.GetItem(ϒdevice_id, λ.IntLiteral(0))), λ.None, λ.None))
						ϒsecret = λ.GetItem(ϒsecret, λ.NewSlice(λ.IntLiteral(0), λ.Sub(λ.Cal(λ.BuiltinLen, ϒsecret), λ.Cal(λ.IntType, λ.GetItem(ϒdevice_id, λ.Neg(λ.IntLiteral(1))))), λ.None))
						ϒop = λ.StrLiteral("byid")
						ϒrequest_token = λ.Calm(λ.Calm(λ.None, "md5", λ.Calm(λ.Calm(λ.StrLiteral(""), "join", λ.NewTuple(
							ϒop,
							ϒdomain_id,
							ϒsecret,
						)), "encode", λ.StrLiteral("utf-8"))), "hexdigest")
						ϒresult = λ.Call(λ.GetAttr(ϒself, "_call_api", nil), λ.NewArgs(
							ϒdomain_id,
							λ.Mod(λ.StrLiteral("videos/%s/%s"), λ.NewTuple(
								ϒop,
								ϒvideo_id,
							)),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "data", Value: λ.DictLiteral(map[string]string{
								"additionalfields":      "language,channel,actors,studio,licenseby,slug,subtitle,teaser,description",
								"addInteractionOptions": "1",
								"addStatusDetails":      "1",
								"addStreamDetails":      "1",
								"addCaptions":           "1",
								"addScenes":             "1",
								"addHotSpots":           "1",
								"addBumpers":            "1",
								"captionFormat":         "data",
							})},
							{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
								"X-Request-CID":   ϒcid,
								"X-Request-Token": ϒrequest_token,
							})},
						})
						ϒvideo = λ.Cal(ϒfind_video, ϒresult)
					}
					ϒgeneral = λ.GetItem(ϒvideo, λ.StrLiteral("general"))
					ϒtitle = λ.GetItem(ϒgeneral, λ.StrLiteral("title"))
					ϒcdn = λ.GetItem(λ.GetItem(ϒvideo, λ.StrLiteral("streamdata")), λ.StrLiteral("cdnType"))
					if λ.IsTrue(λ.Eq(ϒcdn, λ.StrLiteral("azure"))) {
						ϒformats = λ.Calm(ϒself, "_extract_azure_formats", ϒvideo, ϒvideo_id)
					} else {
						if λ.IsTrue(λ.Eq(ϒcdn, λ.StrLiteral("free"))) {
							ϒformats = λ.Calm(ϒself, "_extract_free_formats", ϒvideo, ϒvideo_id)
						} else {
							if !λ.IsTrue(λ.False) {
								panic(λ.Raise(λ.Cal(λ.AssertionErrorType)))
							}
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":           ϒvideo_id,
						"title":        ϒtitle,
						"alt_title":    λ.Calm(ϒgeneral, "get", λ.StrLiteral("subtitle")),
						"description":  λ.Calm(ϒgeneral, "get", λ.StrLiteral("description")),
						"release_year": λ.Cal(ϒint_or_none, λ.Calm(ϒgeneral, "get", λ.StrLiteral("year"))),
						"creator": func() λ.Object {
							if λv := λ.Calm(ϒgeneral, "get", λ.StrLiteral("studio")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒgeneral, "get", λ.StrLiteral("studio_adref"))
							}
						}(),
						"thumbnail": λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("imagedata")), λ.StrLiteral("thumb"))
							}), ϒcompat_str),
						"duration":  λ.Cal(ϒparse_duration, λ.Calm(ϒgeneral, "get", λ.StrLiteral("runtime"))),
						"timestamp": λ.Cal(ϒint_or_none, λ.Calm(ϒgeneral, "get", λ.StrLiteral("uploaded"))),
						"episode_number": λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("episodedata")), λ.StrLiteral("episode"))
							}))),
						"season_number": λ.Cal(ϒint_or_none, λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("episodedata")), λ.StrLiteral("season"))
							}))),
						"formats": ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":             NexxIE__VALID_URL,
				"_extract_azure_formats": NexxIE__extract_azure_formats,
				"_extract_free_formats":  NexxIE__extract_free_formats,
				"_real_extract":          NexxIE__real_extract,
			})
		}())
		NexxEmbedIE = λ.Cal(λ.TypeType, λ.StrLiteral("NexxEmbedIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NexxEmbedIE__VALID_URL λ.Object
			)
			NexxEmbedIE__VALID_URL = λ.StrLiteral("https?://embed\\.nexx(?:\\.cloud|cdn\\.com)/\\d+/(?:video/)?(?P<id>[^/?#&]+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": NexxEmbedIE__VALID_URL,
			})
		}())
	})
}
