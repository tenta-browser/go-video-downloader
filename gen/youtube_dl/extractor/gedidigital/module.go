// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * gedidigital/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/gedidigital.py
 */

package gedidigital

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	GediDigitalIE  λ.Object
	InfoExtractor  λ.Object
	ϒdetermine_ext λ.Object
	ϒint_or_none   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		GediDigitalIE = λ.Cal(λ.TypeType, λ.StrLiteral("GediDigitalIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				GediDigitalIE__VALID_URL    λ.Object
				GediDigitalIE__real_extract λ.Object
			)
			GediDigitalIE__VALID_URL = λ.StrLiteral("(?x)https?://video\\.\n        (?:\n            (?:\n                (?:espresso\\.)?repubblica\n                |lastampa\n                |ilsecoloxix\n            )|\n            (?:\n                iltirreno\n                |messaggeroveneto\n                |ilpiccolo\n                |gazzettadimantova\n                |mattinopadova\n                |laprovinciapavese\n                |tribunatreviso\n                |nuovavenezia\n                |gazzettadimodena\n                |lanuovaferrara\n                |corrierealpi\n                |lasentinella\n            )\\.gelocal\n        )\\.it(?:/[^/]+){2,3}?/(?P<id>\\d+)(?:[/?&#]|$)")
			GediDigitalIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒabr         λ.Object
						ϒduration    λ.Object
						ϒext         λ.Object
						ϒf           λ.Object
						ϒformats     λ.Object
						ϒmobj        λ.Object
						ϒn           λ.Object
						ϒplayer_data λ.Object
						ϒself        = λargs[0]
						ϒt           λ.Object
						ϒthumb       λ.Object
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒv           λ.Object
						ϒvideo_id    λ.Object
						ϒwebpage     λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
						τmp2         λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒtitle = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
						λ.NewList(
							λ.StrLiteral("twitter:title"),
							λ.StrLiteral("og:title"),
						),
						ϒwebpage,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})
					ϒplayer_data = λ.Cal(Ωre.ϒfindall, λ.StrLiteral("PlayerFactory\\.setParam\\('(?P<type>format|param)',\\s*'(?P<name>[^']+)',\\s*'(?P<val>[^']+)'\\);"), ϒwebpage)
					ϒformats = λ.NewList()
					τmp0 = λ.None
					ϒduration = τmp0
					ϒthumb = τmp0
					τmp0 = λ.Cal(λ.BuiltinIter, ϒplayer_data)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = λ.UnpackIterable(τmp1, 3)
						ϒt = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒn = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒv = λ.GetItem(τmp2, λ.IntLiteral(2))
						if λ.IsTrue(λ.Eq(ϒt, λ.StrLiteral("format"))) {
							if λ.Contains(λ.NewTuple(
								λ.StrLiteral("video-hds-vod-ec"),
								λ.StrLiteral("video-hls-vod-ec"),
								λ.StrLiteral("video-viralize"),
								λ.StrLiteral("video-youtube-pfp"),
							), ϒn) {
								continue
							} else {
								if λ.IsTrue(λ.Calm(ϒn, "endswith", λ.StrLiteral("-vod-ak"))) {
									λ.Calm(ϒformats, "extend", λ.Calm(ϒself, "_extract_akamai_formats", ϒv, ϒvideo_id, λ.DictLiteral(map[string]string{
										"http": "media.gedidigital.it",
									})))
								} else {
									ϒext = λ.Cal(ϒdetermine_ext, ϒv)
									if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("m3u8"))) {
										λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
											ϒv,
											ϒvideo_id,
											λ.StrLiteral("mp4"),
											λ.StrLiteral("m3u8_native"),
										), λ.KWArgs{
											{Name: "m3u8_id", Value: ϒn},
											{Name: "fatal", Value: λ.False},
										}))
										continue
									}
									ϒf = λ.DictLiteral(map[string]λ.Object{
										"format_id": ϒn,
										"url":       ϒv,
									})
									if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("mp3"))) {
										ϒabr = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
											λ.StrLiteral("-mp3-audio-(\\d+)"),
											ϒv,
											λ.StrLiteral("abr"),
										), λ.KWArgs{
											{Name: "default", Value: λ.None},
										}))
										λ.Calm(ϒf, "update", λ.DictLiteral(map[string]λ.Object{
											"abr":    ϒabr,
											"tbr":    ϒabr,
											"vcodec": λ.StrLiteral("none"),
										}))
									} else {
										ϒmobj = λ.Cal(Ωre.ϒmatch, λ.StrLiteral("^video-rrtv-(\\d+)(?:-(\\d+))?$"), ϒn)
										if λ.IsTrue(ϒmobj) {
											λ.Calm(ϒf, "update", λ.DictLiteral(map[string]λ.Object{
												"height": λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(1))),
												"vbr":    λ.Cal(ϒint_or_none, λ.Calm(ϒmobj, "group", λ.IntLiteral(2))),
											}))
										}
										if !λ.IsTrue(λ.Calm(ϒf, "get", λ.StrLiteral("vbr"))) {
											λ.SetItem(ϒf, λ.StrLiteral("vbr"), λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
												λ.StrLiteral("-video-rrtv-(\\d+)"),
												ϒv,
												λ.StrLiteral("abr"),
											), λ.KWArgs{
												{Name: "default", Value: λ.None},
											})))
										}
									}
									λ.Calm(ϒformats, "append", ϒf)
								}
							}
						} else {
							if λ.IsTrue(λ.Eq(ϒt, λ.StrLiteral("param"))) {
								if λ.Contains(λ.NewList(
									λ.StrLiteral("image_full"),
									λ.StrLiteral("image"),
								), ϒn) {
									ϒthumb = ϒv
								} else {
									if λ.IsTrue(λ.Eq(ϒn, λ.StrLiteral("videoDuration"))) {
										ϒduration = λ.Cal(ϒint_or_none, ϒv)
									}
								}
							}
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":    ϒvideo_id,
						"title": ϒtitle,
						"description": λ.Calm(ϒself, "_html_search_meta", λ.NewList(
							λ.StrLiteral("twitter:description"),
							λ.StrLiteral("og:description"),
							λ.StrLiteral("description"),
						), ϒwebpage),
						"thumbnail": func() λ.Object {
							if λv := ϒthumb; λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒself, "_og_search_thumbnail", ϒwebpage)
							}
						}(),
						"formats":  ϒformats,
						"duration": ϒduration,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    GediDigitalIE__VALID_URL,
				"_real_extract": GediDigitalIE__real_extract,
			})
		}())
	})
}
