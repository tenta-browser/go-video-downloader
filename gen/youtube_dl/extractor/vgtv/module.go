// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * vgtv/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/vgtv.py
 */

package vgtv

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωxstream "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/xstream"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BTArticleIE       λ.Object
	BTVestlendingenIE λ.Object
	ExtractorError    λ.Object
	InfoExtractor     λ.Object
	VGTVIE            λ.Object
	XstreamIE         λ.Object
	ϒfloat_or_none    λ.Object
	ϒtry_get          λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		XstreamIE = Ωxstream.XstreamIE
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒtry_get = Ωutils.ϒtry_get
		VGTVIE = λ.Cal(λ.TypeType, λ.StrLiteral("VGTVIE"), λ.NewTuple(XstreamIE), func() λ.Dict {
			var (
				VGTVIE__APP_NAME_TO_VENDOR λ.Object
				VGTVIE__GEO_BYPASS         λ.Object
				VGTVIE__HOST_TO_APPNAME    λ.Object
				VGTVIE__VALID_URL          λ.Object
				VGTVIE__real_extract       λ.Object
			)
			VGTVIE__GEO_BYPASS = λ.False
			VGTVIE__HOST_TO_APPNAME = λ.DictLiteral(map[string]string{
				"vgtv.no":                "vgtv",
				"bt.no/tv":               "bttv",
				"aftenbladet.no/tv":      "satv",
				"fvn.no/fvntv":           "fvntv",
				"aftenposten.no/webtv":   "aptv",
				"ap.vgtv.no/webtv":       "aptv",
				"tv.aftonbladet.se":      "abtv",
				"tv.aftonbladet.se/abtv": "abtv",
				"www.aftonbladet.se/tv":  "abtv",
			})
			VGTVIE__APP_NAME_TO_VENDOR = λ.DictLiteral(map[string]string{
				"vgtv":  "vgtv",
				"bttv":  "bt",
				"satv":  "sa",
				"fvntv": "fvn",
				"aptv":  "ap",
				"abtv":  "ab",
			})
			VGTVIE__VALID_URL = λ.Mod(λ.StrLiteral("(?x)\n                    (?:https?://(?:www\\.)?\n                    (?P<host>\n                        %s\n                    )\n                    /?\n                    (?:\n                        (?:\\#!/)?(?:video|live)/|\n                        embed?.*id=|\n                        a(?:rticles)?/\n                    )|\n                    (?P<appname>\n                        %s\n                    ):)\n                    (?P<id>\\d+)\n                    "), λ.NewTuple(
				λ.Calm(λ.StrLiteral("|"), "join", λ.Calm(VGTVIE__HOST_TO_APPNAME, "keys")),
				λ.Calm(λ.StrLiteral("|"), "join", λ.Calm(VGTVIE__APP_NAME_TO_VENDOR, "keys")),
			))
			VGTVIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒappname     λ.Object
						ϒdata        λ.Object
						ϒentry       λ.Object
						ϒf4m_formats λ.Object
						ϒformat_info λ.Object
						ϒformats     λ.Object
						ϒhdcore_sign λ.Object
						ϒhds_url     λ.Object
						ϒhls_url     λ.Object
						ϒhost        λ.Object
						ϒinfo        λ.Object
						ϒis_live     λ.Object
						ϒmobj        λ.Object
						ϒmp4_url     λ.Object
						ϒmp4_urls    λ.Object
						ϒproperties  λ.Object
						ϒself        = λargs[0]
						ϒstream_type λ.Object
						ϒstreams     λ.Object
						ϒtbr         λ.Object
						ϒurl         = λargs[1]
						ϒvendor      λ.Object
						ϒvideo_id    λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒhost = λ.Calm(ϒmobj, "group", λ.StrLiteral("host"))
					ϒappname = func() λ.Object {
						if λ.IsTrue(ϒhost) {
							return λ.GetItem(λ.GetAttr(ϒself, "_HOST_TO_APPNAME", nil), ϒhost)
						} else {
							return λ.Calm(ϒmobj, "group", λ.StrLiteral("appname"))
						}
					}()
					ϒvendor = λ.GetItem(λ.GetAttr(ϒself, "_APP_NAME_TO_VENDOR", nil), ϒappname)
					ϒdata = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("http://svp.vg.no/svp/api/v1/%s/assets/%s?appName=%s-website"), λ.NewTuple(
						ϒvendor,
						ϒvideo_id,
						ϒappname,
					)), ϒvideo_id, λ.StrLiteral("Downloading media JSON"))
					if λ.IsTrue(λ.Eq(λ.Calm(ϒdata, "get", λ.StrLiteral("status")), λ.StrLiteral("inactive"))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("Video %s is no longer available"), ϒvideo_id)), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒinfo = λ.DictLiteral(map[string]λ.Object{
						"formats": λ.NewList(),
					})
					if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒvideo_id), λ.IntLiteral(5))) {
						if λ.IsTrue(λ.Eq(ϒappname, λ.StrLiteral("bttv"))) {
							ϒinfo = λ.Calm(ϒself, "_extract_video_info", λ.StrLiteral("btno"), ϒvideo_id)
						}
					}
					ϒstreams = λ.GetItem(ϒdata, λ.StrLiteral("streamUrls"))
					ϒstream_type = λ.Calm(ϒdata, "get", λ.StrLiteral("streamType"))
					ϒis_live = λ.Eq(ϒstream_type, λ.StrLiteral("live"))
					ϒformats = λ.NewList()
					ϒhls_url = λ.Calm(ϒstreams, "get", λ.StrLiteral("hls"))
					if λ.IsTrue(ϒhls_url) {
						λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒhls_url,
							ϒvideo_id,
							λ.StrLiteral("mp4"),
						), λ.KWArgs{
							{Name: "entry_protocol", Value: func() λ.Object {
								if λ.IsTrue(ϒis_live) {
									return λ.StrLiteral("m3u8")
								} else {
									return λ.StrLiteral("m3u8_native")
								}
							}()},
							{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					ϒhds_url = λ.Calm(ϒstreams, "get", λ.StrLiteral("hds"))
					if λ.IsTrue(ϒhds_url) {
						ϒhdcore_sign = λ.StrLiteral("hdcore=3.7.0")
						ϒf4m_formats = λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
							λ.Add(ϒhds_url, λ.Mod(λ.StrLiteral("?%s"), ϒhdcore_sign)),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "f4m_id", Value: λ.StrLiteral("hds")},
							{Name: "fatal", Value: λ.False},
						})
						if λ.IsTrue(ϒf4m_formats) {
							τmp0 = λ.Cal(λ.BuiltinIter, ϒf4m_formats)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒentry = τmp1
								λ.Calm(ϒentry, "update", λ.DictLiteral(map[string]λ.Object{
									"extra_param_to_segment_url": ϒhdcore_sign,
								}))
								λ.Calm(ϒformats, "append", ϒentry)
							}
						}
					}
					ϒmp4_urls = func() λ.Object {
						if λv := λ.Calm(ϒstreams, "get", λ.StrLiteral("pseudostreaming")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}()
					ϒmp4_url = λ.Calm(ϒstreams, "get", λ.StrLiteral("mp4"))
					if λ.IsTrue(ϒmp4_url) {
						λ.Calm(ϒmp4_urls, "append", ϒmp4_url)
					}
					τmp0 = λ.Cal(λ.BuiltinIter, ϒmp4_urls)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒmp4_url = τmp1
						ϒformat_info = λ.DictLiteral(map[string]λ.Object{
							"url": ϒmp4_url,
						})
						ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("(\\d+)_(\\d+)_(\\d+)"), ϒmp4_url)
						if λ.IsTrue(ϒmobj) {
							ϒtbr = λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(3)))
							λ.Calm(ϒformat_info, "update", λ.DictLiteral(map[string]λ.Object{
								"width":     λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(1))),
								"height":    λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(2))),
								"tbr":       ϒtbr,
								"format_id": λ.Mod(λ.StrLiteral("mp4-%s"), ϒtbr),
							}))
						}
						λ.Calm(ϒformats, "append", ϒformat_info)
					}
					λ.Calm(λ.GetItem(ϒinfo, λ.StrLiteral("formats")), "extend", ϒformats)
					if !λ.IsTrue(λ.GetItem(ϒinfo, λ.StrLiteral("formats"))) {
						ϒproperties = λ.Cal(ϒtry_get, ϒdata, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("streamConfiguration")), λ.StrLiteral("properties"))
							}), λ.ListType)
						if λ.IsTrue(func() λ.Object {
							if λv := ϒproperties; !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒproperties, λ.StrLiteral("geoblocked")))
							}
						}()) {
							panic(λ.Raise(λ.Call(λ.GetAttr(ϒself, "raise_geo_restricted", nil), nil, λ.KWArgs{
								{Name: "countries", Value: λ.NewList(λ.Calm(λ.GetItem(λ.Calm(λ.GetItem(λ.Calm(ϒhost, "rpartition", λ.StrLiteral(".")), λ.Neg(λ.IntLiteral(1))), "partition", λ.StrLiteral("/")), λ.IntLiteral(0)), "upper"))},
							})))
						}
					}
					λ.Calm(ϒself, "_sort_formats", λ.GetItem(ϒinfo, λ.StrLiteral("formats")))
					λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
						"id": ϒvideo_id,
						"title": func() λ.Object {
							if λ.IsTrue(ϒis_live) {
								return λ.Calm(ϒself, "_live_title", λ.GetItem(ϒdata, λ.StrLiteral("title")))
							} else {
								return λ.GetItem(ϒdata, λ.StrLiteral("title"))
							}
						}(),
						"description": λ.GetItem(ϒdata, λ.StrLiteral("description")),
						"thumbnail":   λ.Add(λ.GetItem(λ.GetItem(ϒdata, λ.StrLiteral("images")), λ.StrLiteral("main")), λ.StrLiteral("?t[]=900x506q80")),
						"timestamp":   λ.GetItem(ϒdata, λ.StrLiteral("published")),
						"duration":    λ.Cal(ϒfloat_or_none, λ.GetItem(ϒdata, λ.StrLiteral("duration")), λ.IntLiteral(1000)),
						"view_count":  λ.GetItem(ϒdata, λ.StrLiteral("displays")),
						"is_live":     ϒis_live,
					}))
					return ϒinfo
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_APP_NAME_TO_VENDOR": VGTVIE__APP_NAME_TO_VENDOR,
				"_GEO_BYPASS":         VGTVIE__GEO_BYPASS,
				"_HOST_TO_APPNAME":    VGTVIE__HOST_TO_APPNAME,
				"_VALID_URL":          VGTVIE__VALID_URL,
				"_real_extract":       VGTVIE__real_extract,
			})
		}())
		BTArticleIE = λ.Cal(λ.TypeType, λ.StrLiteral("BTArticleIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BTArticleIE__VALID_URL λ.Object
			)
			BTArticleIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?bt\\.no/(?:[^/]+/)+(?P<id>[^/]+)-\\d+\\.html")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": BTArticleIE__VALID_URL,
			})
		}())
		BTVestlendingenIE = λ.Cal(λ.TypeType, λ.StrLiteral("BTVestlendingenIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BTVestlendingenIE__VALID_URL λ.Object
			)
			BTVestlendingenIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?bt\\.no/spesial/vestlendingen/#!/(?P<id>\\d+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": BTVestlendingenIE__VALID_URL,
			})
		}())
	})
}
