// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * tmz/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/tmz.py
 */

package tmz

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωjwplatform "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/jwplatform"
	Ωkaltura "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/kaltura"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	JWPlatformIE       λ.Object
	KalturaIE          λ.Object
	TMZArticleIE       λ.Object
	TMZIE              λ.Object
	ϒint_or_none       λ.Object
	ϒunified_timestamp λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		JWPlatformIE = Ωjwplatform.JWPlatformIE
		KalturaIE = Ωkaltura.KalturaIE
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		TMZIE = λ.Cal(λ.TypeType, λ.StrLiteral("TMZIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TMZIE__VALID_URL    λ.Object
				TMZIE__real_extract λ.Object
			)
			TMZIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?tmz\\.com/videos/(?P<id>[^/?#&]+)")
			TMZIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒinfo               λ.Object
						ϒjwplatform_id      λ.Object
						ϒkaltura_entry_id   λ.Object
						ϒkaltura_partner_id λ.Object
						ϒmessage            λ.Object
						ϒself               = λargs[0]
						ϒtmz_video_id       λ.Object
						ϒurl                = λargs[1]
						ϒvideo              λ.Object
						ϒvideo_id           λ.Object
						ϒwebpage            λ.Object
					)
					ϒvideo_id = λ.Calm(λ.Calm(ϒself, "_match_id", ϒurl), "replace", λ.StrLiteral("-"), λ.StrLiteral("_"))
					ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						ϒurl,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(ϒwebpage) {
						ϒtmz_video_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("nodeRef\\s*:\\s*[\"\\']tmz:video:([\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12})"),
							ϒwebpage,
							λ.StrLiteral("video id"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						ϒvideo = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Mod(λ.StrLiteral("https://www.tmz.com/_/video/%s"), ϒtmz_video_id),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
						if λ.IsTrue(ϒvideo) {
							ϒmessage = λ.GetItem(ϒvideo, λ.StrLiteral("message"))
							ϒinfo = λ.DictLiteral(map[string]λ.Object{
								"_type":       λ.StrLiteral("url_transparent"),
								"title":       λ.Calm(ϒmessage, "get", λ.StrLiteral("title")),
								"description": λ.Calm(ϒmessage, "get", λ.StrLiteral("description")),
								"timestamp":   λ.Cal(ϒunified_timestamp, λ.Calm(ϒmessage, "get", λ.StrLiteral("published_at"))),
								"duration":    λ.Cal(ϒint_or_none, λ.Calm(ϒmessage, "get", λ.StrLiteral("duration"))),
							})
							ϒjwplatform_id = λ.Calm(ϒmessage, "get", λ.StrLiteral("jwplayer_media_id"))
							if λ.IsTrue(ϒjwplatform_id) {
								λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
									"url":    λ.Mod(λ.StrLiteral("jwplatform:%s"), ϒjwplatform_id),
									"ie_key": λ.Calm(JWPlatformIE, "ie_key"),
								}))
							} else {
								ϒkaltura_entry_id = func() λ.Object {
									if λv := λ.Calm(ϒmessage, "get", λ.StrLiteral("kaltura_entry_id")); λ.IsTrue(λv) {
										return λv
									} else {
										return ϒvideo_id
									}
								}()
								ϒkaltura_partner_id = func() λ.Object {
									if λv := λ.Calm(ϒmessage, "get", λ.StrLiteral("kaltura_partner_id")); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.StrLiteral("591531")
									}
								}()
								λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
									"url": λ.Mod(λ.StrLiteral("kaltura:%s:%s"), λ.NewTuple(
										ϒkaltura_partner_id,
										ϒkaltura_entry_id,
									)),
									"ie_key": λ.Calm(KalturaIE, "ie_key"),
								}))
							}
							return ϒinfo
						}
					}
					return λ.Calm(ϒself, "url_result", λ.Mod(λ.StrLiteral("kaltura:591531:%s"), ϒvideo_id), λ.Calm(KalturaIE, "ie_key"), ϒvideo_id)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    TMZIE__VALID_URL,
				"_real_extract": TMZIE__real_extract,
			})
		}())
		TMZArticleIE = λ.Cal(λ.TypeType, λ.StrLiteral("TMZArticleIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TMZArticleIE__VALID_URL    λ.Object
				TMZArticleIE__real_extract λ.Object
			)
			TMZArticleIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?tmz\\.com/\\d{4}/\\d{2}/\\d{2}/(?P<id>[^/?#&]+)")
			TMZArticleIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒembedded_video_info λ.Object
						ϒself                = λargs[0]
						ϒtmz_url             λ.Object
						ϒurl                 = λargs[1]
						ϒvideo_id            λ.Object
						ϒwebpage             λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒtmz_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("clickLink\\s*\\(\\s*[\"\\'](?P<url>%s)"), λ.GetAttr(TMZIE, "_VALID_URL", nil)),
						ϒwebpage,
						λ.StrLiteral("video id"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
						{Name: "group", Value: λ.StrLiteral("url")},
					})
					if λ.IsTrue(ϒtmz_url) {
						return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(ϒtmz_url), λ.KWArgs{
							{Name: "ie", Value: λ.Calm(TMZIE, "ie_key")},
						})
					}
					ϒembedded_video_info = λ.Calm(ϒself, "_parse_json", λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("tmzVideoEmbed\\(({.+?})\\);"), ϒwebpage, λ.StrLiteral("embedded video info")), ϒvideo_id)
					return λ.Call(λ.GetAttr(ϒself, "url_result", nil), λ.NewArgs(λ.Mod(λ.StrLiteral("http://www.tmz.com/videos/%s/"), λ.GetItem(ϒembedded_video_info, λ.StrLiteral("id")))), λ.KWArgs{
						{Name: "ie", Value: λ.Calm(TMZIE, "ie_key")},
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    TMZArticleIE__VALID_URL,
				"_real_extract": TMZArticleIE__real_extract,
			})
		}())
	})
}
