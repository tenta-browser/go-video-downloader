// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * bravotv/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/bravotv.py
 */

package bravotv

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωadobepass "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/adobepass"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AdobePassIE       λ.Object
	BravoTVIE         λ.Object
	ϒint_or_none      λ.Object
	ϒsmuggle_url      λ.Object
	ϒupdate_url_query λ.Object
)

func init() {
	λ.InitModule(func() {
		AdobePassIE = Ωadobepass.AdobePassIE
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		ϒint_or_none = Ωutils.ϒint_or_none
		BravoTVIE = λ.Cal(λ.TypeType, λ.StrLiteral("BravoTVIE"), λ.NewTuple(AdobePassIE), func() λ.Dict {
			var (
				BravoTVIE__VALID_URL    λ.Object
				BravoTVIE__real_extract λ.Object
			)
			BravoTVIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?(?P<req_id>bravotv|oxygen)\\.com/(?:[^/]+/)+(?P<id>[^/?#]+)")
			BravoTVIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaccount_pid     λ.Object
						ϒadobe_pass      λ.Object
						ϒdisplay_id      λ.Object
						ϒinfo            λ.Object
						ϒmetadata        λ.Object
						ϒmobj            λ.Object
						ϒquery           λ.Object
						ϒrelease_pid     λ.Object
						ϒresource        λ.Object
						ϒself            = λargs[0]
						ϒsettings        λ.Object
						ϒshared_playlist λ.Object
						ϒsite            λ.Object
						ϒtp_path         λ.Object
						ϒtve             λ.Object
						ϒurl             = λargs[1]
						ϒwebpage         λ.Object
						τmp0             λ.Object
					)
					τmp0 = λ.UnpackIterable(λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups"), 2)
					ϒsite = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒdisplay_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
					ϒsettings = λ.Calm(ϒself, "_parse_json", λ.Calm(ϒself, "_search_regex", λ.StrLiteral("<script[^>]+data-drupal-selector=\"drupal-settings-json\"[^>]*>({.+?})</script>"), ϒwebpage, λ.StrLiteral("drupal settings")), ϒdisplay_id)
					ϒinfo = λ.DictLiteral(map[λ.Object]λ.Object{})
					ϒquery = λ.DictLiteral(map[string]string{
						"mbr": "true",
					})
					τmp0 = λ.UnpackIterable(λ.Mul(λ.NewList(λ.None), λ.IntLiteral(2)), 2)
					ϒaccount_pid = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒrelease_pid = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒtve = λ.Calm(ϒsettings, "get", λ.StrLiteral("ls_tve"))
					if λ.IsTrue(ϒtve) {
						λ.SetItem(ϒquery, λ.StrLiteral("manifest"), λ.StrLiteral("m3u"))
						ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("<[^>]+id=\"pdk-player\"[^>]+data-url=[\"\\']?(?:https?:)?//player\\.theplatform\\.com/p/([^/]+)/(?:[^/]+/)*select/([^?#&\"\\']+)"), ϒwebpage)
						if λ.IsTrue(ϒmobj) {
							τmp0 = λ.UnpackIterable(λ.Calm(ϒmobj, "groups"), 2)
							ϒaccount_pid = λ.GetItem(τmp0, λ.IntLiteral(0))
							ϒtp_path = λ.GetItem(τmp0, λ.IntLiteral(1))
							ϒrelease_pid = λ.GetItem(λ.Calm(λ.Calm(ϒtp_path, "strip", λ.StrLiteral("/")), "split", λ.StrLiteral("/")), λ.Neg(λ.IntLiteral(1)))
						} else {
							ϒaccount_pid = λ.StrLiteral("HNK2IC")
							τmp0 = λ.GetItem(ϒtve, λ.StrLiteral("release_pid"))
							ϒtp_path = τmp0
							ϒrelease_pid = τmp0
						}
						if λ.IsTrue(λ.Eq(λ.Calm(ϒtve, "get", λ.StrLiteral("entitlement")), λ.StrLiteral("auth"))) {
							ϒadobe_pass = λ.Calm(ϒsettings, "get", λ.StrLiteral("tve_adobe_auth"), λ.DictLiteral(map[λ.Object]λ.Object{}))
							if λ.IsTrue(λ.Eq(ϒsite, λ.StrLiteral("bravotv"))) {
								ϒsite = λ.StrLiteral("bravo")
							}
							ϒresource = λ.Calm(ϒself, "_get_mvpd_resource", func() λ.Object {
								if λv := λ.Calm(ϒadobe_pass, "get", λ.StrLiteral("adobePassResourceId")); λ.IsTrue(λv) {
									return λv
								} else {
									return ϒsite
								}
							}(), λ.GetItem(ϒtve, λ.StrLiteral("title")), ϒrelease_pid, λ.Calm(ϒtve, "get", λ.StrLiteral("rating")))
							λ.SetItem(ϒquery, λ.StrLiteral("auth"), λ.Calm(ϒself, "_extract_mvpd_auth", ϒurl, ϒrelease_pid, func() λ.Object {
								if λv := λ.Calm(ϒadobe_pass, "get", λ.StrLiteral("adobePassRequestorId")); λ.IsTrue(λv) {
									return λv
								} else {
									return ϒsite
								}
							}(), ϒresource))
						}
					} else {
						ϒshared_playlist = λ.GetItem(ϒsettings, λ.StrLiteral("ls_playlist"))
						ϒaccount_pid = λ.GetItem(ϒshared_playlist, λ.StrLiteral("account_pid"))
						ϒmetadata = λ.GetItem(λ.GetItem(ϒshared_playlist, λ.StrLiteral("video_metadata")), λ.GetItem(ϒshared_playlist, λ.StrLiteral("default_clip")))
						τmp0 = λ.Calm(ϒmetadata, "get", λ.StrLiteral("release_pid"))
						ϒtp_path = τmp0
						ϒrelease_pid = τmp0
						if !λ.IsTrue(ϒrelease_pid) {
							ϒrelease_pid = λ.GetItem(ϒmetadata, λ.StrLiteral("guid"))
							ϒtp_path = λ.Add(λ.StrLiteral("media/guid/2140479951/"), ϒrelease_pid)
						}
						λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
							"title":          λ.GetItem(ϒmetadata, λ.StrLiteral("title")),
							"description":    λ.Calm(ϒmetadata, "get", λ.StrLiteral("description")),
							"season_number":  λ.Cal(ϒint_or_none, λ.Calm(ϒmetadata, "get", λ.StrLiteral("season_num"))),
							"episode_number": λ.Cal(ϒint_or_none, λ.Calm(ϒmetadata, "get", λ.StrLiteral("episode_num"))),
						}))
						λ.SetItem(ϒquery, λ.StrLiteral("switch"), λ.StrLiteral("progressive"))
					}
					λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
						"_type": λ.StrLiteral("url_transparent"),
						"id":    ϒrelease_pid,
						"url": λ.Cal(ϒsmuggle_url, λ.Cal(ϒupdate_url_query, λ.Mod(λ.StrLiteral("http://link.theplatform.com/s/%s/%s"), λ.NewTuple(
							ϒaccount_pid,
							ϒtp_path,
						)), ϒquery), λ.DictLiteral(map[string]λ.Object{
							"force_smil_url": λ.True,
						})),
						"ie_key": λ.StrLiteral("ThePlatform"),
					}))
					return ϒinfo
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    BravoTVIE__VALID_URL,
				"_real_extract": BravoTVIE__real_extract,
			})
		}())
	})
}
