// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * tvplay/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/tvplay.py
 */

package tvplay

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError    λ.Object
	InfoExtractor     λ.Object
	TVPlayHomeIE      λ.Object
	TVPlayIE          λ.Object
	ViafreeIE         λ.Object
	ϒcompat_HTTPError λ.Object
	ϒdetermine_ext    λ.Object
	ϒint_or_none      λ.Object
	ϒparse_duration   λ.Object
	ϒparse_iso8601    λ.Object
	ϒqualities        λ.Object
	ϒtry_get          λ.Object
	ϒupdate_url_query λ.Object
	ϒurl_or_none      λ.Object
	ϒurljoin          λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒqualities = Ωutils.ϒqualities
		ϒtry_get = Ωutils.ϒtry_get
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		ϒurl_or_none = Ωutils.ϒurl_or_none
		ϒurljoin = Ωutils.ϒurljoin
		TVPlayIE = λ.Cal(λ.TypeType, λ.StrLiteral("TVPlayIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TVPlayIE_IE_NAME       λ.Object
				TVPlayIE__VALID_URL    λ.Object
				TVPlayIE__real_extract λ.Object
			)
			TVPlayIE_IE_NAME = λ.StrLiteral("mtg")
			TVPlayIE__VALID_URL = λ.StrLiteral("(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    ")
			TVPlayIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒepisode_number λ.Object
						ϒext            λ.Object
						ϒfmt            λ.Object
						ϒformat_id      λ.Object
						ϒformats        λ.Object
						ϒgeo_country    λ.Object
						ϒlang           λ.Object
						ϒm              λ.Object
						ϒmsg            λ.Object
						ϒquality        λ.Object
						ϒsami_path      λ.Object
						ϒseason         λ.Object
						ϒseason_number  λ.Object
						ϒself           = λargs[0]
						ϒseries         λ.Object
						ϒstreams        λ.Object
						ϒsubtitles      λ.Object
						ϒtitle          λ.Object
						ϒurl            = λargs[1]
						ϒvideo          λ.Object
						ϒvideo_id       λ.Object
						ϒvideo_url      λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
						τmp2            λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒgeo_country = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("https?://[^/]+\\.([a-z]{2})"),
						ϒurl,
						λ.StrLiteral("geo country"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒgeo_country) {
						λ.Calm(ϒself, "_initialize_geo_bypass", λ.DictLiteral(map[string]λ.Object{
							"countries": λ.NewList(λ.Calm(ϒgeo_country, "upper")),
						}))
					}
					ϒvideo = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("http://playapi.mtgx.tv/v3/videos/%s"), ϒvideo_id), ϒvideo_id, λ.StrLiteral("Downloading video JSON"))
					ϒtitle = λ.GetItem(ϒvideo, λ.StrLiteral("title"))
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								var ϒe λ.Object = λex
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), ϒcompat_HTTPError); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil), λ.IntLiteral(403))
									}
								}()) {
									ϒmsg = λ.Calm(ϒself, "_parse_json", λ.Calm(λ.Calm(λ.GetAttr(ϒe, "cause", nil), "read"), "decode", λ.StrLiteral("utf-8")), ϒvideo_id)
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.GetItem(ϒmsg, λ.StrLiteral("msg"))), λ.KWArgs{
										{Name: "expected", Value: λ.True},
									})))
								}
								panic(λ.Raise(λex))
							}},
						)
						ϒstreams = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("http://playapi.mtgx.tv/v3/videos/stream/%s"), ϒvideo_id), ϒvideo_id, λ.StrLiteral("Downloading streams JSON"))
						return λ.BlockExitNormally, nil
					}()
					ϒquality = λ.Cal(ϒqualities, λ.NewList(
						λ.StrLiteral("hls"),
						λ.StrLiteral("medium"),
						λ.StrLiteral("high"),
					))
					ϒformats = λ.NewList()
					τmp1 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.Calm(ϒstreams, "get", λ.StrLiteral("streams"), λ.DictLiteral(map[λ.Object]λ.Object{})), "items"))
					for {
						if τmp0 = λ.NextDefault(τmp1, λ.AfterLast); τmp0 == λ.AfterLast {
							break
						}
						τmp2 = τmp0
						ϒformat_id = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒvideo_url = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒvideo_url = λ.Cal(ϒurl_or_none, ϒvideo_url)
						if !λ.IsTrue(ϒvideo_url) {
							continue
						}
						ϒext = λ.Cal(ϒdetermine_ext, ϒvideo_url)
						if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("f4m"))) {
							λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
								λ.Cal(ϒupdate_url_query, ϒvideo_url, λ.DictLiteral(map[string]string{
									"hdcore": "3.5.0",
									"plugin": "aasp-3.5.0.151.81",
								})),
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "f4m_id", Value: λ.StrLiteral("hds")},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("m3u8"))) {
								λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒvideo_url,
									ϒvideo_id,
									λ.StrLiteral("mp4"),
									λ.StrLiteral("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								ϒfmt = λ.DictLiteral(map[string]λ.Object{
									"format_id": ϒformat_id,
									"quality":   λ.Cal(ϒquality, ϒformat_id),
									"ext":       ϒext,
								})
								if λ.IsTrue(λ.Calm(ϒvideo_url, "startswith", λ.StrLiteral("rtmp"))) {
									ϒm = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$"), ϒvideo_url)
									if !λ.IsTrue(ϒm) {
										continue
									}
									λ.Calm(ϒfmt, "update", λ.DictLiteral(map[string]λ.Object{
										"ext":        λ.StrLiteral("flv"),
										"url":        λ.Calm(ϒm, "group", λ.StrLiteral("url")),
										"app":        λ.Calm(ϒm, "group", λ.StrLiteral("app")),
										"play_path":  λ.Calm(ϒm, "group", λ.StrLiteral("playpath")),
										"preference": λ.Neg(λ.IntLiteral(1)),
									}))
								} else {
									λ.Calm(ϒfmt, "update", λ.DictLiteral(map[string]λ.Object{
										"url": ϒvideo_url,
									}))
								}
								λ.Calm(ϒformats, "append", ϒfmt)
							}
						}
					}
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒformats)); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒvideo, "get", λ.StrLiteral("is_geo_blocked"))
						}
					}()) {
						λ.Calm(ϒself, "raise_geo_restricted", λ.StrLiteral("This content might not be available in your country due to copyright reasons"))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒsubtitles = λ.DictLiteral(map[λ.Object]λ.Object{})
					ϒsami_path = λ.Calm(ϒvideo, "get", λ.StrLiteral("sami_path"))
					if λ.IsTrue(ϒsami_path) {
						ϒlang = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("_([a-z]{2})\\.xml"),
							ϒsami_path,
							λ.StrLiteral("lang"),
						), λ.KWArgs{
							{Name: "default", Value: λ.GetItem(λ.Calm(λ.GetAttr(λ.Cal(Ωparse.ϒurlparse, ϒurl), "netloc", nil), "rsplit", λ.StrLiteral("."), λ.IntLiteral(1)), λ.Neg(λ.IntLiteral(1)))},
						})
						λ.SetItem(ϒsubtitles, ϒlang, λ.NewList(λ.DictLiteral(map[string]λ.Object{
							"url": ϒsami_path,
						})))
					}
					ϒseries = λ.Calm(ϒvideo, "get", λ.StrLiteral("format_title"))
					ϒepisode_number = λ.Cal(ϒint_or_none, λ.Calm(λ.Calm(ϒvideo, "get", λ.StrLiteral("format_position"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("episode")))
					ϒseason = λ.Calm(λ.Calm(λ.Calm(ϒvideo, "get", λ.StrLiteral("_embedded"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("season"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("title"))
					ϒseason_number = λ.Cal(ϒint_or_none, λ.Calm(λ.Calm(ϒvideo, "get", λ.StrLiteral("format_position"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("season")))
					return λ.DictLiteral(map[string]λ.Object{
						"id":             ϒvideo_id,
						"title":          ϒtitle,
						"description":    λ.Calm(ϒvideo, "get", λ.StrLiteral("description")),
						"series":         ϒseries,
						"episode_number": ϒepisode_number,
						"season":         ϒseason,
						"season_number":  ϒseason_number,
						"duration":       λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("duration"))),
						"timestamp":      λ.Cal(ϒparse_iso8601, λ.Calm(ϒvideo, "get", λ.StrLiteral("created_at"))),
						"view_count": λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("views")), λ.StrLiteral("total"))
							}), λ.IntType),
						"age_limit": λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("age_limit"), λ.IntLiteral(0))),
						"formats":   ϒformats,
						"subtitles": ϒsubtitles,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       TVPlayIE_IE_NAME,
				"_VALID_URL":    TVPlayIE__VALID_URL,
				"_real_extract": TVPlayIE__real_extract,
			})
		}())
		ViafreeIE = λ.Cal(λ.TypeType, λ.StrLiteral("ViafreeIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ViafreeIE__VALID_URL λ.Object
				ViafreeIE_suitable   λ.Object
			)
			ViafreeIE__VALID_URL = λ.StrLiteral("(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    ")
			ViafreeIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Calm(TVPlayIE, "suitable", ϒurl)) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, ViafreeIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			ViafreeIE_suitable = λ.Cal(λ.ClassMethodType, ViafreeIE_suitable)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": ViafreeIE__VALID_URL,
				"suitable":   ViafreeIE_suitable,
			})
		}())
		TVPlayHomeIE = λ.Cal(λ.TypeType, λ.StrLiteral("TVPlayHomeIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TVPlayHomeIE__VALID_URL λ.Object
			)
			TVPlayHomeIE__VALID_URL = λ.StrLiteral("https?://(?:tv3?)?play\\.(?:tv3\\.lt|skaties\\.lv|tv3\\.ee)/(?:[^/]+/)*[^/?#&]+-(?P<id>\\d+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": TVPlayHomeIE__VALID_URL,
			})
		}())
	})
}
