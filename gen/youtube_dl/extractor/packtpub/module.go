// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * packtpub/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/packtpub.py
 */

package packtpub

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError     λ.Object
	InfoExtractor      λ.Object
	PacktPubBaseIE     λ.Object
	PacktPubCourseIE   λ.Object
	PacktPubIE         λ.Object
	ϒclean_html        λ.Object
	ϒcompat_HTTPError  λ.Object
	ϒstr_or_none       λ.Object
	ϒstrip_or_none     λ.Object
	ϒunified_timestamp λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ϒclean_html = Ωutils.ϒclean_html
		ExtractorError = Ωutils.ExtractorError
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		PacktPubBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("PacktPubBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {

			return λ.ClassDictLiteral(map[λ.Object]λ.Object{})
		}())
		PacktPubIE = λ.Cal(λ.TypeType, λ.StrLiteral("PacktPubIE"), λ.NewTuple(PacktPubBaseIE), func() λ.Dict {
			var (
				PacktPubIE__NETRC_MACHINE   λ.Object
				PacktPubIE__TOKEN           λ.Object
				PacktPubIE__VALID_URL       λ.Object
				PacktPubIE__real_extract    λ.Object
				PacktPubIE__real_initialize λ.Object
			)
			PacktPubIE__VALID_URL = λ.StrLiteral("https?://(?:(?:www\\.)?packtpub\\.com/mapt|subscription\\.packtpub\\.com)/video/[^/]+/(?P<course_id>\\d+)/(?P<chapter_id>[^/]+)/(?P<id>[^/]+)(?:/(?P<display_id>[^/?&#]+))?")
			PacktPubIE__NETRC_MACHINE = λ.StrLiteral("packtpub")
			PacktPubIE__TOKEN = λ.None
			PacktPubIE__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒmessage  λ.Object
						ϒpassword λ.Object
						ϒself     = λargs[0]
						ϒusername λ.Object
						τmp0      λ.Object
						τmp1      λ.Object
					)
					_ = τmp0
					_ = τmp1
					τmp0 = λ.Calm(ϒself, "_get_login_info")
					ϒusername = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒpassword = λ.GetItem(τmp0, λ.IntLiteral(1))
					if ϒusername == λ.None {
						return λ.None
					}
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								var ϒe λ.Object = λex
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), ϒcompat_HTTPError); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.NewBool(λ.Contains(λ.NewTuple(
											λ.IntLiteral(400),
											λ.IntLiteral(401),
											λ.IntLiteral(404),
										), λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil)))
									}
								}()) {
									ϒmessage = λ.GetItem(λ.Calm(ϒself, "_parse_json", λ.Calm(λ.Calm(λ.GetAttr(ϒe, "cause", nil), "read"), "decode"), λ.None), λ.StrLiteral("message"))
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(ϒmessage), λ.KWArgs{
										{Name: "expected", Value: λ.True},
									})))
								}
								panic(λ.Raise(λex))
							}},
						)
						λ.SetAttr(ϒself, "_TOKEN", λ.GetItem(λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.StrLiteral("https://services.packtpub.com/auth-v1/users/tokens"),
							λ.None,
							λ.StrLiteral("Downloading Authorization Token"),
						), λ.KWArgs{
							{Name: "data", Value: λ.Calm(λ.Cal(Ωjson.ϒdumps, λ.DictLiteral(map[string]λ.Object{
								"username": ϒusername,
								"password": ϒpassword,
							})), "encode")},
						}), λ.StrLiteral("data")), λ.StrLiteral("access")))
						return λ.BlockExitNormally, nil
					}()
					return λ.None
				})
			PacktPubIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒchapter_id λ.Object
						ϒcourse_id  λ.Object
						ϒdisplay_id λ.Object
						ϒheaders    λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒvideo_url  λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
					)
					_ = τmp0
					_ = τmp1
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒcourse_id = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒchapter_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒvideo_id = λ.GetItem(τmp0, λ.IntLiteral(2))
					ϒdisplay_id = λ.GetItem(τmp0, λ.IntLiteral(3))
					ϒheaders = λ.DictLiteral(map[λ.Object]λ.Object{})
					if λ.IsTrue(λ.GetAttr(ϒself, "_TOKEN", nil)) {
						λ.SetItem(ϒheaders, λ.StrLiteral("Authorization"), λ.Add(λ.StrLiteral("Bearer "), λ.GetAttr(ϒself, "_TOKEN", nil)))
					}
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								var ϒe λ.Object = λex
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), ϒcompat_HTTPError); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil), λ.IntLiteral(400))
									}
								}()) {
									λ.Calm(ϒself, "raise_login_required", λ.StrLiteral("This video is locked"))
								}
								panic(λ.Raise(λex))
							}},
						)
						ϒvideo_url = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Mod(λ.StrLiteral("https://services.packtpub.com/products-v1/products/%s/%s/%s"), λ.NewTuple(
								ϒcourse_id,
								ϒchapter_id,
								ϒvideo_id,
							)),
							ϒvideo_id,
							λ.StrLiteral("Downloading JSON video"),
						), λ.KWArgs{
							{Name: "headers", Value: ϒheaders},
						}), λ.StrLiteral("data"))
						return λ.BlockExitNormally, nil
					}()
					return λ.DictLiteral(map[string]λ.Object{
						"id":  ϒvideo_id,
						"url": ϒvideo_url,
						"title": func() λ.Object {
							if λv := ϒdisplay_id; λ.IsTrue(λv) {
								return λv
							} else {
								return ϒvideo_id
							}
						}(),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_NETRC_MACHINE":   PacktPubIE__NETRC_MACHINE,
				"_TOKEN":           PacktPubIE__TOKEN,
				"_VALID_URL":       PacktPubIE__VALID_URL,
				"_real_extract":    PacktPubIE__real_extract,
				"_real_initialize": PacktPubIE__real_initialize,
			})
		}())
		PacktPubCourseIE = λ.Cal(λ.TypeType, λ.StrLiteral("PacktPubCourseIE"), λ.NewTuple(PacktPubBaseIE), func() λ.Dict {
			var (
				PacktPubCourseIE__VALID_URL λ.Object
				PacktPubCourseIE_suitable   λ.Object
			)
			PacktPubCourseIE__VALID_URL = λ.StrLiteral("(?P<url>https?://(?:(?:www\\.)?packtpub\\.com/mapt|subscription\\.packtpub\\.com)/video/[^/]+/(?P<id>\\d+))")
			PacktPubCourseIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Calm(PacktPubIE, "suitable", ϒurl)) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, PacktPubCourseIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			PacktPubCourseIE_suitable = λ.Cal(λ.ClassMethodType, PacktPubCourseIE_suitable)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": PacktPubCourseIE__VALID_URL,
				"suitable":   PacktPubCourseIE_suitable,
			})
		}())
	})
}
