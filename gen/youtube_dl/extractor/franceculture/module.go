// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * franceculture/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/franceculture.py
 */

package franceculture

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	FranceCultureIE     λ.Object
	InfoExtractor       λ.Object
	ϒdetermine_ext      λ.Object
	ϒextract_attributes λ.Object
	ϒint_or_none        λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒextract_attributes = Ωutils.ϒextract_attributes
		ϒint_or_none = Ωutils.ϒint_or_none
		FranceCultureIE = λ.Cal(λ.TypeType, λ.StrLiteral("FranceCultureIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				FranceCultureIE__VALID_URL    λ.Object
				FranceCultureIE__real_extract λ.Object
			)
			FranceCultureIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?franceculture\\.fr/emissions/(?:[^/]+/)*(?P<id>[^/?#&]+)")
			FranceCultureIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription λ.Object
						ϒdisplay_id  λ.Object
						ϒext         λ.Object
						ϒself        = λargs[0]
						ϒthumbnail   λ.Object
						ϒtitle       λ.Object
						ϒuploader    λ.Object
						ϒurl         = λargs[1]
						ϒvideo_data  λ.Object
						ϒvideo_url   λ.Object
						ϒwebpage     λ.Object
					)
					ϒdisplay_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
					ϒvideo_data = λ.Cal(ϒextract_attributes, λ.Calm(ϒself, "_search_regex", λ.StrLiteral("(?sx)\n                (?:\n                    </h1>|\n                    <div[^>]+class=\"[^\"]*?(?:title-zone-diffusion|heading-zone-(?:wrapper|player-button))[^\"]*?\"[^>]*>\n                ).*?\n                (<button[^>]+data-asset-source=\"[^\"]+\"[^>]+>)\n            "), ϒwebpage, λ.StrLiteral("video data")))
					ϒvideo_url = λ.GetItem(ϒvideo_data, λ.StrLiteral("data-asset-source"))
					ϒtitle = func() λ.Object {
						if λv := λ.Calm(ϒvideo_data, "get", λ.StrLiteral("data-asset-title")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒself, "_og_search_title", ϒwebpage)
						}
					}()
					ϒdescription = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(?s)<div[^>]+class=\"intro\"[^>]*>.*?<h2>(.+?)</h2>"),
						ϒwebpage,
						λ.StrLiteral("description"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒthumbnail = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(?s)<figure[^>]+itemtype=\"https://schema.org/ImageObject\"[^>]*>.*?<img[^>]+(?:data-dejavu-)?src=\"([^\"]+)\""),
						ϒwebpage,
						λ.StrLiteral("thumbnail"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					ϒuploader = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(?s)<span class=\"author\">(.*?)</span>"),
						ϒwebpage,
						λ.StrLiteral("uploader"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒext = λ.Cal(ϒdetermine_ext, λ.Calm(ϒvideo_url, "lower"))
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒdisplay_id,
						"display_id":  ϒdisplay_id,
						"url":         ϒvideo_url,
						"title":       ϒtitle,
						"description": ϒdescription,
						"thumbnail":   ϒthumbnail,
						"ext":         ϒext,
						"vcodec": func() λ.Object {
							if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("mp3"))) {
								return λ.StrLiteral("none")
							} else {
								return λ.None
							}
						}(),
						"uploader":  ϒuploader,
						"timestamp": λ.Cal(ϒint_or_none, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("data-asset-created-date"))),
						"duration":  λ.Cal(ϒint_or_none, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("data-duration"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    FranceCultureIE__VALID_URL,
				"_real_extract": FranceCultureIE__real_extract,
			})
		}())
	})
}
