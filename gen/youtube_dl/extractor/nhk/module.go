// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * nhk/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/nhk.py
 */

package nhk

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor   λ.Object
	NhkBaseIE       λ.Object
	NhkVodIE        λ.Object
	NhkVodProgramIE λ.Object
	ϒurljoin        λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒurljoin = Ωutils.ϒurljoin
		NhkBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("NhkBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NhkBaseIE__API_URL_TEMPLATE     λ.Object
				NhkBaseIE__BASE_URL_REGEX       λ.Object
				NhkBaseIE__TYPE_REGEX           λ.Object
				NhkBaseIE__call_api             λ.Object
				NhkBaseIE__extract_episode_info λ.Object
			)
			NhkBaseIE__API_URL_TEMPLATE = λ.StrLiteral("https://api.nhk.or.jp/nhkworld/%sod%slist/v7a/%s/%s/%s/all%s.json")
			NhkBaseIE__BASE_URL_REGEX = λ.StrLiteral("https?://www3\\.nhk\\.or\\.jp/nhkworld/(?P<lang>[a-z]{2})/ondemand")
			NhkBaseIE__TYPE_REGEX = λ.StrLiteral("/(?P<type>video|audio)/")
			NhkBaseIE__call_api = λ.NewFunction("_call_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "m_id"},
					{Name: "lang"},
					{Name: "is_video"},
					{Name: "is_episode"},
					{Name: "is_clip"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒis_clip    = λargs[5]
						ϒis_episode = λargs[4]
						ϒis_video   = λargs[3]
						ϒlang       = λargs[2]
						ϒm_id       = λargs[1]
						ϒself       = λargs[0]
					)
					return func() λ.Object {
						if λv := λ.GetItem(λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
							λ.Mod(λ.GetAttr(ϒself, "_API_URL_TEMPLATE", nil), λ.NewTuple(
								func() λ.Object {
									if λ.IsTrue(ϒis_video) {
										return λ.StrLiteral("v")
									} else {
										return λ.StrLiteral("r")
									}
								}(),
								func() λ.Object {
									if λ.IsTrue(ϒis_clip) {
										return λ.StrLiteral("clip")
									} else {
										return λ.StrLiteral("esd")
									}
								}(),
								func() λ.Object {
									if λ.IsTrue(ϒis_episode) {
										return λ.StrLiteral("episode")
									} else {
										return λ.StrLiteral("program")
									}
								}(),
								ϒm_id,
								ϒlang,
								func() λ.Object {
									if λ.IsTrue(ϒis_video) {
										return λ.StrLiteral("/all")
									} else {
										return λ.StrLiteral("")
									}
								}(),
							)),
							ϒm_id,
						), λ.KWArgs{
							{Name: "query", Value: λ.DictLiteral(map[string]string{
								"apikey": "EJfK8jdS57GqlupFgAfAAwr573q01y6k",
							})},
						}), λ.StrLiteral("data")), λ.StrLiteral("episodes")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}()
				})
			NhkBaseIE__extract_episode_info = λ.NewFunction("_extract_episode_info",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
					{Name: "episode", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaudio_path      λ.Object
						ϒepisode         = λargs[2]
						ϒepisode_id      λ.Object
						ϒf               λ.Object
						ϒfetch_episode   λ.Object
						ϒget_clean_field λ.Object
						ϒh               λ.Object
						ϒimg_path        λ.Object
						ϒinfo            λ.Object
						ϒis_video        λ.Object
						ϒlang            λ.Object
						ϒm_type          λ.Object
						ϒs               λ.Object
						ϒself            = λargs[0]
						ϒseries          λ.Object
						ϒthumbnails      λ.Object
						ϒtitle           λ.Object
						ϒurl             = λargs[1]
						ϒvod_id          λ.Object
						ϒw               λ.Object
						τmp0             λ.Object
						τmp1             λ.Object
						τmp2             λ.Object
					)
					ϒfetch_episode = λ.NewBool(ϒepisode == λ.None)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(NhkVodIE, "_VALID_URL", nil), ϒurl), "groups")
					ϒlang = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒm_type = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒepisode_id = λ.GetItem(τmp0, λ.IntLiteral(2))
					if λ.IsTrue(λ.Calm(ϒepisode_id, "isdigit")) {
						ϒepisode_id = λ.Add(λ.Add(λ.GetItem(ϒepisode_id, λ.NewSlice(λ.None, λ.IntLiteral(4), λ.None)), λ.StrLiteral("-")), λ.GetItem(ϒepisode_id, λ.NewSlice(λ.IntLiteral(4), λ.None, λ.None)))
					}
					ϒis_video = λ.Eq(ϒm_type, λ.StrLiteral("video"))
					if λ.IsTrue(ϒfetch_episode) {
						ϒepisode = λ.GetItem(λ.Calm(ϒself, "_call_api", ϒepisode_id, ϒlang, ϒis_video, λ.True, λ.Eq(λ.GetItem(ϒepisode_id, λ.NewSlice(λ.None, λ.IntLiteral(4), λ.None)), λ.StrLiteral("9999"))), λ.IntLiteral(0))
					}
					ϒtitle = func() λ.Object {
						if λv := λ.Calm(ϒepisode, "get", λ.StrLiteral("sub_title_clean")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒepisode, λ.StrLiteral("sub_title"))
						}
					}()
					ϒget_clean_field = λ.NewFunction("get_clean_field",
						[]λ.Param{
							{Name: "key"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒkey = λargs[0]
							)
							return func() λ.Object {
								if λv := λ.Calm(ϒepisode, "get", λ.Add(ϒkey, λ.StrLiteral("_clean"))); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Calm(ϒepisode, "get", ϒkey)
								}
							}()
						})
					ϒseries = λ.Cal(ϒget_clean_field, λ.StrLiteral("title"))
					ϒthumbnails = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewList(
						λ.NewTuple(
							λ.StrLiteral(""),
							λ.IntLiteral(640),
							λ.IntLiteral(360),
						),
						λ.NewTuple(
							λ.StrLiteral("_l"),
							λ.IntLiteral(1280),
							λ.IntLiteral(720),
						),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒs = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒw = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒh = λ.GetItem(τmp2, λ.IntLiteral(2))
						ϒimg_path = λ.Calm(ϒepisode, "get", λ.Add(λ.StrLiteral("image"), ϒs))
						if !λ.IsTrue(ϒimg_path) {
							continue
						}
						λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
							"id":     λ.Mod(λ.StrLiteral("%dp"), ϒh),
							"height": ϒh,
							"width":  ϒw,
							"url":    λ.Add(λ.StrLiteral("https://www3.nhk.or.jp"), ϒimg_path),
						}))
					}
					ϒinfo = λ.DictLiteral(map[string]λ.Object{
						"id": λ.Add(λ.Add(ϒepisode_id, λ.StrLiteral("-")), ϒlang),
						"title": func() λ.Object {
							if λ.IsTrue(func() λ.Object {
								if λv := ϒseries; !λ.IsTrue(λv) {
									return λv
								} else {
									return ϒtitle
								}
							}()) {
								return λ.Mod(λ.StrLiteral("%s - %s"), λ.NewTuple(
									ϒseries,
									ϒtitle,
								))
							} else {
								return ϒtitle
							}
						}(),
						"description": λ.Cal(ϒget_clean_field, λ.StrLiteral("description")),
						"thumbnails":  ϒthumbnails,
						"series":      ϒseries,
						"episode":     ϒtitle,
					})
					if λ.IsTrue(ϒis_video) {
						ϒvod_id = λ.GetItem(ϒepisode, λ.StrLiteral("vod_id"))
						λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
							"_type":  λ.StrLiteral("url_transparent"),
							"ie_key": λ.StrLiteral("Piksel"),
							"url":    λ.Add(λ.StrLiteral("https://player.piksel.com/v/refid/nhkworld/prefid/"), ϒvod_id),
							"id":     ϒvod_id,
						}))
					} else {
						if λ.IsTrue(ϒfetch_episode) {
							ϒaudio_path = λ.GetItem(λ.GetItem(ϒepisode, λ.StrLiteral("audio")), λ.StrLiteral("audio"))
							λ.SetItem(ϒinfo, λ.StrLiteral("formats"), λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								λ.Mod(λ.StrLiteral("https://nhkworld-vh.akamaihd.net/i%s/master.m3u8"), ϒaudio_path),
								ϒepisode_id,
								λ.StrLiteral("m4a"),
							), λ.KWArgs{
								{Name: "entry_protocol", Value: λ.StrLiteral("m3u8_native")},
								{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
								{Name: "fatal", Value: λ.False},
							}))
							τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒinfo, λ.StrLiteral("formats")))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒf = τmp1
								λ.SetItem(ϒf, λ.StrLiteral("language"), ϒlang)
							}
						} else {
							λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
								"_type":  λ.StrLiteral("url_transparent"),
								"ie_key": λ.Calm(NhkVodIE, "ie_key"),
								"url":    ϒurl,
							}))
						}
					}
					return ϒinfo
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_API_URL_TEMPLATE":     NhkBaseIE__API_URL_TEMPLATE,
				"_BASE_URL_REGEX":       NhkBaseIE__BASE_URL_REGEX,
				"_TYPE_REGEX":           NhkBaseIE__TYPE_REGEX,
				"_call_api":             NhkBaseIE__call_api,
				"_extract_episode_info": NhkBaseIE__extract_episode_info,
			})
		}())
		NhkVodIE = λ.Cal(λ.TypeType, λ.StrLiteral("NhkVodIE"), λ.NewTuple(NhkBaseIE), func() λ.Dict {
			var (
				NhkVodIE__VALID_URL    λ.Object
				NhkVodIE__real_extract λ.Object
			)
			NhkVodIE__VALID_URL = λ.Mod(λ.StrLiteral("%s%s(?P<id>\\d{7}|[^/]+?-\\d{8}-[0-9a-z]+)"), λ.NewTuple(
				λ.GetAttr(NhkBaseIE, "_BASE_URL_REGEX", nil),
				λ.GetAttr(NhkBaseIE, "_TYPE_REGEX", nil),
			))
			NhkVodIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
						ϒurl  = λargs[1]
					)
					return λ.Calm(ϒself, "_extract_episode_info", ϒurl)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    NhkVodIE__VALID_URL,
				"_real_extract": NhkVodIE__real_extract,
			})
		}())
		NhkVodProgramIE = λ.Cal(λ.TypeType, λ.StrLiteral("NhkVodProgramIE"), λ.NewTuple(NhkBaseIE), func() λ.Dict {
			var (
				NhkVodProgramIE__VALID_URL λ.Object
			)
			NhkVodProgramIE__VALID_URL = λ.Mod(λ.StrLiteral("%s/program%s(?P<id>[0-9a-z]+)(?:.+?\\btype=(?P<episode_type>clip|(?:radio|tv)Episode))?"), λ.NewTuple(
				λ.GetAttr(NhkBaseIE, "_BASE_URL_REGEX", nil),
				λ.GetAttr(NhkBaseIE, "_TYPE_REGEX", nil),
			))
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": NhkVodProgramIE__VALID_URL,
			})
		}())
	})
}
