// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * svt/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/svt.py
 */

package svt

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	SVTBaseIE          λ.Object
	SVTIE              λ.Object
	SVTPageIE          λ.Object
	SVTPlayBaseIE      λ.Object
	SVTPlayIE          λ.Object
	SVTSeriesIE        λ.Object
	ϒcompat_str        λ.Object
	ϒdetermine_ext     λ.Object
	ϒdict_get          λ.Object
	ϒint_or_none       λ.Object
	ϒstr_or_none       λ.Object
	ϒstrip_or_none     λ.Object
	ϒtry_get           λ.Object
	ϒunified_timestamp λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒdict_get = Ωutils.ϒdict_get
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒtry_get = Ωutils.ϒtry_get
		SVTBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("SVTBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {

			return λ.ClassDictLiteral(map[λ.Object]λ.Object{})
		}())
		SVTIE = λ.Cal(λ.TypeType, λ.StrLiteral("SVTIE"), λ.NewTuple(SVTBaseIE), func() λ.Dict {
			var (
				SVTIE__VALID_URL λ.Object
			)
			SVTIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?svt\\.se/wd\\?(?:.*?&)?widgetId=(?P<widget_id>\\d+)&.*?\\barticleId=(?P<id>\\d+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": SVTIE__VALID_URL,
			})
		}())
		SVTPlayBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("SVTPlayBaseIE"), λ.NewTuple(SVTBaseIE), func() λ.Dict {

			return λ.ClassDictLiteral(map[λ.Object]λ.Object{})
		}())
		SVTPlayIE = λ.Cal(λ.TypeType, λ.StrLiteral("SVTPlayIE"), λ.NewTuple(SVTPlayBaseIE), func() λ.Dict {
			var (
				SVTPlayIE__VALID_URL λ.Object
			)
			SVTPlayIE__VALID_URL = λ.StrLiteral("(?x)\n                    (?:\n                        (?:\n                            svt:|\n                            https?://(?:www\\.)?svt\\.se/barnkanalen/barnplay/[^/]+/\n                        )\n                        (?P<svt_id>[^/?#&]+)|\n                        https?://(?:www\\.)?(?:svtplay|oppetarkiv)\\.se/(?:video|klipp|kanaler)/(?P<id>[^/?#&]+)\n                        (?:.*?(?:modalId|id)=(?P<modal_id>[\\da-zA-Z-]+))?\n                    )\n                    ")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": SVTPlayIE__VALID_URL,
			})
		}())
		SVTSeriesIE = λ.Cal(λ.TypeType, λ.StrLiteral("SVTSeriesIE"), λ.NewTuple(SVTPlayBaseIE), func() λ.Dict {
			var (
				SVTSeriesIE__VALID_URL λ.Object
				SVTSeriesIE_suitable   λ.Object
			)
			SVTSeriesIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?svtplay\\.se/(?P<id>[^/?&#]+)(?:.+?\\btab=(?P<season_slug>[^&#]+))?")
			SVTSeriesIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Calm(SVTIE, "suitable", ϒurl); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(SVTPlayIE, "suitable", ϒurl)
							}
						}()) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, SVTSeriesIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			SVTSeriesIE_suitable = λ.Cal(λ.ClassMethodType, SVTSeriesIE_suitable)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": SVTSeriesIE__VALID_URL,
				"suitable":   SVTSeriesIE_suitable,
			})
		}())
		SVTPageIE = λ.Cal(λ.TypeType, λ.StrLiteral("SVTPageIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SVTPageIE__VALID_URL λ.Object
				SVTPageIE_suitable   λ.Object
			)
			SVTPageIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?svt\\.se/(?P<path>(?:[^/]+/)*(?P<id>[^/?&#]+))")
			SVTPageIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Calm(SVTIE, "suitable", ϒurl); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(SVTPlayIE, "suitable", ϒurl)
							}
						}()) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, SVTPageIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			SVTPageIE_suitable = λ.Cal(λ.ClassMethodType, SVTPageIE_suitable)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": SVTPageIE__VALID_URL,
				"suitable":   SVTPageIE_suitable,
			})
		}())
	})
}
