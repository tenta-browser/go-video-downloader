// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * stitcher/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/stitcher.py
 */

package stitcher

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	StitcherIE     λ.Object
	ϒclean_html    λ.Object
	ϒint_or_none   λ.Object
	ϒstr_or_none   λ.Object
	ϒtry_get       λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒclean_html = Ωutils.ϒclean_html
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒtry_get = Ωutils.ϒtry_get
		StitcherIE = λ.Cal(λ.TypeType, λ.StrLiteral("StitcherIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				StitcherIE__VALID_URL    λ.Object
				StitcherIE__real_extract λ.Object
			)
			StitcherIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?stitcher\\.com/(?:podcast|show)/(?:[^/]+/)+e(?:pisode)?/(?:(?P<display_id>[^/#?&]+?)-)?(?P<id>\\d+)(?:[/#?&]|$)")
			StitcherIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaudio_id   λ.Object
						ϒaudio_url  λ.Object
						ϒdisplay_id λ.Object
						ϒepisode    λ.Object
						ϒresp       λ.Object
						ϒself       = λargs[0]
						ϒshow_id    λ.Object
						ϒthumbnail  λ.Object
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						τmp0        λ.Object
					)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒdisplay_id = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒaudio_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒresp = λ.Calm(ϒself, "_download_json", λ.Add(λ.StrLiteral("https://api.prod.stitcher.com/episode/"), ϒaudio_id), func() λ.Object {
						if λv := ϒdisplay_id; λ.IsTrue(λv) {
							return λv
						} else {
							return ϒaudio_id
						}
					}())
					ϒepisode = λ.Cal(ϒtry_get, ϒresp, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("data")), λ.StrLiteral("episodes")), λ.IntLiteral(0))
						}), λ.DictType)
					if !λ.IsTrue(ϒepisode) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.GetItem(λ.GetItem(λ.GetItem(ϒresp, λ.StrLiteral("errors")), λ.IntLiteral(0)), λ.StrLiteral("message"))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒtitle = λ.Calm(λ.GetItem(ϒepisode, λ.StrLiteral("title")), "strip")
					ϒaudio_url = λ.GetItem(ϒepisode, λ.StrLiteral("audio_url"))
					ϒthumbnail = λ.None
					ϒshow_id = λ.Calm(ϒepisode, "get", λ.StrLiteral("show_id"))
					if λ.IsTrue(func() λ.Object {
						if λv := ϒshow_id; !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Ne(λ.Calm(ϒepisode, "get", λ.StrLiteral("classic_id")), λ.Neg(λ.IntLiteral(1)))
						}
					}()) {
						ϒthumbnail = λ.Mod(λ.StrLiteral("https://stitcher-classic.imgix.net/feedimages/%s.jpg"), ϒshow_id)
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":         ϒaudio_id,
						"display_id": ϒdisplay_id,
						"title":      ϒtitle,
						"description": λ.Cal(ϒclean_html, func() λ.Object {
							if λv := λ.Calm(ϒepisode, "get", λ.StrLiteral("html_description")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒepisode, "get", λ.StrLiteral("description"))
							}
						}()),
						"duration":      λ.Cal(ϒint_or_none, λ.Calm(ϒepisode, "get", λ.StrLiteral("duration"))),
						"thumbnail":     ϒthumbnail,
						"url":           ϒaudio_url,
						"vcodec":        λ.StrLiteral("none"),
						"timestamp":     λ.Cal(ϒint_or_none, λ.Calm(ϒepisode, "get", λ.StrLiteral("date_created"))),
						"season_number": λ.Cal(ϒint_or_none, λ.Calm(ϒepisode, "get", λ.StrLiteral("season"))),
						"season_id":     λ.Cal(ϒstr_or_none, λ.Calm(ϒepisode, "get", λ.StrLiteral("season_id"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    StitcherIE__VALID_URL,
				"_real_extract": StitcherIE__real_extract,
			})
		}())
	})
}
