// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * veoh/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/veoh.py
 */

package veoh

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor   λ.Object
	VeohIE          λ.Object
	ϒint_or_none    λ.Object
	ϒparse_duration λ.Object
	ϒqualities      λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒqualities = Ωutils.ϒqualities
		VeohIE = λ.Cal(λ.TypeType, λ.StrLiteral("VeohIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VeohIE__VALID_URL    λ.Object
				VeohIE__real_extract λ.Object
			)
			VeohIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?veoh\\.com/(?:watch|embed|iphone/#_Watch)/(?P<id>(?:v|e|yapi-)[\\da-zA-Z]+)")
			VeohIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒf_id          λ.Object
						ϒf_url         λ.Object
						ϒformats       λ.Object
						ϒq             λ.Object
						ϒself          = λargs[0]
						ϒthumbnail_url λ.Object
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						ϒvideo         λ.Object
						ϒvideo_id      λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒvideo = λ.GetItem(λ.Calm(ϒself, "_download_json", λ.Add(λ.StrLiteral("https://www.veoh.com/watch/getVideo/"), ϒvideo_id), ϒvideo_id), λ.StrLiteral("video"))
					ϒtitle = λ.GetItem(ϒvideo, λ.StrLiteral("title"))
					ϒthumbnail_url = λ.None
					ϒq = λ.Cal(ϒqualities, λ.NewList(
						λ.StrLiteral("HQ"),
						λ.StrLiteral("Regular"),
					))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.Calm(ϒvideo, "get", λ.StrLiteral("src"), λ.DictLiteral(map[λ.Object]λ.Object{})), "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = λ.UnpackIterable(τmp1, 2)
						ϒf_id = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒf_url = λ.GetItem(τmp2, λ.IntLiteral(1))
						if !λ.IsTrue(ϒf_url) {
							continue
						}
						if λ.IsTrue(λ.Eq(ϒf_id, λ.StrLiteral("poster"))) {
							ϒthumbnail_url = ϒf_url
						} else {
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"format_id": ϒf_id,
								"quality":   λ.Cal(ϒq, ϒf_id),
								"url":       ϒf_url,
							}))
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": λ.Calm(ϒvideo, "get", λ.StrLiteral("description")),
						"thumbnail":   ϒthumbnail_url,
						"uploader":    λ.Calm(λ.Calm(ϒvideo, "get", λ.StrLiteral("author"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("nickname")),
						"duration": func() λ.Object {
							if λv := λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("lengthBySec"))); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(ϒparse_duration, λ.Calm(ϒvideo, "get", λ.StrLiteral("length")))
							}
						}(),
						"view_count":     λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("views"))),
						"formats":        ϒformats,
						"average_rating": λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("rating"))),
						"comment_count":  λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("numOfComments"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    VeohIE__VALID_URL,
				"_real_extract": VeohIE__real_extract,
			})
		}())
	})
}
