// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * teamtreehouse/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/teamtreehouse.py
 */

package teamtreehouse

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError        λ.Object
	InfoExtractor         λ.Object
	TeamTreeHouseIE       λ.Object
	ϒclean_html           λ.Object
	ϒdetermine_ext        λ.Object
	ϒfloat_or_none        λ.Object
	ϒget_element_by_class λ.Object
	ϒget_element_by_id    λ.Object
	ϒparse_duration       λ.Object
	ϒremove_end           λ.Object
	ϒurlencode_postdata   λ.Object
	ϒurljoin              λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒclean_html = Ωutils.ϒclean_html
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒget_element_by_class = Ωutils.ϒget_element_by_class
		ϒget_element_by_id = Ωutils.ϒget_element_by_id
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒremove_end = Ωutils.ϒremove_end
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		ϒurljoin = Ωutils.ϒurljoin
		TeamTreeHouseIE = λ.Cal(λ.TypeType, λ.StrLiteral("TeamTreeHouseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TeamTreeHouseIE__NETRC_MACHINE   λ.Object
				TeamTreeHouseIE__VALID_URL       λ.Object
				TeamTreeHouseIE__real_extract    λ.Object
				TeamTreeHouseIE__real_initialize λ.Object
			)
			TeamTreeHouseIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?teamtreehouse\\.com/library/(?P<id>[^/]+)")
			TeamTreeHouseIE__NETRC_MACHINE = λ.StrLiteral("teamtreehouse")
			TeamTreeHouseIE__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata          λ.Object
						ϒemail         λ.Object
						ϒerror_message λ.Object
						ϒpassword      λ.Object
						ϒself          = λargs[0]
						ϒsignin_page   λ.Object
						τmp0           λ.Object
					)
					τmp0 = λ.UnpackIterable(λ.Calm(ϒself, "_get_login_info"), 2)
					ϒemail = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒpassword = λ.GetItem(τmp0, λ.IntLiteral(1))
					if ϒemail == λ.None {
						return λ.None
					}
					ϒsignin_page = λ.Calm(ϒself, "_download_webpage", λ.StrLiteral("https://teamtreehouse.com/signin"), λ.None, λ.StrLiteral("Downloading signin page"))
					ϒdata = λ.Calm(ϒself, "_form_hidden_inputs", λ.StrLiteral("new_user_session"), ϒsignin_page)
					λ.Calm(ϒdata, "update", λ.DictLiteral(map[string]λ.Object{
						"user_session[email]":    ϒemail,
						"user_session[password]": ϒpassword,
					}))
					ϒerror_message = λ.Cal(ϒget_element_by_class, λ.StrLiteral("error-message"), λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.StrLiteral("https://teamtreehouse.com/person_session"),
						λ.None,
						λ.StrLiteral("Logging in"),
					), λ.KWArgs{
						{Name: "data", Value: λ.Cal(ϒurlencode_postdata, ϒdata)},
					}))
					if λ.IsTrue(ϒerror_message) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Cal(ϒclean_html, ϒerror_message)), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					return λ.None
				})
			TeamTreeHouseIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒchapter         λ.Object
						ϒchapter_number  λ.Object
						ϒdescription     λ.Object
						ϒdisplay_id      λ.Object
						ϒduration        λ.Object
						ϒentries         λ.Object
						ϒextract_urls    λ.Object
						ϒinfo            λ.Object
						ϒis_preview      λ.Object
						ϒself            = λargs[0]
						ϒstages_page     λ.Object
						ϒstages_path     λ.Object
						ϒsteps_list      λ.Object
						ϒsubtitle        λ.Object
						ϒsubtitles       λ.Object
						ϒtitle           λ.Object
						ϒurl             = λargs[1]
						ϒwebpage         λ.Object
						ϒworkshop_videos λ.Object
						τmp0             λ.Object
						τmp1             λ.Object
						τmp2             λ.Object
						τmp3             λ.Object
					)
					ϒdisplay_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
					ϒtitle = λ.Calm(ϒself, "_html_search_meta", λ.NewList(
						λ.StrLiteral("og:title"),
						λ.StrLiteral("twitter:title"),
					), ϒwebpage)
					ϒdescription = λ.Calm(ϒself, "_html_search_meta", λ.NewList(
						λ.StrLiteral("description"),
						λ.StrLiteral("og:description"),
						λ.StrLiteral("twitter:description"),
					), ϒwebpage)
					ϒentries = λ.Calm(ϒself, "_parse_html5_media_entries", ϒurl, ϒwebpage, ϒdisplay_id)
					if λ.IsTrue(ϒentries) {
						ϒinfo = λ.GetItem(ϒentries, λ.IntLiteral(0))
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.Calm(ϒinfo, "get", λ.StrLiteral("subtitles"), λ.DictLiteral(map[λ.Object]λ.Object{})), "values"))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒsubtitles = τmp1
							τmp2 = λ.Cal(λ.BuiltinIter, ϒsubtitles)
							for {
								if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
									break
								}
								ϒsubtitle = τmp3
								λ.SetItem(ϒsubtitle, λ.StrLiteral("ext"), λ.Cal(ϒdetermine_ext, λ.GetItem(ϒsubtitle, λ.StrLiteral("url")), λ.StrLiteral("srt")))
							}
						}
						ϒis_preview = λ.NewBool(λ.Contains(ϒwebpage, λ.StrLiteral("data-preview=\"true\"")))
						if λ.IsTrue(ϒis_preview) {
							λ.Calm(ϒself, "report_warning", λ.StrLiteral("This is just a preview. You need to be signed in with a Basic account to download the entire video."), ϒdisplay_id)
							ϒduration = λ.IntLiteral(30)
						} else {
							ϒduration = λ.Cal(ϒfloat_or_none, λ.Calm(ϒself, "_search_regex", λ.StrLiteral("data-duration=\"(\\d+)\""), ϒwebpage, λ.StrLiteral("duration")), λ.IntLiteral(1000))
							if !λ.IsTrue(ϒduration) {
								ϒduration = λ.Cal(ϒparse_duration, λ.Cal(ϒget_element_by_id, λ.StrLiteral("video-duration"), ϒwebpage))
							}
						}
						λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
							"id":          ϒdisplay_id,
							"title":       ϒtitle,
							"description": ϒdescription,
							"duration":    ϒduration,
						}))
						return ϒinfo
					} else {
						ϒextract_urls = λ.NewFunction("extract_urls",
							[]λ.Param{
								{Name: "html"},
								{Name: "extract_info", Def: λ.None},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒentry        λ.Object
									ϒextract_info = λargs[1]
									ϒhtml         = λargs[0]
									ϒpage_url     λ.Object
									ϒpath         λ.Object
									τmp0          λ.Object
									τmp1          λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.StrLiteral("<a[^>]+href=\"([^\"]+)\""), ϒhtml))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒpath = τmp1
									ϒpage_url = λ.Cal(ϒurljoin, ϒurl, ϒpath)
									ϒentry = λ.DictLiteral(map[string]λ.Object{
										"_type":  λ.StrLiteral("url_transparent"),
										"id":     λ.Calm(ϒself, "_match_id", ϒpage_url),
										"url":    ϒpage_url,
										"id_key": λ.Calm(ϒself, "ie_key"),
									})
									if λ.IsTrue(ϒextract_info) {
										λ.Calm(ϒentry, "update", ϒextract_info)
									}
									λ.Calm(ϒentries, "append", ϒentry)
								}
								return λ.None
							})
						ϒworkshop_videos = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("(?s)<ul[^>]+id=\"workshop-videos\"[^>]*>(.+?)</ul>"),
							ϒwebpage,
							λ.StrLiteral("workshop videos"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(ϒworkshop_videos) {
							λ.Cal(ϒextract_urls, ϒworkshop_videos)
						} else {
							ϒstages_path = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("(?s)<div[^>]+id=\"syllabus-stages\"[^>]+data-url=\"([^\"]+)\""), ϒwebpage, λ.StrLiteral("stages path"))
							if λ.IsTrue(ϒstages_path) {
								ϒstages_page = λ.Calm(ϒself, "_download_webpage", λ.Cal(ϒurljoin, ϒurl, ϒstages_path), ϒdisplay_id, λ.StrLiteral("Downloading stages page"))
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.EnumerateIteratorType, λ.Cal(Ωre.ϒfindall, λ.StrLiteral("(?s)<h2[^>]*>\\s*(.+?)\\s*</h2>.+?<ul[^>]*>(.+?)</ul>"), ϒstages_page), λ.IntLiteral(1)))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									τmp2 = λ.UnpackIterable(τmp1, 2)
									ϒchapter_number = λ.GetItem(τmp2, λ.IntLiteral(0))
									τmp3 = λ.UnpackIterable(λ.GetItem(τmp2, λ.IntLiteral(1)), 2)
									ϒchapter = λ.GetItem(τmp3, λ.IntLiteral(0))
									ϒsteps_list = λ.GetItem(τmp3, λ.IntLiteral(1))
									λ.Cal(ϒextract_urls, ϒsteps_list, λ.DictLiteral(map[string]λ.Object{
										"chapter":        ϒchapter,
										"chapter_number": ϒchapter_number,
									}))
								}
								ϒtitle = λ.Cal(ϒremove_end, ϒtitle, λ.StrLiteral(" Course"))
							}
						}
						return λ.Calm(ϒself, "playlist_result", ϒentries, ϒdisplay_id, ϒtitle, ϒdescription)
					}
					return λ.None
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_NETRC_MACHINE":   TeamTreeHouseIE__NETRC_MACHINE,
				"_VALID_URL":       TeamTreeHouseIE__VALID_URL,
				"_real_extract":    TeamTreeHouseIE__real_extract,
				"_real_initialize": TeamTreeHouseIE__real_initialize,
			})
		}())
	})
}
