// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * nhl/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/nhl.py
 */

package nhl

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor   λ.Object
	NHLBaseIE       λ.Object
	NHLIE           λ.Object
	ϒcompat_str     λ.Object
	ϒdetermine_ext  λ.Object
	ϒint_or_none    λ.Object
	ϒparse_duration λ.Object
	ϒparse_iso8601  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒparse_duration = Ωutils.ϒparse_duration
		NHLBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("NHLBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NHLBaseIE__real_extract λ.Object
			)
			NHLBaseIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcuts           λ.Object
						ϒext            λ.Object
						ϒformats        λ.Object
						ϒheight         λ.Object
						ϒm3u8_formats   λ.Object
						ϒplayback       λ.Object
						ϒplayback_url   λ.Object
						ϒself           = λargs[0]
						ϒsite           λ.Object
						ϒthumbnail_data λ.Object
						ϒthumbnail_url  λ.Object
						ϒthumbnails     λ.Object
						ϒtitle          λ.Object
						ϒtmp_id         λ.Object
						ϒurl            = λargs[1]
						ϒvideo          λ.Object
						ϒvideo_data     λ.Object
						ϒvideo_id       λ.Object
						ϒvideos         λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
					)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒsite = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒtmp_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒvideo_data = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("https://%s/%s/%sid/v1/%s/details/web-v1.json"), λ.NewTuple(
						λ.GetAttr(ϒself, "_CONTENT_DOMAIN", nil),
						λ.GetItem(ϒsite, λ.NewSlice(λ.None, λ.IntLiteral(3), λ.None)),
						func() λ.Object {
							if λ.IsTrue(λ.Eq(ϒsite, λ.StrLiteral("mlb"))) {
								return λ.StrLiteral("item/")
							} else {
								return λ.StrLiteral("")
							}
						}(),
						ϒtmp_id,
					)), ϒtmp_id)
					if λ.IsTrue(λ.Ne(λ.Calm(ϒvideo_data, "get", λ.StrLiteral("type")), λ.StrLiteral("video"))) {
						ϒvideo_data = λ.GetItem(ϒvideo_data, λ.StrLiteral("media"))
						ϒvideo = λ.Calm(ϒvideo_data, "get", λ.StrLiteral("video"))
						if λ.IsTrue(ϒvideo) {
							ϒvideo_data = ϒvideo
						} else {
							ϒvideos = λ.Calm(ϒvideo_data, "get", λ.StrLiteral("videos"))
							if λ.IsTrue(ϒvideos) {
								ϒvideo_data = λ.GetItem(ϒvideos, λ.IntLiteral(0))
							}
						}
					}
					ϒvideo_id = λ.Cal(ϒcompat_str, λ.GetItem(ϒvideo_data, λ.StrLiteral("id")))
					ϒtitle = λ.GetItem(ϒvideo_data, λ.StrLiteral("title"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("playbacks"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒplayback = τmp1
						ϒplayback_url = λ.Calm(ϒplayback, "get", λ.StrLiteral("url"))
						if !λ.IsTrue(ϒplayback_url) {
							continue
						}
						ϒext = λ.Cal(ϒdetermine_ext, ϒplayback_url)
						if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("m3u8"))) {
							ϒm3u8_formats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒplayback_url,
								ϒvideo_id,
								λ.StrLiteral("mp4"),
								λ.StrLiteral("m3u8_native"),
							), λ.KWArgs{
								{Name: "m3u8_id", Value: λ.Calm(ϒplayback, "get", λ.StrLiteral("name"), λ.StrLiteral("hls"))},
								{Name: "fatal", Value: λ.False},
							})
							λ.Calm(ϒself, "_check_formats", ϒm3u8_formats, ϒvideo_id)
							λ.Calm(ϒformats, "extend", ϒm3u8_formats)
						} else {
							ϒheight = λ.Cal(ϒint_or_none, λ.Calm(ϒplayback, "get", λ.StrLiteral("height")))
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"format_id": λ.Calm(ϒplayback, "get", λ.StrLiteral("name"), λ.Add(λ.StrLiteral("http"), func() λ.Object {
									if λ.IsTrue(ϒheight) {
										return λ.Mod(λ.StrLiteral("-%dp"), ϒheight)
									} else {
										return λ.StrLiteral("")
									}
								}())),
								"url":    ϒplayback_url,
								"width":  λ.Cal(ϒint_or_none, λ.Calm(ϒplayback, "get", λ.StrLiteral("width"))),
								"height": ϒheight,
								"tbr": λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.StrLiteral("_(\\d+)[kK]"),
									ϒplayback_url,
									λ.StrLiteral("bitrate"),
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
								})),
							}))
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒthumbnails = λ.NewList()
					ϒcuts = func() λ.Object {
						if λv := λ.Calm(λ.Calm(ϒvideo_data, "get", λ.StrLiteral("image"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("cuts")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}()
					if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒcuts, λ.DictType)) {
						ϒcuts = λ.Calm(ϒcuts, "values")
					}
					τmp0 = λ.Cal(λ.BuiltinIter, ϒcuts)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒthumbnail_data = τmp1
						ϒthumbnail_url = λ.Calm(ϒthumbnail_data, "get", λ.StrLiteral("src"))
						if !λ.IsTrue(ϒthumbnail_url) {
							continue
						}
						λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
							"url":    ϒthumbnail_url,
							"width":  λ.Cal(ϒint_or_none, λ.Calm(ϒthumbnail_data, "get", λ.StrLiteral("width"))),
							"height": λ.Cal(ϒint_or_none, λ.Calm(ϒthumbnail_data, "get", λ.StrLiteral("height"))),
						}))
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": λ.Calm(ϒvideo_data, "get", λ.StrLiteral("description")),
						"timestamp":   λ.Cal(ϒparse_iso8601, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("date"))),
						"duration":    λ.Cal(ϒparse_duration, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("duration"))),
						"thumbnails":  ϒthumbnails,
						"formats":     ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_real_extract": NHLBaseIE__real_extract,
			})
		}())
		NHLIE = λ.Cal(λ.TypeType, λ.StrLiteral("NHLIE"), λ.NewTuple(NHLBaseIE), func() λ.Dict {
			var (
				NHLIE__VALID_URL λ.Object
			)
			NHLIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?(?P<site>nhl|wch2016)\\.com/(?:[^/]+/)*c-(?P<id>\\d+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": NHLIE__VALID_URL,
			})
		}())
	})
}
