// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * servus/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/servus.py
 */

package servus

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor       λ.Object
	ServusIE            λ.Object
	ϒdetermine_ext      λ.Object
	ϒfloat_or_none      λ.Object
	ϒint_or_none        λ.Object
	ϒunified_timestamp  λ.Object
	ϒurl_or_none        λ.Object
	ϒurlencode_postdata λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		ϒurl_or_none = Ωutils.ϒurl_or_none
		ServusIE = λ.Cal(λ.TypeType, λ.StrLiteral("ServusIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ServusIE__VALID_URL    λ.Object
				ServusIE__real_extract λ.Object
			)
			ServusIE__VALID_URL = λ.StrLiteral("(?x)\n                    https?://\n                        (?:www\\.)?\n                        (?:\n                            servus\\.com/(?:(?:at|de)/p/[^/]+|tv/videos)|\n                            (?:servustv|pm-wissen)\\.com/videos\n                        )\n                        /(?P<id>[aA]{2}-\\w+|\\d+-\\d+)\n                    ")
			ServusIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaccess_token   λ.Object
						ϒalt_title      λ.Object
						ϒattribute      λ.Object
						ϒattrs          λ.Object
						ϒdescription    λ.Object
						ϒduration       λ.Object
						ϒepisode        λ.Object
						ϒepisode_number λ.Object
						ϒext            λ.Object
						ϒextension      λ.Object
						ϒformat_url     λ.Object
						ϒformats        λ.Object
						ϒkey            λ.Object
						ϒresource       λ.Object
						ϒseason         λ.Object
						ϒseason_number  λ.Object
						ϒself           = λargs[0]
						ϒseries         λ.Object
						ϒthumbnail      λ.Object
						ϒtitle          λ.Object
						ϒtoken          λ.Object
						ϒtoken_type     λ.Object
						ϒtype_          λ.Object
						ϒurl            = λargs[1]
						ϒvalue          λ.Object
						ϒvideo          λ.Object
						ϒvideo_id       λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
					)
					ϒvideo_id = λ.Calm(λ.Calm(ϒself, "_match_id", ϒurl), "upper")
					ϒtoken = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("https://auth.redbullmediahouse.com/token"),
						ϒvideo_id,
						λ.StrLiteral("Downloading token"),
					), λ.KWArgs{
						{Name: "data", Value: λ.Cal(ϒurlencode_postdata, λ.DictLiteral(map[string]string{
							"grant_type": "client_credentials",
						}))},
						{Name: "headers", Value: λ.DictLiteral(map[string]string{
							"Authorization": "Basic SVgtMjJYNEhBNFdEM1cxMTpEdDRVSkFLd2ZOMG5IMjB1NGFBWTBmUFpDNlpoQ1EzNA==",
						})},
					})
					ϒaccess_token = λ.GetItem(ϒtoken, λ.StrLiteral("access_token"))
					ϒtoken_type = λ.Calm(ϒtoken, "get", λ.StrLiteral("token_type"), λ.StrLiteral("Bearer"))
					ϒvideo = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("https://sparkle-api.liiift.io/api/v1/stv/channels/international/assets/%s"), ϒvideo_id),
						ϒvideo_id,
						λ.StrLiteral("Downloading video JSON"),
					), λ.KWArgs{
						{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
							"Authorization": λ.Mod(λ.StrLiteral("%s %s"), λ.NewTuple(
								ϒtoken_type,
								ϒaccess_token,
							)),
						})},
					})
					ϒformats = λ.NewList()
					ϒthumbnail = λ.None
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒvideo, λ.StrLiteral("resources")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒresource = τmp1
						if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒresource, λ.DictType)) {
							continue
						}
						ϒformat_url = λ.Cal(ϒurl_or_none, λ.Calm(ϒresource, "get", λ.StrLiteral("url")))
						if !λ.IsTrue(ϒformat_url) {
							continue
						}
						ϒextension = λ.Calm(ϒresource, "get", λ.StrLiteral("extension"))
						ϒtype_ = λ.Calm(ϒresource, "get", λ.StrLiteral("type"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒextension, λ.StrLiteral("jpg")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Eq(ϒtype_, λ.StrLiteral("reference_keyframe"))
							}
						}()) {
							ϒthumbnail = ϒformat_url
							continue
						}
						ϒext = λ.Cal(ϒdetermine_ext, ϒformat_url)
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒtype_, λ.StrLiteral("dash")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Eq(ϒext, λ.StrLiteral("mpd"))
							}
						}()) {
							λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
								ϒformat_url,
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "mpd_id", Value: λ.StrLiteral("dash")},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							if λ.IsTrue(func() λ.Object {
								if λv := λ.Eq(ϒtype_, λ.StrLiteral("hls")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Eq(ϒext, λ.StrLiteral("m3u8"))
								}
							}()) {
								λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒformat_url,
									ϒvideo_id,
									λ.StrLiteral("mp4"),
								), λ.KWArgs{
									{Name: "entry_protocol", Value: λ.StrLiteral("m3u8_native")},
									{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Eq(ϒextension, λ.StrLiteral("mp4")); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(ϒext, λ.StrLiteral("mp4"))
									}
								}()) {
									λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
										"url":       ϒformat_url,
										"format_id": ϒtype_,
										"width":     λ.Cal(ϒint_or_none, λ.Calm(ϒresource, "get", λ.StrLiteral("width"))),
										"height":    λ.Cal(ϒint_or_none, λ.Calm(ϒresource, "get", λ.StrLiteral("height"))),
									}))
								}
							}
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒattrs = λ.DictLiteral(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒvideo, λ.StrLiteral("attributes")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒattribute = τmp1
						if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒattribute, λ.DictType)) {
							continue
						}
						ϒkey = λ.Calm(ϒattribute, "get", λ.StrLiteral("fieldKey"))
						ϒvalue = λ.Calm(ϒattribute, "get", λ.StrLiteral("fieldValue"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒkey)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(!λ.IsTrue(ϒvalue))
							}
						}()) {
							continue
						}
						λ.SetItem(ϒattrs, ϒkey, ϒvalue)
					}
					ϒtitle = func() λ.Object {
						if λv := λ.Calm(ϒattrs, "get", λ.StrLiteral("title_stv")); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_id
						}
					}()
					ϒalt_title = λ.Calm(ϒattrs, "get", λ.StrLiteral("title"))
					ϒdescription = func() λ.Object {
						if λv := λ.Calm(ϒattrs, "get", λ.StrLiteral("long_description")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒattrs, "get", λ.StrLiteral("short_description"))
						}
					}()
					ϒseries = λ.Calm(ϒattrs, "get", λ.StrLiteral("label"))
					ϒseason = λ.Calm(ϒattrs, "get", λ.StrLiteral("season"))
					ϒepisode = λ.Calm(ϒattrs, "get", λ.StrLiteral("chapter"))
					ϒduration = λ.Call(ϒfloat_or_none, λ.NewArgs(λ.Calm(ϒattrs, "get", λ.StrLiteral("duration"))), λ.KWArgs{
						{Name: "scale", Value: λ.IntLiteral(1000)},
					})
					ϒseason_number = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("Season (\\d+)"),
						func() λ.Object {
							if λv := ϒseason; λ.IsTrue(λv) {
								return λv
							} else {
								return λ.StrLiteral("")
							}
						}(),
						λ.StrLiteral("season number"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒepisode_number = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("Episode (\\d+)"),
						func() λ.Object {
							if λv := ϒepisode; λ.IsTrue(λv) {
								return λv
							} else {
								return λ.StrLiteral("")
							}
						}(),
						λ.StrLiteral("episode number"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					return λ.DictLiteral(map[string]λ.Object{
						"id":             ϒvideo_id,
						"title":          ϒtitle,
						"alt_title":      ϒalt_title,
						"description":    ϒdescription,
						"thumbnail":      ϒthumbnail,
						"duration":       ϒduration,
						"timestamp":      λ.Cal(ϒunified_timestamp, λ.Calm(ϒvideo, "get", λ.StrLiteral("lastPublished"))),
						"series":         ϒseries,
						"season":         ϒseason,
						"season_number":  ϒseason_number,
						"episode":        ϒepisode,
						"episode_number": ϒepisode_number,
						"formats":        ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    ServusIE__VALID_URL,
				"_real_extract": ServusIE__real_extract,
			})
		}())
	})
}
