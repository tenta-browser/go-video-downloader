// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * bigflix/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/bigflix.py
 */

package bigflix

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BigflixIE                    λ.Object
	InfoExtractor                λ.Object
	ϒcompat_b64decode            λ.Object
	ϒcompat_urllib_parse_unquote λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_b64decode = Ωcompat.ϒcompat_b64decode
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		BigflixIE = λ.Cal(λ.TypeType, λ.StrLiteral("BigflixIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BigflixIE__VALID_URL    λ.Object
				BigflixIE__real_extract λ.Object
			)
			BigflixIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?bigflix\\.com/.+/(?P<id>[0-9]+)")
			BigflixIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdecode_url  λ.Object
						ϒdescription λ.Object
						ϒencoded_url λ.Object
						ϒf           λ.Object
						ϒfile_url    λ.Object
						ϒformats     λ.Object
						ϒheight      λ.Object
						ϒself        = λargs[0]
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒvideo_id    λ.Object
						ϒvideo_url   λ.Object
						ϒwebpage     λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
						τmp2         λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒtitle = λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("<div[^>]+class=[\"\\']pagetitle[\"\\'][^>]*>(.+?)</div>"), ϒwebpage, λ.StrLiteral("title"))
					ϒdecode_url = λ.NewFunction("decode_url",
						[]λ.Param{
							{Name: "quoted_b64_url"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒquoted_b64_url = λargs[0]
							)
							return λ.Calm(λ.Cal(ϒcompat_b64decode, λ.Cal(ϒcompat_urllib_parse_unquote, ϒquoted_b64_url)), "decode", λ.StrLiteral("utf-8"))
						})
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.StrLiteral("ContentURL_(\\d{3,4})[pP][^=]+=([^&]+)"), ϒwebpage))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒheight = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒencoded_url = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒvideo_url = λ.Cal(ϒdecode_url, ϒencoded_url)
						ϒf = λ.DictLiteral(map[string]λ.Object{
							"url":       ϒvideo_url,
							"format_id": λ.Mod(λ.StrLiteral("%sp"), ϒheight),
							"height":    λ.Cal(λ.IntType, ϒheight),
						})
						if λ.IsTrue(λ.Calm(ϒvideo_url, "startswith", λ.StrLiteral("rtmp"))) {
							λ.SetItem(ϒf, λ.StrLiteral("ext"), λ.StrLiteral("flv"))
						}
						λ.Calm(ϒformats, "append", ϒf)
					}
					ϒfile_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("file=([^&]+)"),
						ϒwebpage,
						λ.StrLiteral("video url"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒfile_url) {
						ϒvideo_url = λ.Cal(ϒdecode_url, ϒfile_url)
						if λ.IsTrue(λ.Cal(λ.BuiltinAll, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒf   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, ϒformats)
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒf = τmp1
										λgy.Yield(λ.Ne(λ.GetItem(ϒf, λ.StrLiteral("url")), ϒvideo_url))
									}
									return λ.None
								})
							})))) {
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"url": λ.Cal(ϒdecode_url, ϒfile_url),
							}))
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒdescription = λ.Calm(ϒself, "_html_search_meta", λ.StrLiteral("description"), ϒwebpage)
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": ϒdescription,
						"formats":     ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    BigflixIE__VALID_URL,
				"_real_extract": BigflixIE__real_extract,
			})
		}())
	})
}
