// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * vimeo/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/vimeo.py
 */

package vimeo

import (
	Ωbase64 "github.com/tenta-browser/go-video-downloader/gen/base64"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError         λ.Object
	InfoExtractor          λ.Object
	VHXEmbedIE             λ.Object
	VimeoAlbumIE           λ.Object
	VimeoBaseInfoExtractor λ.Object
	VimeoChannelIE         λ.Object
	VimeoGroupsIE          λ.Object
	VimeoIE                λ.Object
	VimeoLikesIE           λ.Object
	VimeoOndemandIE        λ.Object
	VimeoReviewIE          λ.Object
	VimeoUserIE            λ.Object
	VimeoWatchLaterIE      λ.Object
	ϒclean_html            λ.Object
	ϒcompat_HTTPError      λ.Object
	ϒcompat_kwargs         λ.Object
	ϒcompat_str            λ.Object
	ϒdetermine_ext         λ.Object
	ϒget_element_by_class  λ.Object
	ϒint_or_none           λ.Object
	ϒjs_to_json            λ.Object
	ϒmerge_dicts           λ.Object
	ϒparse_filesize        λ.Object
	ϒparse_iso8601         λ.Object
	ϒsanitized_Request     λ.Object
	ϒsmuggle_url           λ.Object
	ϒstd_headers           λ.Object
	ϒstr_or_none           λ.Object
	ϒtry_get               λ.Object
	ϒunescapeHTML          λ.Object
	ϒunified_timestamp     λ.Object
	ϒunsmuggle_url         λ.Object
	ϒurlencode_postdata    λ.Object
	ϒurljoin               λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_kwargs = Ωcompat.ϒcompat_kwargs
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒclean_html = Ωutils.ϒclean_html
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒget_element_by_class = Ωutils.ϒget_element_by_class
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmerge_dicts = Ωutils.ϒmerge_dicts
		ϒparse_filesize = Ωutils.ϒparse_filesize
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒsanitized_Request = Ωutils.ϒsanitized_Request
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒstd_headers = Ωutils.ϒstd_headers
		ϒstr_or_none = Ωutils.ϒstr_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒunsmuggle_url = Ωutils.ϒunsmuggle_url
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		ϒurljoin = Ωutils.ϒurljoin
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		VimeoBaseInfoExtractor = λ.Cal(λ.TypeType, λ.StrLiteral("VimeoBaseInfoExtractor"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VimeoBaseInfoExtractor__LOGIN_REQUIRED          λ.Object
				VimeoBaseInfoExtractor__NETRC_MACHINE           λ.Object
				VimeoBaseInfoExtractor__extract_original_format λ.Object
				VimeoBaseInfoExtractor__extract_vimeo_config    λ.Object
				VimeoBaseInfoExtractor__get_video_password      λ.Object
				VimeoBaseInfoExtractor__login                   λ.Object
				VimeoBaseInfoExtractor__parse_config            λ.Object
				VimeoBaseInfoExtractor__vimeo_sort_formats      λ.Object
			)
			VimeoBaseInfoExtractor__NETRC_MACHINE = λ.StrLiteral("vimeo")
			VimeoBaseInfoExtractor__LOGIN_REQUIRED = λ.False
			VimeoBaseInfoExtractor__login = λ.NewFunction("_login",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdata     λ.Object
						ϒpassword λ.Object
						ϒself     = λargs[0]
						ϒtoken    λ.Object
						ϒusername λ.Object
						ϒvuid     λ.Object
						ϒwebpage  λ.Object
						τmp0      λ.Object
						τmp1      λ.Object
					)
					_ = τmp0
					_ = τmp1
					τmp0 = λ.Calm(ϒself, "_get_login_info")
					ϒusername = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒpassword = λ.GetItem(τmp0, λ.IntLiteral(1))
					if ϒusername == λ.None {
						if λ.IsTrue(λ.GetAttr(ϒself, "_LOGIN_REQUIRED", nil)) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("No login info available, needed for using %s."), λ.GetAttr(ϒself, "IE_NAME", nil))), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
						return λ.None
					}
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", λ.GetAttr(ϒself, "_LOGIN_URL", nil), λ.None, λ.StrLiteral("Downloading login page"))
					τmp0 = λ.Calm(ϒself, "_extract_xsrft_and_vuid", ϒwebpage)
					ϒtoken = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒvuid = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒdata = λ.DictLiteral(map[string]λ.Object{
						"action":   λ.StrLiteral("login"),
						"email":    ϒusername,
						"password": ϒpassword,
						"service":  λ.StrLiteral("vimeo"),
						"token":    ϒtoken,
					})
					λ.Calm(ϒself, "_set_vimeo_cookie", λ.StrLiteral("vuid"), ϒvuid)
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								var ϒe λ.Object = λex
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒe, "cause", nil), ϒcompat_HTTPError); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(λ.GetAttr(λ.GetAttr(ϒe, "cause", nil), "code", nil), λ.IntLiteral(418))
									}
								}()) {
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("Unable to log in: bad username or password")), λ.KWArgs{
										{Name: "expected", Value: λ.True},
									})))
								}
								panic(λ.Raise(λ.Cal(ExtractorError, λ.StrLiteral("Unable to log in"))))
							}},
						)
						λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
							λ.GetAttr(ϒself, "_LOGIN_URL", nil),
							λ.None,
							λ.StrLiteral("Logging in"),
						), λ.KWArgs{
							{Name: "data", Value: λ.Cal(ϒurlencode_postdata, ϒdata)},
							{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
								"Content-Type": λ.StrLiteral("application/x-www-form-urlencoded"),
								"Referer":      λ.GetAttr(ϒself, "_LOGIN_URL", nil),
							})},
						})
						return λ.BlockExitNormally, nil
					}()
					return λ.None
				})
			VimeoBaseInfoExtractor__get_video_password = λ.NewFunction("_get_video_password",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒpassword λ.Object
						ϒself     = λargs[0]
					)
					ϒpassword = λ.Calm(λ.GetAttr(λ.GetAttr(ϒself, "_downloader", nil), "params", nil), "get", λ.StrLiteral("videopassword"))
					if ϒpassword == λ.None {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("This video is protected by a password, use the --video-password option")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					return ϒpassword
				})
			VimeoBaseInfoExtractor__extract_vimeo_config = λ.NewFunction("_extract_vimeo_config",
				[]λ.Param{
					{Name: "self"},
					{Name: "webpage"},
					{Name: "video_id"},
				},
				0, true, true,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒargs         = λargs[3]
						ϒkwargs       = λargs[4]
						ϒself         = λargs[0]
						ϒvideo_id     = λargs[2]
						ϒvimeo_config λ.Object
						ϒwebpage      = λargs[1]
					)
					ϒvimeo_config = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(λ.Unpack(
						λ.StrLiteral("vimeo\\.config\\s*=\\s*(?:({.+?})|_extend\\([^,]+,\\s+({.+?})\\));"),
						ϒwebpage,
						λ.StrLiteral("vimeo config"),
						λ.AsStarred(ϒargs),
					)...), λ.KWArgs{
						{Name: "", Value: λ.Cal(ϒcompat_kwargs, ϒkwargs)},
					})
					if λ.IsTrue(ϒvimeo_config) {
						return λ.Calm(ϒself, "_parse_json", ϒvimeo_config, ϒvideo_id)
					}
					return λ.None
				})
			VimeoBaseInfoExtractor__vimeo_sort_formats = λ.NewFunction("_vimeo_sort_formats",
				[]λ.Param{
					{Name: "self"},
					{Name: "formats"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformats = λargs[1]
						ϒself    = λargs[0]
					)
					λ.Call(λ.GetAttr(ϒself, "_sort_formats", nil), λ.NewArgs(ϒformats), λ.KWArgs{
						{Name: "field_preference", Value: λ.NewTuple(
							λ.StrLiteral("preference"),
							λ.StrLiteral("height"),
							λ.StrLiteral("width"),
							λ.StrLiteral("fps"),
							λ.StrLiteral("tbr"),
							λ.StrLiteral("format_id"),
						)},
					})
					return λ.None
				})
			VimeoBaseInfoExtractor__parse_config = λ.NewFunction("_parse_config",
				[]λ.Param{
					{Name: "self"},
					{Name: "config"},
					{Name: "video_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcdn_data                λ.Object
						ϒcdn_name                λ.Object
						ϒconfig                  = λargs[1]
						ϒconfig_files            λ.Object
						ϒf                       λ.Object
						ϒf_id                    λ.Object
						ϒfiles_type              λ.Object
						ϒformat_id               λ.Object
						ϒformats                 λ.Object
						ϒis_live                 λ.Object
						ϒkey                     λ.Object
						ϒlive_archive            λ.Object
						ϒlive_archive_source_url λ.Object
						ϒlive_event              λ.Object
						ϒm_url                   λ.Object
						ϒmanifest_url            λ.Object
						ϒmpd_formats             λ.Object
						ϒowner                   λ.Object
						ϒreal_m_url              λ.Object
						ϒrepl                    λ.Object
						ϒrequest                 λ.Object
						ϒself                    = λargs[0]
						ϒsep_manifest_urls       λ.Object
						ϒsep_pattern             λ.Object
						ϒsubtitles               λ.Object
						ϒsuffix                  λ.Object
						ϒthumb                   λ.Object
						ϒthumbnail               λ.Object
						ϒthumbnails              λ.Object
						ϒtt                      λ.Object
						ϒvideo_data              λ.Object
						ϒvideo_id                = λargs[2]
						ϒvideo_title             λ.Object
						ϒvideo_uploader_url      λ.Object
						ϒvideo_url               λ.Object
						τmp0                     λ.Object
						τmp1                     λ.Object
						τmp2                     λ.Object
						τmp3                     λ.Object
						τmp4                     λ.Object
						τmp5                     λ.Object
						τmp6                     λ.Object
					)
					ϒvideo_data = λ.GetItem(ϒconfig, λ.StrLiteral("video"))
					ϒvideo_title = λ.GetItem(ϒvideo_data, λ.StrLiteral("title"))
					ϒlive_event = func() λ.Object {
						if λv := λ.Calm(ϒvideo_data, "get", λ.StrLiteral("live_event")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒis_live = λ.Eq(λ.Calm(ϒlive_event, "get", λ.StrLiteral("status")), λ.StrLiteral("started"))
					ϒrequest = func() λ.Object {
						if λv := λ.Calm(ϒconfig, "get", λ.StrLiteral("request")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒformats = λ.NewList()
					ϒconfig_files = func() λ.Object {
						if λv := λ.Calm(ϒvideo_data, "get", λ.StrLiteral("files")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Calm(ϒrequest, "get", λ.StrLiteral("files")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					τmp0 = λ.Cal(λ.BuiltinIter, func() λ.Object {
						if λv := λ.Calm(ϒconfig_files, "get", λ.StrLiteral("progressive")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}())
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒf = τmp1
						ϒvideo_url = λ.Calm(ϒf, "get", λ.StrLiteral("url"))
						if !λ.IsTrue(ϒvideo_url) {
							continue
						}
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url":       ϒvideo_url,
							"format_id": λ.Mod(λ.StrLiteral("http-%s"), λ.Calm(ϒf, "get", λ.StrLiteral("quality"))),
							"width":     λ.Cal(ϒint_or_none, λ.Calm(ϒf, "get", λ.StrLiteral("width"))),
							"height":    λ.Cal(ϒint_or_none, λ.Calm(ϒf, "get", λ.StrLiteral("height"))),
							"fps":       λ.Cal(ϒint_or_none, λ.Calm(ϒf, "get", λ.StrLiteral("fps"))),
							"tbr":       λ.Cal(ϒint_or_none, λ.Calm(ϒf, "get", λ.StrLiteral("bitrate"))),
						}))
					}
					ϒsep_pattern = λ.StrLiteral("/sep/video/")
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.StrLiteral("hls"),
						λ.StrLiteral("dash"),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒfiles_type = τmp1
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Calm(func() λ.Object {
							if λv := λ.Cal(ϒtry_get, ϒconfig_files, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, ϒfiles_type), λ.StrLiteral("cdns"))
								})); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.DictLiteral(map[λ.Object]λ.Object{})
							}
						}(), "items"))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							τmp4 = τmp3
							ϒcdn_name = λ.GetItem(τmp4, λ.IntLiteral(0))
							ϒcdn_data = λ.GetItem(τmp4, λ.IntLiteral(1))
							ϒmanifest_url = λ.Calm(ϒcdn_data, "get", λ.StrLiteral("url"))
							if !λ.IsTrue(ϒmanifest_url) {
								continue
							}
							ϒformat_id = λ.Mod(λ.StrLiteral("%s-%s"), λ.NewTuple(
								ϒfiles_type,
								ϒcdn_name,
							))
							ϒsep_manifest_urls = λ.NewList()
							if λ.IsTrue(λ.Cal(Ωre.ϒsearch, ϒsep_pattern, ϒmanifest_url)) {
								τmp4 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
									λ.NewTuple(
										λ.StrLiteral(""),
										λ.StrLiteral("video"),
									),
									λ.NewTuple(
										λ.StrLiteral("_sep"),
										λ.StrLiteral("sep/video"),
									),
								))
								for {
									if τmp5 = λ.NextDefault(τmp4, λ.AfterLast); τmp5 == λ.AfterLast {
										break
									}
									τmp6 = τmp5
									ϒsuffix = λ.GetItem(τmp6, λ.IntLiteral(0))
									ϒrepl = λ.GetItem(τmp6, λ.IntLiteral(1))
									λ.Calm(ϒsep_manifest_urls, "append", λ.NewTuple(
										λ.Add(ϒformat_id, ϒsuffix),
										λ.Cal(Ωre.ϒsub, ϒsep_pattern, λ.Mod(λ.StrLiteral("/%s/"), ϒrepl), ϒmanifest_url),
									))
								}
							} else {
								ϒsep_manifest_urls = λ.NewList(λ.NewTuple(
									ϒformat_id,
									ϒmanifest_url,
								))
							}
							τmp4 = λ.Cal(λ.BuiltinIter, ϒsep_manifest_urls)
							for {
								if τmp5 = λ.NextDefault(τmp4, λ.AfterLast); τmp5 == λ.AfterLast {
									break
								}
								τmp6 = τmp5
								ϒf_id = λ.GetItem(τmp6, λ.IntLiteral(0))
								ϒm_url = λ.GetItem(τmp6, λ.IntLiteral(1))
								if λ.IsTrue(λ.Eq(ϒfiles_type, λ.StrLiteral("hls"))) {
									λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
										ϒm_url,
										ϒvideo_id,
										λ.StrLiteral("mp4"),
										func() λ.Object {
											if λ.IsTrue(ϒis_live) {
												return λ.StrLiteral("m3u8")
											} else {
												return λ.StrLiteral("m3u8_native")
											}
										}(),
									), λ.KWArgs{
										{Name: "m3u8_id", Value: ϒf_id},
										{Name: "note", Value: λ.Mod(λ.StrLiteral("Downloading %s m3u8 information"), ϒcdn_name)},
										{Name: "fatal", Value: λ.False},
									}))
								} else {
									if λ.IsTrue(λ.Eq(ϒfiles_type, λ.StrLiteral("dash"))) {
										if λ.Contains(ϒm_url, λ.StrLiteral("json=1")) {
											ϒreal_m_url = λ.Calm(func() λ.Object {
												if λv := λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
													ϒm_url,
													ϒvideo_id,
												), λ.KWArgs{
													{Name: "fatal", Value: λ.False},
												}); λ.IsTrue(λv) {
													return λv
												} else {
													return λ.DictLiteral(map[λ.Object]λ.Object{})
												}
											}(), "get", λ.StrLiteral("url"))
											if λ.IsTrue(ϒreal_m_url) {
												ϒm_url = ϒreal_m_url
											}
										}
										ϒmpd_formats = λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
											λ.Calm(ϒm_url, "replace", λ.StrLiteral("/master.json"), λ.StrLiteral("/master.mpd")),
											ϒvideo_id,
											ϒf_id,
											λ.Mod(λ.StrLiteral("Downloading %s MPD information"), ϒcdn_name),
										), λ.KWArgs{
											{Name: "fatal", Value: λ.False},
										})
										λ.Calm(ϒformats, "extend", ϒmpd_formats)
									}
								}
							}
						}
					}
					ϒlive_archive = func() λ.Object {
						if λv := λ.Calm(ϒlive_event, "get", λ.StrLiteral("archive")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒlive_archive_source_url = λ.Calm(ϒlive_archive, "get", λ.StrLiteral("source_url"))
					if λ.IsTrue(func() λ.Object {
						if λv := ϒlive_archive_source_url; !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Eq(λ.Calm(ϒlive_archive, "get", λ.StrLiteral("status")), λ.StrLiteral("done"))
						}
					}()) {
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"format_id":  λ.StrLiteral("live-archive-source"),
							"url":        ϒlive_archive_source_url,
							"preference": λ.IntLiteral(1),
						}))
					}
					τmp0 = λ.Cal(λ.BuiltinIter, ϒformats)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒf = τmp1
						if λ.IsTrue(λ.Eq(λ.Calm(ϒf, "get", λ.StrLiteral("vcodec")), λ.StrLiteral("none"))) {
							λ.SetItem(ϒf, λ.StrLiteral("preference"), λ.Neg(λ.IntLiteral(50)))
						} else {
							if λ.IsTrue(λ.Eq(λ.Calm(ϒf, "get", λ.StrLiteral("acodec")), λ.StrLiteral("none"))) {
								λ.SetItem(ϒf, λ.StrLiteral("preference"), λ.Neg(λ.IntLiteral(40)))
							}
						}
					}
					ϒsubtitles = λ.DictLiteral(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, func() λ.Object {
						if λv := λ.Calm(ϒrequest, "get", λ.StrLiteral("text_tracks")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}())
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒtt = τmp1
						λ.SetItem(ϒsubtitles, λ.GetItem(ϒtt, λ.StrLiteral("lang")), λ.NewList(λ.DictLiteral(map[string]λ.Object{
							"ext": λ.StrLiteral("vtt"),
							"url": λ.Cal(ϒurljoin, λ.StrLiteral("https://vimeo.com"), λ.GetItem(ϒtt, λ.StrLiteral("url"))),
						})))
					}
					ϒthumbnails = λ.NewList()
					if !λ.IsTrue(ϒis_live) {
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(func() λ.Object {
							if λv := λ.Calm(ϒvideo_data, "get", λ.StrLiteral("thumbs")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.DictLiteral(map[λ.Object]λ.Object{})
							}
						}(), "items"))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							τmp2 = τmp1
							ϒkey = λ.GetItem(τmp2, λ.IntLiteral(0))
							ϒthumb = λ.GetItem(τmp2, λ.IntLiteral(1))
							λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
								"id":    ϒkey,
								"width": λ.Cal(ϒint_or_none, ϒkey),
								"url":   ϒthumb,
							}))
						}
						ϒthumbnail = λ.Calm(ϒvideo_data, "get", λ.StrLiteral("thumbnail"))
						if λ.IsTrue(ϒthumbnail) {
							λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
								"url": ϒthumbnail,
							}))
						}
					}
					ϒowner = func() λ.Object {
						if λv := λ.Calm(ϒvideo_data, "get", λ.StrLiteral("owner")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒvideo_uploader_url = λ.Calm(ϒowner, "get", λ.StrLiteral("url"))
					return λ.DictLiteral(map[string]λ.Object{
						"id": func() λ.Object {
							if λv := λ.Cal(ϒstr_or_none, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("id"))); λ.IsTrue(λv) {
								return λv
							} else {
								return ϒvideo_id
							}
						}(),
						"title": func() λ.Object {
							if λ.IsTrue(ϒis_live) {
								return λ.Calm(ϒself, "_live_title", ϒvideo_title)
							} else {
								return ϒvideo_title
							}
						}(),
						"uploader": λ.Calm(ϒowner, "get", λ.StrLiteral("name")),
						"uploader_id": func() λ.Object {
							if λ.IsTrue(ϒvideo_uploader_url) {
								return λ.GetItem(λ.Calm(ϒvideo_uploader_url, "split", λ.StrLiteral("/")), λ.Neg(λ.IntLiteral(1)))
							} else {
								return λ.None
							}
						}(),
						"uploader_url": ϒvideo_uploader_url,
						"thumbnails":   ϒthumbnails,
						"duration":     λ.Cal(ϒint_or_none, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("duration"))),
						"formats":      ϒformats,
						"subtitles":    ϒsubtitles,
						"is_live":      ϒis_live,
					})
				})
			VimeoBaseInfoExtractor__extract_original_format = λ.NewFunction("_extract_original_format",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
					{Name: "video_id"},
					{Name: "unlisted_hash", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdownload_data λ.Object
						ϒdownload_url  λ.Object
						ϒext           λ.Object
						ϒquery         λ.Object
						ϒself          = λargs[0]
						ϒsource_file   λ.Object
						ϒsource_name   λ.Object
						ϒunlisted_hash = λargs[3]
						ϒurl           = λargs[1]
						ϒvideo_id      = λargs[2]
					)
					ϒquery = λ.DictLiteral(map[string]string{
						"action": "load_download_config",
					})
					if λ.IsTrue(ϒunlisted_hash) {
						λ.SetItem(ϒquery, λ.StrLiteral("unlisted_hash"), ϒunlisted_hash)
					}
					ϒdownload_data = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						ϒurl,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
						{Name: "query", Value: ϒquery},
						{Name: "headers", Value: λ.DictLiteral(map[string]string{
							"X-Requested-With": "XMLHttpRequest",
						})},
					})
					if λ.IsTrue(ϒdownload_data) {
						ϒsource_file = λ.Calm(ϒdownload_data, "get", λ.StrLiteral("source_file"))
						if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒsource_file, λ.DictType)) {
							ϒdownload_url = λ.Calm(ϒsource_file, "get", λ.StrLiteral("download_url"))
							if λ.IsTrue(func() λ.Object {
								if λv := ϒdownload_url; !λ.IsTrue(λv) {
									return λv
								} else if λv := λ.NewBool(!λ.IsTrue(λ.Calm(ϒsource_file, "get", λ.StrLiteral("is_cold")))); !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewBool(!λ.IsTrue(λ.Calm(ϒsource_file, "get", λ.StrLiteral("is_defrosting"))))
								}
							}()) {
								ϒsource_name = λ.Calm(ϒsource_file, "get", λ.StrLiteral("public_name"), λ.StrLiteral("Original"))
								if λ.IsTrue(λ.Calm(ϒself, "_is_valid_url", ϒdownload_url, ϒvideo_id, λ.Mod(λ.StrLiteral("%s video"), ϒsource_name))) {
									ϒext = λ.Calm(func() λ.Object {
										if λv := λ.Cal(ϒtry_get, ϒsource_file, λ.NewFunction("<lambda>",
											[]λ.Param{
												{Name: "x"},
											},
											0, false, false,
											func(λargs []λ.Object) λ.Object {
												var (
													ϒx = λargs[0]
												)
												return λ.GetItem(ϒx, λ.StrLiteral("extension"))
											}), ϒcompat_str); λ.IsTrue(λv) {
											return λv
										} else if λv := λ.Cal(ϒdetermine_ext, ϒdownload_url, λ.None); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.StrLiteral("mp4")
										}
									}(), "lower")
									return λ.DictLiteral(map[string]λ.Object{
										"url":        ϒdownload_url,
										"ext":        ϒext,
										"width":      λ.Cal(ϒint_or_none, λ.Calm(ϒsource_file, "get", λ.StrLiteral("width"))),
										"height":     λ.Cal(ϒint_or_none, λ.Calm(ϒsource_file, "get", λ.StrLiteral("height"))),
										"filesize":   λ.Cal(ϒparse_filesize, λ.Calm(ϒsource_file, "get", λ.StrLiteral("size"))),
										"format_id":  ϒsource_name,
										"preference": λ.IntLiteral(1),
									})
								}
							}
						}
					}
					return λ.None
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_LOGIN_REQUIRED":          VimeoBaseInfoExtractor__LOGIN_REQUIRED,
				"_NETRC_MACHINE":           VimeoBaseInfoExtractor__NETRC_MACHINE,
				"_extract_original_format": VimeoBaseInfoExtractor__extract_original_format,
				"_extract_vimeo_config":    VimeoBaseInfoExtractor__extract_vimeo_config,
				"_get_video_password":      VimeoBaseInfoExtractor__get_video_password,
				"_login":                   VimeoBaseInfoExtractor__login,
				"_parse_config":            VimeoBaseInfoExtractor__parse_config,
				"_vimeo_sort_formats":      VimeoBaseInfoExtractor__vimeo_sort_formats,
			})
		}())
		VimeoIE = λ.Cal(λ.TypeType, λ.StrLiteral("VimeoIE"), λ.NewTuple(VimeoBaseInfoExtractor), func() λ.Dict {
			var (
				VimeoIE_IE_NAME                       λ.Object
				VimeoIE__VALID_URL                    λ.Object
				VimeoIE__extract_url                  λ.Object
				VimeoIE__extract_urls                 λ.Object
				VimeoIE__real_extract                 λ.Object
				VimeoIE__real_initialize              λ.Object
				VimeoIE__smuggle_referrer             λ.Object
				VimeoIE__verify_player_video_password λ.Object
			)
			VimeoIE__VALID_URL = λ.StrLiteral("(?x)\n                    https?://\n                        (?:\n                            (?:\n                                www|\n                                player\n                            )\n                            \\.\n                        )?\n                        vimeo(?:pro)?\\.com/\n                        (?!(?:channels|album|showcase)/[^/?#]+/?(?:$|[?#])|[^/]+/review/|ondemand/)\n                        (?:.*?/)?\n                        (?:\n                            (?:\n                                play_redirect_hls|\n                                moogaloop\\.swf)\\?clip_id=\n                            )?\n                        (?:videos?/)?\n                        (?P<id>[0-9]+)\n                        (?:/(?P<unlisted_hash>[\\da-f]{10}))?\n                        /?(?:[?&].*)?(?:[#].*)?$\n                    ")
			VimeoIE_IE_NAME = λ.StrLiteral("vimeo")
			VimeoIE__smuggle_referrer = λ.NewFunction("_smuggle_referrer",
				[]λ.Param{
					{Name: "url"},
					{Name: "referrer_url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒreferrer_url = λargs[1]
						ϒurl          = λargs[0]
					)
					return λ.Cal(ϒsmuggle_url, ϒurl, λ.DictLiteral(map[string]λ.Object{
						"http_headers": λ.DictLiteral(map[string]λ.Object{
							"Referer": ϒreferrer_url,
						}),
					}))
				})
			VimeoIE__smuggle_referrer = λ.Cal(λ.StaticMethodType, VimeoIE__smuggle_referrer)
			VimeoIE__extract_urls = λ.NewFunction("_extract_urls",
				[]λ.Param{
					{Name: "url"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						PLAIN_EMBED_RE λ.Object
						ϒembed_re      λ.Object
						ϒmobj          λ.Object
						ϒurl           = λargs[0]
						ϒurls          λ.Object
						ϒwebpage       = λargs[1]
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
						τmp3           λ.Object
					)
					ϒurls = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.StrLiteral("<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//player\\.vimeo\\.com/video/\\d+.*?)\\1"), ϒwebpage))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒmobj = τmp1
						λ.Calm(ϒurls, "append", λ.Calm(VimeoIE, "_smuggle_referrer", λ.Cal(ϒunescapeHTML, λ.Calm(ϒmobj, "group", λ.StrLiteral("url"))), ϒurl))
					}
					PLAIN_EMBED_RE = λ.NewTuple(
						λ.StrLiteral("<embed[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?vimeo\\.com/moogaloop\\.swf.+?)\\1"),
						λ.StrLiteral("<video[^>]+src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?vimeo\\.com/[0-9]+)\\1"),
					)
					τmp0 = λ.Cal(λ.BuiltinIter, PLAIN_EMBED_RE)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒembed_re = τmp1
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, ϒembed_re, ϒwebpage))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒmobj = τmp3
							λ.Calm(ϒurls, "append", λ.Calm(ϒmobj, "group", λ.StrLiteral("url")))
						}
					}
					return ϒurls
				})
			VimeoIE__extract_urls = λ.Cal(λ.StaticMethodType, VimeoIE__extract_urls)
			VimeoIE__extract_url = λ.NewFunction("_extract_url",
				[]λ.Param{
					{Name: "url"},
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒurl     = λargs[0]
						ϒurls    λ.Object
						ϒwebpage = λargs[1]
					)
					ϒurls = λ.Calm(VimeoIE, "_extract_urls", ϒurl, ϒwebpage)
					return func() λ.Object {
						if λ.IsTrue(ϒurls) {
							return λ.GetItem(ϒurls, λ.IntLiteral(0))
						} else {
							return λ.None
						}
					}()
				})
			VimeoIE__extract_url = λ.Cal(λ.StaticMethodType, VimeoIE__extract_url)
			VimeoIE__verify_player_video_password = λ.NewFunction("_verify_player_video_password",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
					{Name: "video_id"},
					{Name: "headers"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒchecked  λ.Object
						ϒdata     λ.Object
						ϒheaders  = λargs[3]
						ϒpassword λ.Object
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id = λargs[2]
					)
					ϒpassword = λ.Calm(ϒself, "_get_video_password")
					ϒdata = λ.Cal(ϒurlencode_postdata, λ.DictLiteral(map[string]λ.Object{
						"password": λ.Cal(Ωbase64.ϒb64encode, λ.Calm(ϒpassword, "encode")),
					}))
					ϒheaders = λ.Cal(ϒmerge_dicts, ϒheaders, λ.DictLiteral(map[string]string{
						"Content-Type": "application/x-www-form-urlencoded",
					}))
					ϒchecked = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(ϒurl, λ.StrLiteral("/check-password")),
						ϒvideo_id,
						λ.StrLiteral("Verifying the password"),
					), λ.KWArgs{
						{Name: "data", Value: ϒdata},
						{Name: "headers", Value: ϒheaders},
					})
					if ϒchecked == λ.False {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("Wrong video password")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					return ϒchecked
				})
			VimeoIE__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					λ.Calm(ϒself, "_login")
					return λ.None
				})
			VimeoIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcc_license        λ.Object
						ϒchannel_id        λ.Object
						ϒclip              λ.Object
						ϒconfig            λ.Object
						ϒconfig_url        λ.Object
						ϒdata              λ.Object
						ϒerrmsg            λ.Object
						ϒfeature_id        λ.Object
						ϒformats           λ.Object
						ϒheaders           λ.Object
						ϒinfo              λ.Object
						ϒinfo_dict         λ.Object
						ϒinfo_dict_config  λ.Object
						ϒis_pro            λ.Object
						ϒis_rented         λ.Object
						ϒjson_ld           λ.Object
						ϒmobj              λ.Object
						ϒorig_url          λ.Object
						ϒorig_webpage      λ.Object
						ϒpage_config       λ.Object
						ϒredirect_url      λ.Object
						ϒseed_status       λ.Object
						ϒself              = λargs[0]
						ϒsource_format     λ.Object
						ϒtimestamp         λ.Object
						ϒtoken             λ.Object
						ϒunlisted_hash     λ.Object
						ϒurl               = λargs[1]
						ϒurlh              λ.Object
						ϒvideo             λ.Object
						ϒvideo_description λ.Object
						ϒvideo_id          λ.Object
						ϒvideo_password    λ.Object
						ϒvimeo_config      λ.Object
						ϒvod               λ.Object
						ϒvuid              λ.Object
						ϒwebpage           λ.Object
						τmp0               λ.Object
						τmp1               λ.Object
						τmp2               λ.Object
					)
					_ = τmp0
					τmp0 = λ.Cal(ϒunsmuggle_url, ϒurl, λ.DictLiteral(map[λ.Object]λ.Object{}))
					ϒurl = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒdata = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒheaders = λ.Calm(ϒstd_headers, "copy")
					if λ.Contains(ϒdata, λ.StrLiteral("http_headers")) {
						λ.Calm(ϒheaders, "update", λ.GetItem(ϒdata, λ.StrLiteral("http_headers")))
					}
					if !λ.Contains(ϒheaders, λ.StrLiteral("Referer")) {
						λ.SetItem(ϒheaders, λ.StrLiteral("Referer"), ϒurl)
					}
					ϒmobj = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groupdict")
					τmp0 = λ.NewTuple(
						λ.GetItem(ϒmobj, λ.StrLiteral("id")),
						λ.Calm(ϒmobj, "get", λ.StrLiteral("unlisted_hash")),
					)
					ϒvideo_id = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒunlisted_hash = λ.GetItem(τmp0, λ.IntLiteral(1))
					if λ.IsTrue(ϒunlisted_hash) {
						return λ.Calm(ϒself, "_extract_from_api", ϒvideo_id, ϒunlisted_hash)
					}
					ϒorig_url = ϒurl
					ϒis_pro = λ.NewBool(λ.Contains(ϒurl, λ.StrLiteral("vimeopro.com/")))
					if λ.IsTrue(ϒis_pro) {
						ϒurl = λ.Calm(ϒself, "_extract_url", ϒurl, λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id))
						if !λ.IsTrue(ϒurl) {
							ϒurl = λ.Add(λ.StrLiteral("https://vimeo.com/"), ϒvideo_id)
						}
					} else {
						if λ.IsTrue(λ.Cal(λ.BuiltinAny, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒp   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
										λ.StrLiteral("play_redirect_hls"),
										λ.StrLiteral("moogaloop.swf"),
									))
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒp = τmp1
										λgy.Yield(λ.NewBool(λ.Contains(ϒurl, ϒp)))
									}
									return λ.None
								})
							})))) {
							ϒurl = λ.Add(λ.StrLiteral("https://vimeo.com/"), ϒvideo_id)
						}
					}
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
								var ϒee λ.Object = λex
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetAttr(ϒee, "cause", nil), ϒcompat_HTTPError); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(λ.GetAttr(λ.GetAttr(ϒee, "cause", nil), "code", nil), λ.IntLiteral(403))
									}
								}()) {
									ϒerrmsg = λ.Calm(λ.GetAttr(ϒee, "cause", nil), "read")
									if λ.Contains(ϒerrmsg, λ.NewBytes(0x42, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x73, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x68, 0x65, 0x72, 0x65)) {
										panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("Cannot download embed-only video without embedding URL. Please call youtube-dl with the URL of the page that embeds this video.")), λ.KWArgs{
											{Name: "expected", Value: λ.True},
										})))
									}
								}
								panic(λ.Raise(λex))
							}},
						)
						τmp2 = λ.Call(λ.GetAttr(ϒself, "_download_webpage_handle", nil), λ.NewArgs(
							ϒurl,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "headers", Value: ϒheaders},
						})
						ϒwebpage = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒurlh = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒredirect_url = λ.Calm(ϒurlh, "geturl")
						return λ.BlockExitNormally, nil
					}()
					if λ.Contains(ϒurl, λ.StrLiteral("://player.vimeo.com/video/")) {
						ϒconfig = λ.Calm(ϒself, "_parse_json", λ.Calm(ϒself, "_search_regex", λ.StrLiteral("\\bconfig\\s*=\\s*({.+?})\\s*;"), ϒwebpage, λ.StrLiteral("info section")), ϒvideo_id)
						if λ.IsTrue(λ.Eq(λ.Calm(ϒconfig, "get", λ.StrLiteral("view")), λ.IntLiteral(4))) {
							ϒconfig = λ.Calm(ϒself, "_verify_player_video_password", ϒredirect_url, ϒvideo_id, ϒheaders)
						}
						ϒinfo = λ.Calm(ϒself, "_parse_config", ϒconfig, ϒvideo_id)
						λ.Calm(ϒself, "_vimeo_sort_formats", λ.GetItem(ϒinfo, λ.StrLiteral("formats")))
						return ϒinfo
					}
					if λ.IsTrue(λ.Cal(Ωre.ϒsearch, λ.StrLiteral("<form[^>]+?id=\"pw_form\""), ϒwebpage)) {
						ϒvideo_password = λ.Calm(ϒself, "_get_video_password")
						τmp1 = λ.Calm(ϒself, "_extract_xsrft_and_vuid", ϒwebpage)
						ϒtoken = λ.GetItem(τmp1, λ.IntLiteral(0))
						ϒvuid = λ.GetItem(τmp1, λ.IntLiteral(1))
						ϒwebpage = λ.Calm(ϒself, "_verify_video_password", ϒredirect_url, ϒvideo_id, ϒvideo_password, ϒtoken, ϒvuid)
					}
					ϒvimeo_config = λ.Call(λ.GetAttr(ϒself, "_extract_vimeo_config", nil), λ.NewArgs(
						ϒwebpage,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒvimeo_config) {
						ϒseed_status = func() λ.Object {
							if λv := λ.Calm(ϒvimeo_config, "get", λ.StrLiteral("seed_status")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.DictLiteral(map[λ.Object]λ.Object{})
							}
						}()
						if λ.IsTrue(λ.Eq(λ.Calm(ϒseed_status, "get", λ.StrLiteral("state")), λ.StrLiteral("failed"))) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("%s said: %s"), λ.NewTuple(
								λ.GetAttr(ϒself, "IE_NAME", nil),
								λ.GetItem(ϒseed_status, λ.StrLiteral("title")),
							))), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
					}
					ϒcc_license = λ.None
					ϒtimestamp = λ.None
					ϒvideo_description = λ.None
					ϒinfo_dict = λ.DictLiteral(map[λ.Object]λ.Object{})
					ϒchannel_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("vimeo\\.com/channels/([^/]+)"),
						ϒurl,
						λ.StrLiteral("channel id"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒchannel_id) {
						ϒconfig_url = λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("\\bdata-config-url=\"([^\"]+)\""), ϒwebpage, λ.StrLiteral("config URL"))
						ϒvideo_description = λ.Cal(ϒclean_html, λ.Cal(ϒget_element_by_class, λ.StrLiteral("description"), ϒwebpage))
						λ.Calm(ϒinfo_dict, "update", λ.DictLiteral(map[string]λ.Object{
							"channel_id":  ϒchannel_id,
							"channel_url": λ.Add(λ.StrLiteral("https://vimeo.com/channels/"), ϒchannel_id),
						}))
					} else {
						ϒpage_config = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
							λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.StrLiteral("vimeo\\.(?:clip|vod_title)_page_config\\s*=\\s*({.+?});"),
								ϒwebpage,
								λ.StrLiteral("page config"),
							), λ.KWArgs{
								{Name: "default", Value: λ.StrLiteral("{}")},
							}),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
						if !λ.IsTrue(ϒpage_config) {
							return λ.Calm(ϒself, "_extract_from_api", ϒvideo_id)
						}
						ϒconfig_url = λ.GetItem(λ.GetItem(ϒpage_config, λ.StrLiteral("player")), λ.StrLiteral("config_url"))
						ϒcc_license = λ.Calm(ϒpage_config, "get", λ.StrLiteral("cc_license"))
						ϒclip = func() λ.Object {
							if λv := λ.Calm(ϒpage_config, "get", λ.StrLiteral("clip")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.DictLiteral(map[λ.Object]λ.Object{})
							}
						}()
						ϒtimestamp = λ.Calm(ϒclip, "get", λ.StrLiteral("uploaded_on"))
						ϒvideo_description = λ.Cal(ϒclean_html, func() λ.Object {
							if λv := λ.Calm(ϒclip, "get", λ.StrLiteral("description")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒpage_config, "get", λ.StrLiteral("description_html_escaped"))
							}
						}())
					}
					ϒconfig = λ.Calm(ϒself, "_download_json", ϒconfig_url, ϒvideo_id)
					ϒvideo = func() λ.Object {
						if λv := λ.Calm(ϒconfig, "get", λ.StrLiteral("video")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒvod = func() λ.Object {
						if λv := λ.Calm(ϒvideo, "get", λ.StrLiteral("vod")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒis_rented = λ.NewFunction("is_rented",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒlabel           λ.Object
								ϒpurchase_option λ.Object
								τmp0             λ.Object
								τmp1             λ.Object
							)
							if λ.Contains(ϒwebpage, λ.StrLiteral(">You rented this title.<")) {
								return λ.True
							}
							if λ.IsTrue(λ.Cal(ϒtry_get, ϒconfig, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("user")), λ.StrLiteral("purchased"))
								}))) {
								return λ.True
							}
							τmp0 = λ.Cal(λ.BuiltinIter, func() λ.Object {
								if λv := λ.Calm(ϒvod, "get", λ.StrLiteral("purchase_options")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewList()
								}
							}())
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒpurchase_option = τmp1
								if λ.IsTrue(λ.Calm(ϒpurchase_option, "get", λ.StrLiteral("purchased"))) {
									return λ.True
								}
								ϒlabel = λ.Calm(ϒpurchase_option, "get", λ.StrLiteral("label_string"))
								if λ.IsTrue(func() λ.Object {
									if λv := ϒlabel; !λ.IsTrue(λv) {
										return λv
									} else {
										return func() λ.Object {
											if λv := λ.Calm(ϒlabel, "startswith", λ.StrLiteral("You rented this")); λ.IsTrue(λv) {
												return λv
											} else {
												return λ.Calm(ϒlabel, "endswith", λ.StrLiteral(" remaining"))
											}
										}()
									}
								}()) {
									return λ.True
								}
							}
							return λ.False
						})
					if λ.IsTrue(func() λ.Object {
						if λv := λ.Cal(ϒis_rented); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒvod, "get", λ.StrLiteral("is_trailer"))
						}
					}()) {
						ϒfeature_id = λ.Calm(ϒvod, "get", λ.StrLiteral("feature_id"))
						if λ.IsTrue(func() λ.Object {
							if λv := ϒfeature_id; !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(!λ.IsTrue(λ.Calm(ϒdata, "get", λ.StrLiteral("force_feature_id"), λ.False)))
							}
						}()) {
							return λ.Calm(ϒself, "url_result", λ.Cal(ϒsmuggle_url, λ.Mod(λ.StrLiteral("https://player.vimeo.com/player/%s"), ϒfeature_id), λ.DictLiteral(map[string]λ.Object{
								"force_feature_id": λ.True,
							})), λ.StrLiteral("Vimeo"))
						}
					}
					if !λ.IsTrue(ϒvideo_description) {
						ϒvideo_description = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.NewList(
								λ.StrLiteral("description"),
								λ.StrLiteral("og:description"),
								λ.StrLiteral("twitter:description"),
							),
							ϒwebpage,
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
					}
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒvideo_description)); !λ.IsTrue(λv) {
							return λv
						} else {
							return ϒis_pro
						}
					}()) {
						ϒorig_webpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
							ϒorig_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "note", Value: λ.StrLiteral("Downloading webpage for description")},
							{Name: "fatal", Value: λ.False},
						})
						if λ.IsTrue(ϒorig_webpage) {
							ϒvideo_description = λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
								λ.StrLiteral("description"),
								ϒorig_webpage,
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
						}
					}
					if !λ.IsTrue(ϒvideo_description) {
						λ.Calm(λ.GetAttr(ϒself, "_downloader", nil), "report_warning", λ.StrLiteral("Cannot find video description"))
					}
					if !λ.IsTrue(ϒtimestamp) {
						ϒtimestamp = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("<time[^>]+datetime=\"([^\"]+)\""),
							ϒwebpage,
							λ.StrLiteral("timestamp"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
					}
					ϒformats = λ.NewList()
					ϒsource_format = λ.Calm(ϒself, "_extract_original_format", λ.Add(λ.StrLiteral("https://vimeo.com/"), ϒvideo_id), ϒvideo_id, λ.Calm(ϒvideo, "get", λ.StrLiteral("unlisted_hash")))
					if λ.IsTrue(ϒsource_format) {
						λ.Calm(ϒformats, "append", ϒsource_format)
					}
					ϒinfo_dict_config = λ.Calm(ϒself, "_parse_config", ϒconfig, ϒvideo_id)
					λ.Calm(ϒformats, "extend", λ.GetItem(ϒinfo_dict_config, λ.StrLiteral("formats")))
					λ.Calm(ϒself, "_vimeo_sort_formats", ϒformats)
					ϒjson_ld = λ.Call(λ.GetAttr(ϒself, "_search_json_ld", nil), λ.NewArgs(
						ϒwebpage,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "default", Value: λ.DictLiteral(map[λ.Object]λ.Object{})},
					})
					if !λ.IsTrue(ϒcc_license) {
						ϒcc_license = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("<link[^>]+rel=[\"\\']license[\"\\'][^>]+href=([\"\\'])(?P<license>(?:(?!\\1).)+)\\1"),
							ϒwebpage,
							λ.StrLiteral("license"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
							{Name: "group", Value: λ.StrLiteral("license")},
						})
					}
					λ.Calm(ϒinfo_dict, "update", λ.DictLiteral(map[string]λ.Object{
						"formats":     ϒformats,
						"timestamp":   λ.Cal(ϒunified_timestamp, ϒtimestamp),
						"description": ϒvideo_description,
						"webpage_url": ϒurl,
						"license":     ϒcc_license,
					}))
					return λ.Cal(ϒmerge_dicts, ϒinfo_dict, ϒinfo_dict_config, ϒjson_ld)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":                       VimeoIE_IE_NAME,
				"_VALID_URL":                    VimeoIE__VALID_URL,
				"_extract_url":                  VimeoIE__extract_url,
				"_extract_urls":                 VimeoIE__extract_urls,
				"_real_extract":                 VimeoIE__real_extract,
				"_real_initialize":              VimeoIE__real_initialize,
				"_smuggle_referrer":             VimeoIE__smuggle_referrer,
				"_verify_player_video_password": VimeoIE__verify_player_video_password,
			})
		}())
		VimeoOndemandIE = λ.Cal(λ.TypeType, λ.StrLiteral("VimeoOndemandIE"), λ.NewTuple(VimeoIE), func() λ.Dict {
			var (
				VimeoOndemandIE_IE_NAME    λ.Object
				VimeoOndemandIE__VALID_URL λ.Object
			)
			VimeoOndemandIE_IE_NAME = λ.StrLiteral("vimeo:ondemand")
			VimeoOndemandIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?vimeo\\.com/ondemand/(?:[^/]+/)?(?P<id>[^/?#&]+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":    VimeoOndemandIE_IE_NAME,
				"_VALID_URL": VimeoOndemandIE__VALID_URL,
			})
		}())
		VimeoChannelIE = λ.Cal(λ.TypeType, λ.StrLiteral("VimeoChannelIE"), λ.NewTuple(VimeoBaseInfoExtractor), func() λ.Dict {
			var (
				VimeoChannelIE__VALID_URL λ.Object
			)
			VimeoChannelIE__VALID_URL = λ.StrLiteral("https://vimeo\\.com/channels/(?P<id>[^/?#]+)/?(?:$|[?#])")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": VimeoChannelIE__VALID_URL,
			})
		}())
		VimeoUserIE = λ.Cal(λ.TypeType, λ.StrLiteral("VimeoUserIE"), λ.NewTuple(VimeoChannelIE), func() λ.Dict {
			var (
				VimeoUserIE__VALID_URL λ.Object
			)
			VimeoUserIE__VALID_URL = λ.StrLiteral("https://vimeo\\.com/(?!(?:[0-9]+|watchlater)(?:$|[?#/]))(?P<id>[^/]+)(?:/videos|[#?]|$)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": VimeoUserIE__VALID_URL,
			})
		}())
		VimeoAlbumIE = λ.Cal(λ.TypeType, λ.StrLiteral("VimeoAlbumIE"), λ.NewTuple(VimeoBaseInfoExtractor), func() λ.Dict {
			var (
				VimeoAlbumIE__VALID_URL λ.Object
			)
			VimeoAlbumIE__VALID_URL = λ.StrLiteral("https://vimeo\\.com/(?:album|showcase)/(?P<id>\\d+)(?:$|[?#]|/(?!video))")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": VimeoAlbumIE__VALID_URL,
			})
		}())
		VimeoGroupsIE = λ.Cal(λ.TypeType, λ.StrLiteral("VimeoGroupsIE"), λ.NewTuple(VimeoChannelIE), func() λ.Dict {
			var (
				VimeoGroupsIE__VALID_URL λ.Object
			)
			VimeoGroupsIE__VALID_URL = λ.StrLiteral("https://vimeo\\.com/groups/(?P<id>[^/]+)(?:/(?!videos?/\\d+)|$)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": VimeoGroupsIE__VALID_URL,
			})
		}())
		VimeoReviewIE = λ.Cal(λ.TypeType, λ.StrLiteral("VimeoReviewIE"), λ.NewTuple(VimeoBaseInfoExtractor), func() λ.Dict {
			var (
				VimeoReviewIE_IE_NAME          λ.Object
				VimeoReviewIE__VALID_URL       λ.Object
				VimeoReviewIE__real_extract    λ.Object
				VimeoReviewIE__real_initialize λ.Object
			)
			VimeoReviewIE_IE_NAME = λ.StrLiteral("vimeo:review")
			VimeoReviewIE__VALID_URL = λ.StrLiteral("(?P<url>https://vimeo\\.com/[^/]+/review/(?P<id>[^/]+)/[0-9a-f]{10})")
			VimeoReviewIE__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					λ.Calm(ϒself, "_login")
					return λ.None
				})
			VimeoReviewIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒclip_data        λ.Object
						ϒclip_page_config λ.Object
						ϒconfig           λ.Object
						ϒconfig_url       λ.Object
						ϒdata             λ.Object
						ϒinfo_dict        λ.Object
						ϒpage_url         λ.Object
						ϒself             = λargs[0]
						ϒsource_format    λ.Object
						ϒurl              = λargs[1]
						ϒvideo_id         λ.Object
						ϒvideo_password   λ.Object
						ϒviewer           λ.Object
						ϒwebpage          λ.Object
						τmp0              λ.Object
					)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒpage_url = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒdata = λ.Calm(ϒself, "_download_json", λ.Calm(ϒpage_url, "replace", λ.StrLiteral("/review/"), λ.StrLiteral("/review/data/")), ϒvideo_id)
					if λ.Calm(ϒdata, "get", λ.StrLiteral("isLocked")) == λ.True {
						ϒvideo_password = λ.Calm(ϒself, "_get_video_password")
						ϒviewer = λ.Calm(ϒself, "_download_json", λ.StrLiteral("https://vimeo.com/_rv/viewer"), ϒvideo_id)
						ϒwebpage = λ.Calm(ϒself, "_verify_video_password", λ.Add(λ.StrLiteral("https://vimeo.com/"), ϒvideo_id), ϒvideo_id, ϒvideo_password, λ.GetItem(ϒviewer, λ.StrLiteral("xsrft")), λ.GetItem(ϒviewer, λ.StrLiteral("vuid")))
						ϒclip_page_config = λ.Calm(ϒself, "_parse_json", λ.Calm(ϒself, "_search_regex", λ.StrLiteral("window\\.vimeo\\.clip_page_config\\s*=\\s*({.+?});"), ϒwebpage, λ.StrLiteral("clip page config")), ϒvideo_id)
						ϒconfig_url = λ.GetItem(λ.GetItem(ϒclip_page_config, λ.StrLiteral("player")), λ.StrLiteral("config_url"))
						ϒclip_data = func() λ.Object {
							if λv := λ.Calm(ϒclip_page_config, "get", λ.StrLiteral("clip")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.DictLiteral(map[λ.Object]λ.Object{})
							}
						}()
					} else {
						ϒclip_data = λ.GetItem(ϒdata, λ.StrLiteral("clipData"))
						ϒconfig_url = λ.GetItem(ϒclip_data, λ.StrLiteral("configUrl"))
					}
					ϒconfig = λ.Calm(ϒself, "_download_json", ϒconfig_url, ϒvideo_id)
					ϒinfo_dict = λ.Calm(ϒself, "_parse_config", ϒconfig, ϒvideo_id)
					ϒsource_format = λ.Calm(ϒself, "_extract_original_format", λ.Add(ϒpage_url, λ.StrLiteral("/action")), ϒvideo_id)
					if λ.IsTrue(ϒsource_format) {
						λ.Calm(λ.GetItem(ϒinfo_dict, λ.StrLiteral("formats")), "append", ϒsource_format)
					}
					λ.Calm(ϒself, "_vimeo_sort_formats", λ.GetItem(ϒinfo_dict, λ.StrLiteral("formats")))
					λ.SetItem(ϒinfo_dict, λ.StrLiteral("description"), λ.Cal(ϒclean_html, λ.Calm(ϒclip_data, "get", λ.StrLiteral("description"))))
					return ϒinfo_dict
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":          VimeoReviewIE_IE_NAME,
				"_VALID_URL":       VimeoReviewIE__VALID_URL,
				"_real_extract":    VimeoReviewIE__real_extract,
				"_real_initialize": VimeoReviewIE__real_initialize,
			})
		}())
		VimeoWatchLaterIE = λ.Cal(λ.TypeType, λ.StrLiteral("VimeoWatchLaterIE"), λ.NewTuple(VimeoChannelIE), func() λ.Dict {
			var (
				VimeoWatchLaterIE__VALID_URL λ.Object
			)
			VimeoWatchLaterIE__VALID_URL = λ.StrLiteral("https://vimeo\\.com/(?:home/)?watchlater|:vimeowatchlater")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": VimeoWatchLaterIE__VALID_URL,
			})
		}())
		VimeoLikesIE = λ.Cal(λ.TypeType, λ.StrLiteral("VimeoLikesIE"), λ.NewTuple(VimeoChannelIE), func() λ.Dict {
			var (
				VimeoLikesIE__VALID_URL λ.Object
			)
			VimeoLikesIE__VALID_URL = λ.StrLiteral("https://(?:www\\.)?vimeo\\.com/(?P<id>[^/]+)/likes/?(?:$|[?#]|sort:)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": VimeoLikesIE__VALID_URL,
			})
		}())
		VHXEmbedIE = λ.Cal(λ.TypeType, λ.StrLiteral("VHXEmbedIE"), λ.NewTuple(VimeoBaseInfoExtractor), func() λ.Dict {
			var (
				VHXEmbedIE__VALID_URL λ.Object
			)
			VHXEmbedIE__VALID_URL = λ.StrLiteral("https?://embed\\.vhx\\.tv/videos/(?P<id>\\d+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": VHXEmbedIE__VALID_URL,
			})
		}())
	})
}
