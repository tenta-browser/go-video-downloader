// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * nfl/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/nfl.py
 */

package nfl

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor         λ.Object
	NFLArticleIE          λ.Object
	NFLBaseIE             λ.Object
	NFLIE                 λ.Object
	ϒclean_html           λ.Object
	ϒdetermine_ext        λ.Object
	ϒget_element_by_class λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒclean_html = Ωutils.ϒclean_html
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒget_element_by_class = Ωutils.ϒget_element_by_class
		NFLBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("NFLBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NFLBaseIE__VALID_URL_BASE     λ.Object
				NFLBaseIE__VIDEO_CONFIG_REGEX λ.Object
				NFLBaseIE__WORKING            λ.Object
				NFLBaseIE__parse_video_config λ.Object
			)
			NFLBaseIE__VALID_URL_BASE = λ.StrLiteral("(?x)\n                    https?://\n                        (?P<host>\n                            (?:www\\.)?\n                            (?:\n                                (?:\n                                    nfl|\n                                    buffalobills|\n                                    miamidolphins|\n                                    patriots|\n                                    newyorkjets|\n                                    baltimoreravens|\n                                    bengals|\n                                    clevelandbrowns|\n                                    steelers|\n                                    houstontexans|\n                                    colts|\n                                    jaguars|\n                                    (?:titansonline|tennesseetitans)|\n                                    denverbroncos|\n                                    (?:kc)?chiefs|\n                                    raiders|\n                                    chargers|\n                                    dallascowboys|\n                                    giants|\n                                    philadelphiaeagles|\n                                    (?:redskins|washingtonfootball)|\n                                    chicagobears|\n                                    detroitlions|\n                                    packers|\n                                    vikings|\n                                    atlantafalcons|\n                                    panthers|\n                                    neworleanssaints|\n                                    buccaneers|\n                                    azcardinals|\n                                    (?:stlouis|the)rams|\n                                    49ers|\n                                    seahawks\n                                )\\.com|\n                                .+?\\.clubs\\.nfl\\.com\n                            )\n                        )/\n                    ")
			NFLBaseIE__VIDEO_CONFIG_REGEX = λ.StrLiteral("<script[^>]+id=\"[^\"]*video-config-[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}[^\"]*\"[^>]*>\\s*({.+})")
			NFLBaseIE__WORKING = λ.False
			NFLBaseIE__parse_video_config = λ.NewFunction("_parse_video_config",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_config"},
					{Name: "display_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id   = λargs[2]
						ϒext          λ.Object
						ϒimage_url    λ.Object
						ϒinfo         λ.Object
						ϒis_live      λ.Object
						ϒitem         λ.Object
						ϒitem_url     λ.Object
						ϒmcp_id       λ.Object
						ϒmedia_id     λ.Object
						ϒself         = λargs[0]
						ϒthumbnails   λ.Object
						ϒtitle        λ.Object
						ϒvideo_config = λargs[1]
					)
					ϒvideo_config = λ.Calm(ϒself, "_parse_json", ϒvideo_config, ϒdisplay_id)
					ϒitem = λ.GetItem(λ.GetItem(ϒvideo_config, λ.StrLiteral("playlist")), λ.IntLiteral(0))
					ϒmcp_id = λ.Calm(ϒitem, "get", λ.StrLiteral("mcpID"))
					if λ.IsTrue(ϒmcp_id) {
						ϒinfo = λ.Calm(ϒself, "url_result", λ.Add(λ.StrLiteral("anvato:GXvEgwyJeWem8KCYXfeoHWknwP48Mboj:"), ϒmcp_id), λ.StrLiteral("Anvato"), ϒmcp_id)
					} else {
						ϒmedia_id = func() λ.Object {
							if λv := λ.Calm(ϒitem, "get", λ.StrLiteral("id")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.GetItem(ϒitem, λ.StrLiteral("entityId"))
							}
						}()
						ϒtitle = λ.GetItem(ϒitem, λ.StrLiteral("title"))
						ϒitem_url = λ.GetItem(ϒitem, λ.StrLiteral("url"))
						ϒinfo = λ.DictLiteral(map[string]λ.Object{
							"id": ϒmedia_id,
						})
						ϒext = λ.Cal(ϒdetermine_ext, ϒitem_url)
						if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("m3u8"))) {
							λ.SetItem(ϒinfo, λ.StrLiteral("formats"), λ.Calm(ϒself, "_extract_m3u8_formats", ϒitem_url, ϒmedia_id, λ.StrLiteral("mp4")))
							λ.Calm(ϒself, "_sort_formats", λ.GetItem(ϒinfo, λ.StrLiteral("formats")))
						} else {
							λ.SetItem(ϒinfo, λ.StrLiteral("url"), ϒitem_url)
							if λ.Calm(ϒitem, "get", λ.StrLiteral("audio")) == λ.True {
								λ.SetItem(ϒinfo, λ.StrLiteral("vcodec"), λ.StrLiteral("none"))
							}
						}
						ϒis_live = λ.NewBool(λ.Calm(ϒvideo_config, "get", λ.StrLiteral("live")) == λ.True)
						ϒthumbnails = λ.None
						ϒimage_url = func() λ.Object {
							if λv := λ.Calm(ϒitem, "get", λ.Calm(ϒitem, "get", λ.StrLiteral("imageSrc"))); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒitem, "get", λ.Calm(ϒitem, "get", λ.StrLiteral("posterImage")))
							}
						}()
						if λ.IsTrue(ϒimage_url) {
							ϒthumbnails = λ.NewList(λ.DictLiteral(map[string]λ.Object{
								"url": ϒimage_url,
								"ext": λ.Cal(ϒdetermine_ext, ϒimage_url, λ.StrLiteral("jpg")),
							}))
						}
						λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
							"title": func() λ.Object {
								if λ.IsTrue(ϒis_live) {
									return λ.Calm(ϒself, "_live_title", ϒtitle)
								} else {
									return ϒtitle
								}
							}(),
							"is_live":     ϒis_live,
							"description": λ.Cal(ϒclean_html, λ.Calm(ϒitem, "get", λ.StrLiteral("description"))),
							"thumbnails":  ϒthumbnails,
						}))
					}
					return ϒinfo
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL_BASE":     NFLBaseIE__VALID_URL_BASE,
				"_VIDEO_CONFIG_REGEX": NFLBaseIE__VIDEO_CONFIG_REGEX,
				"_WORKING":            NFLBaseIE__WORKING,
				"_parse_video_config": NFLBaseIE__parse_video_config,
			})
		}())
		NFLIE = λ.Cal(λ.TypeType, λ.StrLiteral("NFLIE"), λ.NewTuple(NFLBaseIE), func() λ.Dict {
			var (
				NFLIE_IE_NAME       λ.Object
				NFLIE__VALID_URL    λ.Object
				NFLIE__real_extract λ.Object
			)
			NFLIE_IE_NAME = λ.StrLiteral("nfl.com")
			NFLIE__VALID_URL = λ.Add(λ.GetAttr(NFLBaseIE, "_VALID_URL_BASE", nil), λ.StrLiteral("(?:videos?|listen|audio)/(?P<id>[^/#?&]+)"))
			NFLIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒwebpage    λ.Object
					)
					ϒdisplay_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
					return λ.Calm(ϒself, "_parse_video_config", λ.Calm(ϒself, "_search_regex", λ.GetAttr(ϒself, "_VIDEO_CONFIG_REGEX", nil), ϒwebpage, λ.StrLiteral("video config")), ϒdisplay_id)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       NFLIE_IE_NAME,
				"_VALID_URL":    NFLIE__VALID_URL,
				"_real_extract": NFLIE__real_extract,
			})
		}())
		NFLArticleIE = λ.Cal(λ.TypeType, λ.StrLiteral("NFLArticleIE"), λ.NewTuple(NFLBaseIE), func() λ.Dict {
			var (
				NFLArticleIE__VALID_URL λ.Object
			)
			NFLArticleIE__VALID_URL = λ.Add(λ.GetAttr(NFLBaseIE, "_VALID_URL_BASE", nil), λ.StrLiteral("news/(?P<id>[^/#?&]+)"))
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": NFLArticleIE__VALID_URL,
			})
		}())
	})
}
