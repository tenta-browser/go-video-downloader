// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * teachable/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/teachable.py
 */

package teachable

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωwistia "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/wistia"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError        λ.Object
	InfoExtractor         λ.Object
	TeachableBaseIE       λ.Object
	WistiaIE              λ.Object
	ϒclean_html           λ.Object
	ϒget_element_by_class λ.Object
	ϒint_or_none          λ.Object
	ϒstrip_or_none        λ.Object
	ϒurlencode_postdata   λ.Object
	ϒurljoin              λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		WistiaIE = Ωwistia.WistiaIE
		ϒclean_html = Ωutils.ϒclean_html
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒget_element_by_class = Ωutils.ϒget_element_by_class
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		ϒurljoin = Ωutils.ϒurljoin
		TeachableBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("TeachableBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TeachableBaseIE__SITES               λ.Object
				TeachableBaseIE__URL_PREFIX          λ.Object
				TeachableBaseIE__VALID_URL_SUB_TUPLE λ.Object
			)
			TeachableBaseIE__URL_PREFIX = λ.StrLiteral("teachable:")
			TeachableBaseIE__SITES = λ.DictLiteral(map[string]string{
				"v1.upskillcourses.com":   "upskill",
				"gns3.teachable.com":      "gns3",
				"academyhacker.com":       "academyhacker",
				"stackskills.com":         "stackskills",
				"market.saleshacker.com":  "saleshacker",
				"learnability.org":        "learnability",
				"edurila.com":             "edurila",
				"courses.workitdaily.com": "workitdaily",
			})
			TeachableBaseIE__VALID_URL_SUB_TUPLE = λ.NewTuple(
				TeachableBaseIE__URL_PREFIX,
				λ.Calm(λ.StrLiteral("|"), "join", λ.Cal(λ.NewFunction("<generator>",
					nil,
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
							var (
								ϒsite λ.Object
								τmp0  λ.Object
								τmp1  λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(TeachableBaseIE__SITES, "keys"))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒsite = τmp1
								λgy.Yield(λ.Cal(Ωre.ϒescape, ϒsite))
							}
							return λ.None
						})
					}))),
			)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_SITES":               TeachableBaseIE__SITES,
				"_URL_PREFIX":          TeachableBaseIE__URL_PREFIX,
				"_VALID_URL_SUB_TUPLE": TeachableBaseIE__VALID_URL_SUB_TUPLE,
			})
		}())
	})
}
