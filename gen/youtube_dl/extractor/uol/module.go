// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * uol/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/uol.py
 */

package uol

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor                  λ.Object
	UOLIE                          λ.Object
	ϒclean_html                    λ.Object
	ϒcompat_str                    λ.Object
	ϒcompat_urllib_parse_urlencode λ.Object
	ϒint_or_none                   λ.Object
	ϒparse_duration                λ.Object
	ϒparse_iso8601                 λ.Object
	ϒqualities                     λ.Object
	ϒupdate_url_query              λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒcompat_urllib_parse_urlencode = Ωcompat.ϒcompat_urllib_parse_urlencode
		ϒclean_html = Ωutils.ϒclean_html
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒqualities = Ωutils.ϒqualities
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		UOLIE = λ.Cal(λ.TypeType, λ.StrLiteral("UOLIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				UOLIE_IE_NAME       λ.Object
				UOLIE__VALID_URL    λ.Object
				UOLIE__real_extract λ.Object
			)
			UOLIE_IE_NAME = λ.StrLiteral("uol.com.br")
			UOLIE__VALID_URL = λ.StrLiteral("https?://(?:.+?\\.)?uol\\.com\\.br/.*?(?:(?:mediaId|v)=|view/(?:[a-z0-9]+/)?|video(?:=|/(?:\\d{4}/\\d{2}/\\d{2}/)?))(?P<id>\\d+|[\\w-]+-[A-Z0-9]+)")
			UOLIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒencoded_query   λ.Object
						ϒf               λ.Object
						ϒf_url           λ.Object
						ϒformat_id       λ.Object
						ϒformats         λ.Object
						ϒk               λ.Object
						ϒm3u8_f          λ.Object
						ϒm3u8_formats    λ.Object
						ϒmedia_id        λ.Object
						ϒq               λ.Object
						ϒq_url           λ.Object
						ϒquality         λ.Object
						ϒquery           λ.Object
						ϒself            = λargs[0]
						ϒtag             λ.Object
						ϒtag_description λ.Object
						ϒtags            λ.Object
						ϒthumbnails      λ.Object
						ϒtitle           λ.Object
						ϒuol_formats     λ.Object
						ϒurl             = λargs[1]
						ϒv               λ.Object
						ϒver             λ.Object
						ϒvideo_data      λ.Object
						ϒvideo_id        λ.Object
						τmp0             λ.Object
						τmp1             λ.Object
						τmp2             λ.Object
						τmp3             λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒvideo_data = λ.GetItem(λ.Calm(ϒself, "_download_json", λ.Add(λ.StrLiteral("https://api.mais.uol.com.br/apiuol/v3/media/detail/"), ϒvideo_id), ϒvideo_id), λ.StrLiteral("item"))
					ϒmedia_id = λ.Cal(ϒcompat_str, λ.GetItem(ϒvideo_data, λ.StrLiteral("mediaId")))
					ϒtitle = λ.GetItem(ϒvideo_data, λ.StrLiteral("title"))
					ϒver = λ.Calm(ϒvideo_data, "get", λ.StrLiteral("revision"), λ.IntLiteral(2))
					ϒuol_formats = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("https://croupier.mais.uol.com.br/v3/formats/%s/jsonp"), ϒmedia_id), ϒmedia_id)
					ϒquality = λ.Cal(ϒqualities, λ.NewList(
						λ.StrLiteral("mobile"),
						λ.StrLiteral("WEBM"),
						λ.StrLiteral("360p"),
						λ.StrLiteral("720p"),
						λ.StrLiteral("1080p"),
					))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒuol_formats, "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = λ.UnpackIterable(τmp1, 2)
						ϒformat_id = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒf = λ.GetItem(τmp2, λ.IntLiteral(1))
						if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒf, λ.DictType)) {
							continue
						}
						ϒf_url = func() λ.Object {
							if λv := λ.Calm(ϒf, "get", λ.StrLiteral("url")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒf, "get", λ.StrLiteral("secureUrl"))
							}
						}()
						if !λ.IsTrue(ϒf_url) {
							continue
						}
						ϒquery = λ.DictLiteral(map[string]λ.Object{
							"ver": ϒver,
							"r":   λ.StrLiteral("http://mais.uol.com.br"),
						})
						τmp2 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
							λ.StrLiteral("token"),
							λ.StrLiteral("sign"),
						))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒk = τmp3
							ϒv = λ.Calm(ϒf, "get", ϒk)
							if λ.IsTrue(ϒv) {
								λ.SetItem(ϒquery, ϒk, ϒv)
							}
						}
						ϒf_url = λ.Cal(ϒupdate_url_query, ϒf_url, ϒquery)
						ϒformat_id = ϒformat_id
						if λ.IsTrue(λ.Eq(ϒformat_id, λ.StrLiteral("HLS"))) {
							ϒm3u8_formats = λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								ϒf_url,
								ϒmedia_id,
								λ.StrLiteral("mp4"),
								λ.StrLiteral("m3u8_native"),
							), λ.KWArgs{
								{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
								{Name: "fatal", Value: λ.False},
							})
							ϒencoded_query = λ.Cal(ϒcompat_urllib_parse_urlencode, ϒquery)
							τmp2 = λ.Cal(λ.BuiltinIter, ϒm3u8_formats)
							for {
								if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
									break
								}
								ϒm3u8_f = τmp3
								λ.SetItem(ϒm3u8_f, λ.StrLiteral("extra_param_to_segment_url"), ϒencoded_query)
								λ.SetItem(ϒm3u8_f, λ.StrLiteral("url"), λ.Cal(ϒupdate_url_query, λ.GetItem(ϒm3u8_f, λ.StrLiteral("url")), ϒquery))
							}
							λ.Calm(ϒformats, "extend", ϒm3u8_formats)
							continue
						}
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"format_id":  ϒformat_id,
							"url":        ϒf_url,
							"quality":    λ.Cal(ϒquality, ϒformat_id),
							"preference": λ.Neg(λ.IntLiteral(1)),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒtags = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("tags"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒtag = τmp1
						ϒtag_description = λ.Calm(ϒtag, "get", λ.StrLiteral("description"))
						if !λ.IsTrue(ϒtag_description) {
							continue
						}
						λ.Calm(ϒtags, "append", ϒtag_description)
					}
					ϒthumbnails = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.StrLiteral("Small"),
						λ.StrLiteral("Medium"),
						λ.StrLiteral("Wmedium"),
						λ.StrLiteral("Large"),
						λ.StrLiteral("Wlarge"),
						λ.StrLiteral("Xlarge"),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒq = τmp1
						ϒq_url = λ.Calm(ϒvideo_data, "get", λ.Add(λ.StrLiteral("thumb"), ϒq))
						if !λ.IsTrue(ϒq_url) {
							continue
						}
						λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
							"id":  ϒq,
							"url": ϒq_url,
						}))
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒmedia_id,
						"title":       ϒtitle,
						"description": λ.Cal(ϒclean_html, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("description"))),
						"thumbnails":  ϒthumbnails,
						"duration":    λ.Cal(ϒparse_duration, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("duration"))),
						"tags":        ϒtags,
						"formats":     ϒformats,
						"timestamp":   λ.Cal(ϒparse_iso8601, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("publishDate")), λ.StrLiteral(" ")),
						"view_count":  λ.Cal(ϒint_or_none, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("viewsQtty"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       UOLIE_IE_NAME,
				"_VALID_URL":    UOLIE__VALID_URL,
				"_real_extract": UOLIE__real_extract,
			})
		}())
	})
}
