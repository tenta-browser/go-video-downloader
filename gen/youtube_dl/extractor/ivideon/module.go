// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * ivideon/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/ivideon.py
 */

package ivideon

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor                  λ.Object
	IvideonIE                      λ.Object
	ϒcompat_urllib_parse_urlencode λ.Object
	ϒqualities                     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_urllib_parse_urlencode = Ωcompat.ϒcompat_urllib_parse_urlencode
		ϒqualities = Ωutils.ϒqualities
		IvideonIE = λ.Cal(λ.TypeType, λ.StrLiteral("IvideonIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				IvideonIE_IE_NAME       λ.Object
				IvideonIE__QUALITIES    λ.Object
				IvideonIE__VALID_URL    λ.Object
				IvideonIE__real_extract λ.Object
			)
			IvideonIE_IE_NAME = λ.StrLiteral("ivideon")
			IvideonIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?ivideon\\.com/tv/(?:[^/]+/)*camera/(?P<id>\\d+-[\\da-f]+)/(?P<camera_id>\\d+)")
			IvideonIE__QUALITIES = λ.NewTuple(
				λ.StrLiteral("low"),
				λ.StrLiteral("mid"),
				λ.StrLiteral("hi"),
			)
			IvideonIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcamera_id     λ.Object
						ϒcamera_info   λ.Object
						ϒcamera_name   λ.Object
						ϒcamera_url    λ.Object
						ϒconfig        λ.Object
						ϒconfig_string λ.Object
						ϒdescription   λ.Object
						ϒformats       λ.Object
						ϒmobj          λ.Object
						ϒquality       λ.Object
						ϒself          = λargs[0]
						ϒserver_id     λ.Object
						ϒurl           = λargs[1]
						ϒwebpage       λ.Object
						τmp0           λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					τmp0 = λ.UnpackIterable(λ.NewTuple(
						λ.Calm(ϒmobj, "group", λ.StrLiteral("id")),
						λ.Calm(ϒmobj, "group", λ.StrLiteral("camera_id")),
					), 2)
					ϒserver_id = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒcamera_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					τmp0 = λ.UnpackIterable(λ.NewTuple(
						λ.None,
						λ.None,
					), 2)
					ϒcamera_name = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒdescription = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒcamera_url = λ.Cal(Ωparse.ϒurljoin, ϒurl, λ.Mod(λ.StrLiteral("/tv/camera/%s/%s/"), λ.NewTuple(
						ϒserver_id,
						ϒcamera_id,
					)))
					ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						ϒcamera_url,
						ϒserver_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(ϒwebpage) {
						ϒconfig_string = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("var\\s+config\\s*=\\s*({.+?});"),
							ϒwebpage,
							λ.StrLiteral("config"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
						if λ.IsTrue(ϒconfig_string) {
							ϒconfig = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
								ϒconfig_string,
								ϒserver_id,
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							})
							ϒcamera_info = λ.Calm(λ.Calm(ϒconfig, "get", λ.StrLiteral("ivTvAppOptions"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("currentCameraInfo"))
							if λ.IsTrue(ϒcamera_info) {
								ϒcamera_name = λ.Calm(ϒcamera_info, "get", λ.StrLiteral("camera_name"))
								ϒdescription = λ.Calm(λ.Calm(ϒcamera_info, "get", λ.StrLiteral("misc"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("description"))
							}
						}
						if !λ.IsTrue(ϒcamera_name) {
							ϒcamera_name = func() λ.Object {
								if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
									λ.StrLiteral("name"),
									ϒwebpage,
									λ.StrLiteral("camera name"),
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
								}); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
										λ.StrLiteral("<h1[^>]+class=\"b-video-title\"[^>]*>([^<]+)"),
										ϒwebpage,
										λ.StrLiteral("camera name"),
									), λ.KWArgs{
										{Name: "default", Value: λ.None},
									})
								}
							}()
						}
					}
					ϒquality = λ.Cal(ϒqualities, λ.GetAttr(ϒself, "_QUALITIES", nil))
					ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒformat_id λ.Object
									τmp0       λ.Object
									τmp1       λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetAttr(ϒself, "_QUALITIES", nil))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒformat_id = τmp1
									λgy.Yield(λ.DictLiteral(map[string]λ.Object{
										"url": λ.Mod(λ.StrLiteral("https://streaming.ivideon.com/flv/live?%s"), λ.Cal(ϒcompat_urllib_parse_urlencode, λ.DictLiteral(map[string]λ.Object{
											"server":    ϒserver_id,
											"camera":    ϒcamera_id,
											"sessionId": λ.StrLiteral("demo"),
											"q":         λ.Cal(ϒquality, ϒformat_id),
										}))),
										"format_id": ϒformat_id,
										"ext":       λ.StrLiteral("flv"),
										"quality":   λ.Cal(ϒquality, ϒformat_id),
									}))
								}
								return λ.None
							})
						})))
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id": ϒserver_id,
						"title": λ.Calm(ϒself, "_live_title", func() λ.Object {
							if λv := ϒcamera_name; λ.IsTrue(λv) {
								return λv
							} else {
								return ϒserver_id
							}
						}()),
						"description": ϒdescription,
						"is_live":     λ.True,
						"formats":     ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       IvideonIE_IE_NAME,
				"_QUALITIES":    IvideonIE__QUALITIES,
				"_VALID_URL":    IvideonIE__VALID_URL,
				"_real_extract": IvideonIE__real_extract,
			})
		}())
	})
}
