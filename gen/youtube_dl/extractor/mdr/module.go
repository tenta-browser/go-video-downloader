// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * mdr/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/mdr.py
 */

package mdr

import (
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor   λ.Object
	MDRIE           λ.Object
	ϒcompat_str     λ.Object
	ϒdetermine_ext  λ.Object
	ϒint_or_none    λ.Object
	ϒparse_duration λ.Object
	ϒparse_iso8601  λ.Object
	ϒurl_or_none    λ.Object
	ϒxpath_text     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒurl_or_none = Ωutils.ϒurl_or_none
		ϒxpath_text = Ωutils.ϒxpath_text
		MDRIE = λ.Cal(λ.TypeType, λ.StrLiteral("MDRIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				MDRIE__GEO_COUNTRIES λ.Object
				MDRIE__VALID_URL     λ.Object
				MDRIE__real_extract  λ.Object
			)
			MDRIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?(?:mdr|kika)\\.de/(?:.*)/[a-z-]+-?(?P<id>\\d+)(?:_.+?)?\\.html")
			MDRIE__GEO_COUNTRIES = λ.NewList(λ.StrLiteral("DE"))
			MDRIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒabr            λ.Object
						ϒasset          λ.Object
						ϒdata_url       λ.Object
						ϒdescription    λ.Object
						ϒdoc            λ.Object
						ϒduration       λ.Object
						ϒext            λ.Object
						ϒf              λ.Object
						ϒfilesize       λ.Object
						ϒformat_id      λ.Object
						ϒformats        λ.Object
						ϒmedia_type     λ.Object
						ϒprocessed_urls λ.Object
						ϒself           = λargs[0]
						ϒsource         λ.Object
						ϒtimestamp      λ.Object
						ϒtitle          λ.Object
						ϒtype_          λ.Object
						ϒuploader       λ.Object
						ϒurl            = λargs[1]
						ϒurl_el         λ.Object
						ϒvbr            λ.Object
						ϒvideo_id       λ.Object
						ϒvideo_url      λ.Object
						ϒwebpage        λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
						τmp2            λ.Object
						τmp3            λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒdata_url = λ.Calm(λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(?:dataURL|playerXml(?:[\"\\'])?)\\s*:\\s*([\"\\'])(?P<url>.+?-avCustom\\.xml)\\1"),
						ϒwebpage,
						λ.StrLiteral("data url"),
					), λ.KWArgs{
						{Name: "group", Value: λ.StrLiteral("url")},
					}), "replace", λ.StrLiteral("\\/"), λ.StrLiteral("/"))
					ϒdoc = λ.Calm(ϒself, "_download_xml", λ.Cal(Ωparse.ϒurljoin, ϒurl, ϒdata_url), ϒvideo_id)
					ϒtitle = λ.Call(ϒxpath_text, λ.NewArgs(
						ϒdoc,
						λ.NewList(
							λ.StrLiteral("./title"),
							λ.StrLiteral("./broadcast/broadcastName"),
						),
						λ.StrLiteral("title"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.True},
					})
					ϒtype_ = λ.Call(ϒxpath_text, λ.NewArgs(
						ϒdoc,
						λ.StrLiteral("./type"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒformats = λ.NewList()
					ϒprocessed_urls = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒdoc, "findall", λ.StrLiteral("./assets/asset")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒasset = τmp1
						τmp2 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
							λ.StrLiteral("download"),
							λ.StrLiteral("progressiveDownload"),
							λ.StrLiteral("dynamicHttpStreamingRedirector"),
							λ.StrLiteral("adaptiveHttpStreamingRedirector"),
						))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒsource = τmp3
							ϒurl_el = λ.Calm(ϒasset, "find", λ.Mod(λ.StrLiteral("./%sUrl"), ϒsource))
							if ϒurl_el == λ.None {
								continue
							}
							ϒvideo_url = λ.Cal(ϒurl_or_none, λ.GetAttr(ϒurl_el, "text", nil))
							if λ.IsTrue(func() λ.Object {
								if λv := λ.NewBool(!λ.IsTrue(ϒvideo_url)); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewBool(λ.Contains(ϒprocessed_urls, ϒvideo_url))
								}
							}()) {
								continue
							}
							λ.Calm(ϒprocessed_urls, "append", ϒvideo_url)
							ϒext = λ.Cal(ϒdetermine_ext, ϒvideo_url)
							if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("m3u8"))) {
								λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒvideo_url,
									ϒvideo_id,
									λ.StrLiteral("mp4"),
								), λ.KWArgs{
									{Name: "entry_protocol", Value: λ.StrLiteral("m3u8_native")},
									{Name: "preference", Value: λ.IntLiteral(0)},
									{Name: "m3u8_id", Value: λ.StrLiteral("HLS")},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("f4m"))) {
									λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
										λ.Add(ϒvideo_url, λ.StrLiteral("?hdcore=3.7.0&plugin=aasp-3.7.0.39.44")),
										ϒvideo_id,
									), λ.KWArgs{
										{Name: "preference", Value: λ.IntLiteral(0)},
										{Name: "f4m_id", Value: λ.StrLiteral("HDS")},
										{Name: "fatal", Value: λ.False},
									}))
								} else {
									ϒmedia_type = λ.Call(ϒxpath_text, λ.NewArgs(
										ϒasset,
										λ.StrLiteral("./mediaType"),
										λ.StrLiteral("media type"),
									), λ.KWArgs{
										{Name: "default", Value: λ.StrLiteral("MP4")},
									})
									ϒvbr = λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒasset, λ.StrLiteral("./bitrateVideo"), λ.StrLiteral("vbr")), λ.IntLiteral(1000))
									ϒabr = λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒasset, λ.StrLiteral("./bitrateAudio"), λ.StrLiteral("abr")), λ.IntLiteral(1000))
									ϒfilesize = λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒasset, λ.StrLiteral("./fileSize"), λ.StrLiteral("file size")))
									ϒformat_id = λ.NewList(ϒmedia_type)
									if λ.IsTrue(func() λ.Object {
										if λv := ϒvbr; λ.IsTrue(λv) {
											return λv
										} else {
											return ϒabr
										}
									}()) {
										λ.Calm(ϒformat_id, "append", λ.Cal(ϒcompat_str, func() λ.Object {
											if λv := ϒvbr; λ.IsTrue(λv) {
												return λv
											} else {
												return ϒabr
											}
										}()))
									}
									ϒf = λ.DictLiteral(map[string]λ.Object{
										"url":       ϒvideo_url,
										"format_id": λ.Calm(λ.StrLiteral("-"), "join", ϒformat_id),
										"filesize":  ϒfilesize,
										"abr":       ϒabr,
										"vbr":       ϒvbr,
									})
									if λ.IsTrue(ϒvbr) {
										λ.Calm(ϒf, "update", λ.DictLiteral(map[string]λ.Object{
											"width":  λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒasset, λ.StrLiteral("./frameWidth"), λ.StrLiteral("width"))),
											"height": λ.Cal(ϒint_or_none, λ.Cal(ϒxpath_text, ϒasset, λ.StrLiteral("./frameHeight"), λ.StrLiteral("height"))),
										}))
									}
									if λ.IsTrue(λ.Eq(ϒtype_, λ.StrLiteral("audio"))) {
										λ.SetItem(ϒf, λ.StrLiteral("vcodec"), λ.StrLiteral("none"))
									}
									λ.Calm(ϒformats, "append", ϒf)
								}
							}
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒdescription = λ.Cal(ϒxpath_text, ϒdoc, λ.StrLiteral("./broadcast/broadcastDescription"), λ.StrLiteral("description"))
					ϒtimestamp = λ.Cal(ϒparse_iso8601, λ.Call(ϒxpath_text, λ.NewArgs(
						ϒdoc,
						λ.NewList(
							λ.StrLiteral("./broadcast/broadcastDate"),
							λ.StrLiteral("./broadcast/broadcastStartDate"),
							λ.StrLiteral("./broadcast/broadcastEndDate"),
						),
						λ.StrLiteral("timestamp"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒduration = λ.Cal(ϒparse_duration, λ.Cal(ϒxpath_text, ϒdoc, λ.StrLiteral("./duration"), λ.StrLiteral("duration")))
					ϒuploader = λ.Cal(ϒxpath_text, ϒdoc, λ.StrLiteral("./rights"), λ.StrLiteral("uploader"))
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": ϒdescription,
						"timestamp":   ϒtimestamp,
						"duration":    ϒduration,
						"uploader":    ϒuploader,
						"formats":     ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_GEO_COUNTRIES": MDRIE__GEO_COUNTRIES,
				"_VALID_URL":     MDRIE__VALID_URL,
				"_real_extract":  MDRIE__real_extract,
			})
		}())
	})
}
