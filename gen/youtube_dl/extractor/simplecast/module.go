// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * simplecast/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/simplecast.py
 */

package simplecast

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor       λ.Object
	SimplecastBaseIE    λ.Object
	SimplecastEpisodeIE λ.Object
	SimplecastIE        λ.Object
	SimplecastPodcastIE λ.Object
	ϒclean_podcast_url  λ.Object
	ϒint_or_none        λ.Object
	ϒparse_iso8601      λ.Object
	ϒstrip_or_none      λ.Object
	ϒtry_get            λ.Object
	ϒurlencode_postdata λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒclean_podcast_url = Ωutils.ϒclean_podcast_url
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒurlencode_postdata = Ωutils.ϒurlencode_postdata
		SimplecastBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("SimplecastBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SimplecastBaseIE__API_BASE        λ.Object
				SimplecastBaseIE__UUID_REGEX      λ.Object
				SimplecastBaseIE__call_api        λ.Object
				SimplecastBaseIE__call_search_api λ.Object
				SimplecastBaseIE__parse_episode   λ.Object
			)
			SimplecastBaseIE__UUID_REGEX = λ.StrLiteral("[\\da-f]{8}-(?:[\\da-f]{4}-){3}[\\da-f]{12}")
			SimplecastBaseIE__API_BASE = λ.StrLiteral("https://api.simplecast.com/")
			SimplecastBaseIE__call_api = λ.NewFunction("_call_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "path_tmpl"},
					{Name: "video_id"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒpath_tmpl = λargs[1]
						ϒself      = λargs[0]
						ϒvideo_id  = λargs[2]
					)
					return λ.Calm(ϒself, "_download_json", λ.Add(λ.GetAttr(ϒself, "_API_BASE", nil), λ.Mod(ϒpath_tmpl, ϒvideo_id)), ϒvideo_id)
				})
			SimplecastBaseIE__call_search_api = λ.NewFunction("_call_search_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "resource"},
					{Name: "resource_id"},
					{Name: "resource_url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒresource     = λargs[1]
						ϒresource_id  = λargs[2]
						ϒresource_url = λargs[3]
						ϒself         = λargs[0]
					)
					return λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("https://api.simplecast.com/%ss/search"), ϒresource),
						ϒresource_id,
					), λ.KWArgs{
						{Name: "data", Value: λ.Cal(ϒurlencode_postdata, λ.DictLiteral(map[string]λ.Object{
							"url": ϒresource_url,
						}))},
					})
				})
			SimplecastBaseIE__parse_episode = λ.NewFunction("_parse_episode",
				[]λ.Param{
					{Name: "self"},
					{Name: "episode"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaudio_file     λ.Object
						ϒaudio_file_url λ.Object
						ϒchannel_url    λ.Object
						ϒepisode        = λargs[1]
						ϒepisode_id     λ.Object
						ϒseason         λ.Object
						ϒseason_href    λ.Object
						ϒseason_id      λ.Object
						ϒself           = λargs[0]
						ϒtitle          λ.Object
						ϒwebpage_url    λ.Object
					)
					ϒepisode_id = λ.GetItem(ϒepisode, λ.StrLiteral("id"))
					ϒtitle = λ.Calm(λ.GetItem(ϒepisode, λ.StrLiteral("title")), "strip")
					ϒaudio_file = func() λ.Object {
						if λv := λ.Calm(ϒepisode, "get", λ.StrLiteral("audio_file")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒaudio_file_url = func() λ.Object {
						if λv := λ.Calm(ϒaudio_file, "get", λ.StrLiteral("url")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Calm(ϒepisode, "get", λ.StrLiteral("audio_file_url")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒepisode, λ.StrLiteral("enclosure_url"))
						}
					}()
					ϒseason = func() λ.Object {
						if λv := λ.Calm(ϒepisode, "get", λ.StrLiteral("season")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒseason_href = λ.Calm(ϒseason, "get", λ.StrLiteral("href"))
					ϒseason_id = λ.None
					if λ.IsTrue(ϒseason_href) {
						ϒseason_id = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.Mod(λ.StrLiteral("https?://api.simplecast.com/seasons/(%s)"), λ.GetAttr(ϒself, "_UUID_REGEX", nil)),
							ϒseason_href,
							λ.StrLiteral("season id"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
					}
					ϒwebpage_url = λ.Calm(ϒepisode, "get", λ.StrLiteral("episode_url"))
					ϒchannel_url = λ.None
					if λ.IsTrue(ϒwebpage_url) {
						ϒchannel_url = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("(https?://[^/]+\\.simplecast\\.com)"),
							ϒwebpage_url,
							λ.StrLiteral("channel url"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒepisode_id,
						"display_id":  λ.Calm(ϒepisode, "get", λ.StrLiteral("slug")),
						"title":       ϒtitle,
						"url":         λ.Cal(ϒclean_podcast_url, ϒaudio_file_url),
						"webpage_url": ϒwebpage_url,
						"channel_url": ϒchannel_url,
						"series": λ.Cal(ϒtry_get, ϒepisode, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("podcast")), λ.StrLiteral("title"))
							})),
						"season_number":  λ.Cal(ϒint_or_none, λ.Calm(ϒseason, "get", λ.StrLiteral("number"))),
						"season_id":      ϒseason_id,
						"thumbnail":      λ.Calm(ϒepisode, "get", λ.StrLiteral("image_url")),
						"episode_id":     ϒepisode_id,
						"episode_number": λ.Cal(ϒint_or_none, λ.Calm(ϒepisode, "get", λ.StrLiteral("number"))),
						"description":    λ.Cal(ϒstrip_or_none, λ.Calm(ϒepisode, "get", λ.StrLiteral("description"))),
						"timestamp":      λ.Cal(ϒparse_iso8601, λ.Calm(ϒepisode, "get", λ.StrLiteral("published_at"))),
						"duration":       λ.Cal(ϒint_or_none, λ.Calm(ϒepisode, "get", λ.StrLiteral("duration"))),
						"filesize": λ.Cal(ϒint_or_none, func() λ.Object {
							if λv := λ.Calm(ϒaudio_file, "get", λ.StrLiteral("size")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒepisode, "get", λ.StrLiteral("audio_file_size"))
							}
						}()),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_API_BASE":        SimplecastBaseIE__API_BASE,
				"_UUID_REGEX":      SimplecastBaseIE__UUID_REGEX,
				"_call_api":        SimplecastBaseIE__call_api,
				"_call_search_api": SimplecastBaseIE__call_search_api,
				"_parse_episode":   SimplecastBaseIE__parse_episode,
			})
		}())
		SimplecastIE = λ.Cal(λ.TypeType, λ.StrLiteral("SimplecastIE"), λ.NewTuple(SimplecastBaseIE), func() λ.Dict {
			var (
				SimplecastIE_IE_NAME           λ.Object
				SimplecastIE__COMMON_TEST_INFO λ.Object
				SimplecastIE__VALID_URL        λ.Object
				SimplecastIE__real_extract     λ.Object
			)
			SimplecastIE_IE_NAME = λ.StrLiteral("simplecast")
			SimplecastIE__VALID_URL = λ.Mod(λ.StrLiteral("https?://(?:api\\.simplecast\\.com/episodes|player\\.simplecast\\.com)/(?P<id>%s)"), λ.GetAttr(SimplecastBaseIE, "_UUID_REGEX", nil))
			SimplecastIE__COMMON_TEST_INFO = λ.DictLiteral(map[string]λ.Object{
				"display_id":     λ.StrLiteral("errant-signal-chris-franklin-new-wave-video-essays"),
				"id":             λ.StrLiteral("b6dc49a2-9404-4853-9aa9-9cfc097be876"),
				"ext":            λ.StrLiteral("mp3"),
				"title":          λ.StrLiteral("Errant Signal - Chris Franklin & New Wave Video Essays"),
				"episode_number": λ.IntLiteral(1),
				"episode_id":     λ.StrLiteral("b6dc49a2-9404-4853-9aa9-9cfc097be876"),
				"description":    λ.StrLiteral("md5:34752789d3d2702e2d2c975fbd14f357"),
				"season_number":  λ.IntLiteral(1),
				"season_id":      λ.StrLiteral("e23df0da-bae4-4531-8bbf-71364a88dc13"),
				"series":         λ.StrLiteral("The RE:BIND.io Podcast"),
				"duration":       λ.IntLiteral(5343),
				"timestamp":      λ.IntLiteral(1580979475),
				"upload_date":    λ.StrLiteral("20200206"),
				"webpage_url":    λ.StrLiteral("re:^https?://the-re-bind-io-podcast\\.simplecast\\.com/episodes/errant-signal-chris-franklin-new-wave-video-essays"),
				"channel_url":    λ.StrLiteral("re:^https?://the-re-bind-io-podcast\\.simplecast\\.com$"),
			})
			SimplecastIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒepisode    λ.Object
						ϒepisode_id λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
					)
					ϒepisode_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒepisode = λ.Calm(ϒself, "_call_api", λ.StrLiteral("episodes/%s"), ϒepisode_id)
					return λ.Calm(ϒself, "_parse_episode", ϒepisode)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":           SimplecastIE_IE_NAME,
				"_COMMON_TEST_INFO": SimplecastIE__COMMON_TEST_INFO,
				"_VALID_URL":        SimplecastIE__VALID_URL,
				"_real_extract":     SimplecastIE__real_extract,
			})
		}())
		SimplecastEpisodeIE = λ.Cal(λ.TypeType, λ.StrLiteral("SimplecastEpisodeIE"), λ.NewTuple(SimplecastBaseIE), func() λ.Dict {
			var (
				SimplecastEpisodeIE_IE_NAME       λ.Object
				SimplecastEpisodeIE__VALID_URL    λ.Object
				SimplecastEpisodeIE__real_extract λ.Object
			)
			SimplecastEpisodeIE_IE_NAME = λ.StrLiteral("simplecast:episode")
			SimplecastEpisodeIE__VALID_URL = λ.StrLiteral("https?://(?!api\\.)[^/]+\\.simplecast\\.com/episodes/(?P<id>[^/?&#]+)")
			SimplecastEpisodeIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒepisode λ.Object
						ϒmobj    λ.Object
						ϒself    = λargs[0]
						ϒurl     = λargs[1]
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒepisode = λ.Calm(ϒself, "_call_search_api", λ.StrLiteral("episode"), λ.Calm(ϒmobj, "group", λ.IntLiteral(1)), λ.Calm(ϒmobj, "group", λ.IntLiteral(0)))
					return λ.Calm(ϒself, "_parse_episode", ϒepisode)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       SimplecastEpisodeIE_IE_NAME,
				"_VALID_URL":    SimplecastEpisodeIE__VALID_URL,
				"_real_extract": SimplecastEpisodeIE__real_extract,
			})
		}())
		SimplecastPodcastIE = λ.Cal(λ.TypeType, λ.StrLiteral("SimplecastPodcastIE"), λ.NewTuple(SimplecastBaseIE), func() λ.Dict {
			var (
				SimplecastPodcastIE__VALID_URL λ.Object
			)
			SimplecastPodcastIE__VALID_URL = λ.StrLiteral("https?://(?!(?:api|cdn|embed|feeds|player)\\.)(?P<id>[^/]+)\\.simplecast\\.com(?!/episodes/[^/?&#]+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": SimplecastPodcastIE__VALID_URL,
			})
		}())
	})
}
