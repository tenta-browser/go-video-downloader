// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * screencastomatic/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/screencastomatic.py
 */

package screencastomatic

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor         λ.Object
	ScreencastOMaticIE    λ.Object
	ϒget_element_by_class λ.Object
	ϒint_or_none          λ.Object
	ϒremove_start         λ.Object
	ϒstrip_or_none        λ.Object
	ϒunified_strdate      λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒget_element_by_class = Ωutils.ϒget_element_by_class
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒremove_start = Ωutils.ϒremove_start
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ScreencastOMaticIE = λ.Cal(λ.TypeType, λ.StrLiteral("ScreencastOMaticIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ScreencastOMaticIE__VALID_URL    λ.Object
				ScreencastOMaticIE__real_extract λ.Object
			)
			ScreencastOMaticIE__VALID_URL = λ.StrLiteral("https?://screencast-o-matic\\.com/(?:(?:watch|player)/|embed\\?.*?\\bsc=)(?P<id>[0-9a-zA-Z]+)")
			ScreencastOMaticIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒinfo     λ.Object
						ϒself     = λargs[0]
						ϒurl      = λargs[1]
						ϒvideo_id λ.Object
						ϒwebpage  λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", λ.Add(λ.StrLiteral("https://screencast-o-matic.com/player/"), ϒvideo_id), ϒvideo_id)
					ϒinfo = λ.GetItem(λ.Calm(ϒself, "_parse_html5_media_entries", ϒurl, ϒwebpage, ϒvideo_id), λ.IntLiteral(0))
					λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
						"id":    ϒvideo_id,
						"title": λ.Cal(ϒget_element_by_class, λ.StrLiteral("overlayTitle"), ϒwebpage),
						"description": func() λ.Object {
							if λv := λ.Cal(ϒstrip_or_none, λ.Cal(ϒget_element_by_class, λ.StrLiteral("overlayDescription"), ϒwebpage)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.None
							}
						}(),
						"duration": λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("player\\.duration\\s*=\\s*function\\(\\)\\s*{\\s*return\\s+(\\d+);\\s*};"),
							ϒwebpage,
							λ.StrLiteral("duration"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						})),
						"upload_date": λ.Cal(ϒunified_strdate, λ.Cal(ϒremove_start, λ.Cal(ϒget_element_by_class, λ.StrLiteral("overlayPublished"), ϒwebpage), λ.StrLiteral("Published: "))),
					}))
					return ϒinfo
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    ScreencastOMaticIE__VALID_URL,
				"_real_extract": ScreencastOMaticIE__real_extract,
			})
		}())
	})
}
