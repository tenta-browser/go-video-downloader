// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * redtube/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/redtube.py
 */

package redtube

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError   λ.Object
	InfoExtractor    λ.Object
	RedTubeIE        λ.Object
	ϒdetermine_ext   λ.Object
	ϒint_or_none     λ.Object
	ϒmerge_dicts     λ.Object
	ϒstr_to_int      λ.Object
	ϒunified_strdate λ.Object
	ϒurl_or_none     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmerge_dicts = Ωutils.ϒmerge_dicts
		ϒstr_to_int = Ωutils.ϒstr_to_int
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒurl_or_none = Ωutils.ϒurl_or_none
		RedTubeIE = λ.Cal(λ.TypeType, λ.StrLiteral("RedTubeIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				RedTubeIE__VALID_URL    λ.Object
				RedTubeIE__real_extract λ.Object
			)
			RedTubeIE__VALID_URL = λ.StrLiteral("https?://(?:(?:\\w+\\.)?redtube\\.com/|embed\\.redtube\\.com/\\?.*?\\bid=)(?P<id>[0-9]+)")
			RedTubeIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ERRORS       λ.Object
						ϒage_limit   λ.Object
						ϒduration    λ.Object
						ϒformat_id   λ.Object
						ϒformat_url  λ.Object
						ϒformats     λ.Object
						ϒinfo        λ.Object
						ϒmedia       λ.Object
						ϒmedias      λ.Object
						ϒmessage     λ.Object
						ϒpatterns    λ.Object
						ϒself        = λargs[0]
						ϒsources     λ.Object
						ϒthumbnail   λ.Object
						ϒupload_date λ.Object
						ϒurl         = λargs[1]
						ϒvideo_id    λ.Object
						ϒvideo_url   λ.Object
						ϒview_count  λ.Object
						ϒwebpage     λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
						τmp2         λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", λ.Mod(λ.StrLiteral("http://www.redtube.com/%s"), ϒvideo_id), ϒvideo_id)
					ERRORS = λ.NewTuple(
						λ.NewTuple(
							λ.NewTuple(
								λ.StrLiteral("video-deleted-info"),
								λ.StrLiteral(">This video has been removed"),
							),
							λ.StrLiteral("has been removed"),
						),
						λ.NewTuple(
							λ.NewTuple(
								λ.StrLiteral("private_video_text"),
								λ.StrLiteral(">This video is private"),
								λ.StrLiteral(">Send a friend request to its owner to be able to view it"),
							),
							λ.StrLiteral("is private"),
						),
					)
					τmp0 = λ.Cal(λ.BuiltinIter, ERRORS)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒpatterns = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒmessage = λ.GetItem(τmp2, λ.IntLiteral(1))
						if λ.IsTrue(λ.Cal(λ.BuiltinAny, λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒp   λ.Object
										τmp0 λ.Object
										τmp1 λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, ϒpatterns)
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒp = τmp1
										λgy.Yield(λ.NewBool(λ.Contains(ϒwebpage, ϒp)))
									}
									return λ.None
								})
							})))) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("Video %s %s"), λ.NewTuple(
								ϒvideo_id,
								ϒmessage,
							))), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
					}
					ϒinfo = λ.Call(λ.GetAttr(ϒself, "_search_json_ld", nil), λ.NewArgs(
						ϒwebpage,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "default", Value: λ.DictLiteral(map[λ.Object]λ.Object{})},
					})
					if !λ.IsTrue(λ.Calm(ϒinfo, "get", λ.StrLiteral("title"))) {
						λ.SetItem(ϒinfo, λ.StrLiteral("title"), func() λ.Object {
							if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
								λ.NewTuple(
									λ.StrLiteral("<h(\\d)[^>]+class=\"(?:video_title_text|videoTitle|video_title)[^\"]*\">(?P<title>(?:(?!\\1).)+)</h\\1>"),
									λ.StrLiteral("(?:videoTitle|title)\\s*:\\s*([\"\\'])(?P<title>(?:(?!\\1).)+)\\1"),
								),
								ϒwebpage,
								λ.StrLiteral("title"),
							), λ.KWArgs{
								{Name: "group", Value: λ.StrLiteral("title")},
								{Name: "default", Value: λ.None},
							}); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒself, "_og_search_title", ϒwebpage)
							}
						}())
					}
					ϒformats = λ.NewList()
					ϒsources = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("sources\\s*:\\s*({.+?})"),
							ϒwebpage,
							λ.StrLiteral("source"),
						), λ.KWArgs{
							{Name: "default", Value: λ.StrLiteral("{}")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(func() λ.Object {
						if λv := ϒsources; !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.BuiltinIsInstance, ϒsources, λ.DictType)
						}
					}()) {
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒsources, "items"))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							τmp2 = τmp1
							ϒformat_id = λ.GetItem(τmp2, λ.IntLiteral(0))
							ϒformat_url = λ.GetItem(τmp2, λ.IntLiteral(1))
							if λ.IsTrue(ϒformat_url) {
								λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
									"url":       ϒformat_url,
									"format_id": ϒformat_id,
									"height":    λ.Cal(ϒint_or_none, ϒformat_id),
								}))
							}
						}
					}
					ϒmedias = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("mediaDefinition[\"\\']?\\s*:\\s*(\\[.+?}\\s*\\])"),
							ϒwebpage,
							λ.StrLiteral("media definitions"),
						), λ.KWArgs{
							{Name: "default", Value: λ.StrLiteral("{}")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(func() λ.Object {
						if λv := ϒmedias; !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(λ.BuiltinIsInstance, ϒmedias, λ.ListType)
						}
					}()) {
						τmp0 = λ.Cal(λ.BuiltinIter, ϒmedias)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒmedia = τmp1
							ϒformat_url = λ.Cal(ϒurl_or_none, λ.Calm(ϒmedia, "get", λ.StrLiteral("videoUrl")))
							if !λ.IsTrue(ϒformat_url) {
								continue
							}
							if λ.IsTrue(func() λ.Object {
								if λv := λ.Eq(λ.Calm(ϒmedia, "get", λ.StrLiteral("format")), λ.StrLiteral("hls")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Eq(λ.Cal(ϒdetermine_ext, ϒformat_url), λ.StrLiteral("m3u8"))
								}
							}()) {
								λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒformat_url,
									ϒvideo_id,
									λ.StrLiteral("mp4"),
								), λ.KWArgs{
									{Name: "entry_protocol", Value: λ.StrLiteral("m3u8_native")},
									{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
									{Name: "fatal", Value: λ.False},
								}))
								continue
							}
							ϒformat_id = λ.Calm(ϒmedia, "get", λ.StrLiteral("quality"))
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"url":       ϒformat_url,
								"format_id": ϒformat_id,
								"height":    λ.Cal(ϒint_or_none, ϒformat_id),
							}))
						}
					}
					if !λ.IsTrue(ϒformats) {
						ϒvideo_url = λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("<source src=\"(.+?)\" type=\"video/mp4\">"), ϒwebpage, λ.StrLiteral("video URL"))
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url": ϒvideo_url,
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒthumbnail = λ.Calm(ϒself, "_og_search_thumbnail", ϒwebpage)
					ϒupload_date = λ.Cal(ϒunified_strdate, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("<span[^>]+>(?:ADDED|Published on) ([^<]+)<"),
						ϒwebpage,
						λ.StrLiteral("upload date"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒduration = λ.Cal(ϒint_or_none, func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_og_search_property", nil), λ.NewArgs(
							λ.StrLiteral("video:duration"),
							ϒwebpage,
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.StrLiteral("videoDuration\\s*:\\s*(\\d+)"),
								ϒwebpage,
								λ.StrLiteral("duration"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
						}
					}())
					ϒview_count = λ.Cal(ϒstr_to_int, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.StrLiteral("<div[^>]*>Views</div>\\s*<div[^>]*>\\s*([\\d,.]+)"),
							λ.StrLiteral("<span[^>]*>VIEWS</span>\\s*</td>\\s*<td>\\s*([\\d,.]+)"),
							λ.StrLiteral("<span[^>]+\\bclass=[\"\\']video_view_count[^>]*>\\s*([\\d,.]+)"),
						),
						ϒwebpage,
						λ.StrLiteral("view count"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					}))
					ϒage_limit = λ.IntLiteral(18)
					return λ.Cal(ϒmerge_dicts, ϒinfo, λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"ext":         λ.StrLiteral("mp4"),
						"thumbnail":   ϒthumbnail,
						"upload_date": ϒupload_date,
						"duration":    ϒduration,
						"view_count":  ϒview_count,
						"age_limit":   ϒage_limit,
						"formats":     ϒformats,
					}))
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    RedTubeIE__VALID_URL,
				"_real_extract": RedTubeIE__real_extract,
			})
		}())
	})
}
