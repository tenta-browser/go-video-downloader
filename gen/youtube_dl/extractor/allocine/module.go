// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * allocine/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/allocine.py
 */

package allocine

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AllocineIE         λ.Object
	InfoExtractor      λ.Object
	ϒcompat_str        λ.Object
	ϒint_or_none       λ.Object
	ϒqualities         λ.Object
	ϒremove_end        λ.Object
	ϒtry_get           λ.Object
	ϒunified_timestamp λ.Object
	ϒurl_basename      λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒqualities = Ωutils.ϒqualities
		ϒremove_end = Ωutils.ϒremove_end
		ϒtry_get = Ωutils.ϒtry_get
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒurl_basename = Ωutils.ϒurl_basename
		AllocineIE = λ.Cal(λ.TypeType, λ.StrLiteral("AllocineIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				AllocineIE__VALID_URL    λ.Object
				AllocineIE__real_extract λ.Object
			)
			AllocineIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?allocine\\.fr/(?:article|video|film)/(?:fichearticle_gen_carticle=|player_gen_cmedia=|fichefilm_gen_cfilm=|video-)(?P<id>[0-9]+)(?:\\.html)?")
			AllocineIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id λ.Object
						ϒduration   λ.Object
						ϒformat_id  λ.Object
						ϒformats    λ.Object
						ϒkey        λ.Object
						ϒmedia_data λ.Object
						ϒmodel      λ.Object
						ϒmodel_data λ.Object
						ϒquality    λ.Object
						ϒself       = λargs[0]
						ϒtimestamp  λ.Object
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvalue      λ.Object
						ϒvideo      λ.Object
						ϒvideo_id   λ.Object
						ϒvideo_url  λ.Object
						ϒview_count λ.Object
						ϒwebpage    λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
						τmp2        λ.Object
					)
					ϒdisplay_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒdisplay_id)
					ϒformats = λ.NewList()
					ϒquality = λ.Cal(ϒqualities, λ.NewList(
						λ.StrLiteral("ld"),
						λ.StrLiteral("md"),
						λ.StrLiteral("hd"),
					))
					ϒmodel = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("data-model=\"([^\"]+)\""),
						ϒwebpage,
						λ.StrLiteral("data model"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒmodel) {
						ϒmodel_data = λ.Calm(ϒself, "_parse_json", ϒmodel, ϒdisplay_id)
						ϒvideo = λ.GetItem(λ.GetItem(ϒmodel_data, λ.StrLiteral("videos")), λ.IntLiteral(0))
						ϒtitle = λ.GetItem(ϒvideo, λ.StrLiteral("title"))
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.GetItem(ϒvideo, λ.StrLiteral("sources")), "values"))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒvideo_url = τmp1
							τmp2 = λ.UnpackIterable(λ.GetItem(λ.Calm(λ.Cal(ϒurl_basename, ϒvideo_url), "split", λ.StrLiteral("_")), λ.NewSlice(λ.None, λ.IntLiteral(2), λ.None)), 2)
							ϒvideo_id = λ.GetItem(τmp2, λ.IntLiteral(0))
							ϒformat_id = λ.GetItem(τmp2, λ.IntLiteral(1))
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"format_id": ϒformat_id,
								"quality":   λ.Cal(ϒquality, ϒformat_id),
								"url":       ϒvideo_url,
							}))
						}
						ϒduration = λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("duration")))
						ϒview_count = λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("view_count")))
						ϒtimestamp = λ.Cal(ϒunified_timestamp, λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("added_at")), λ.StrLiteral("date"))
							}), ϒcompat_str))
					} else {
						ϒvideo_id = ϒdisplay_id
						ϒmedia_data = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("http://www.allocine.fr/ws/AcVisiondataV5.ashx?media=%s"), ϒvideo_id), ϒdisplay_id)
						ϒtitle = λ.Cal(ϒremove_end, λ.Calm(λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("(?s)<title>(.+?)</title>"), ϒwebpage, λ.StrLiteral("title")), "strip"), λ.StrLiteral(" - AlloCiné"))
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.GetItem(ϒmedia_data, λ.StrLiteral("video")), "items"))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							τmp2 = λ.UnpackIterable(τmp1, 2)
							ϒkey = λ.GetItem(τmp2, λ.IntLiteral(0))
							ϒvalue = λ.GetItem(τmp2, λ.IntLiteral(1))
							if !λ.IsTrue(λ.Calm(ϒkey, "endswith", λ.StrLiteral("Path"))) {
								continue
							}
							ϒformat_id = λ.GetItem(ϒkey, λ.NewSlice(λ.None, λ.Neg(λ.Cal(λ.BuiltinLen, λ.StrLiteral("Path"))), λ.None))
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"format_id": ϒformat_id,
								"quality":   λ.Cal(ϒquality, ϒformat_id),
								"url":       ϒvalue,
							}))
						}
						τmp0 = λ.UnpackIterable(λ.Mul(λ.NewList(λ.None), λ.IntLiteral(3)), 3)
						ϒduration = λ.GetItem(τmp0, λ.IntLiteral(0))
						ϒview_count = λ.GetItem(τmp0, λ.IntLiteral(1))
						ϒtimestamp = λ.GetItem(τmp0, λ.IntLiteral(2))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"display_id":  ϒdisplay_id,
						"title":       ϒtitle,
						"description": λ.Calm(ϒself, "_og_search_description", ϒwebpage),
						"thumbnail":   λ.Calm(ϒself, "_og_search_thumbnail", ϒwebpage),
						"duration":    ϒduration,
						"timestamp":   ϒtimestamp,
						"view_count":  ϒview_count,
						"formats":     ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    AllocineIE__VALID_URL,
				"_real_extract": AllocineIE__real_extract,
			})
		}())
	})
}
