// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * amara/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/amara.py
 */

package amara

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωvimeo "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/vimeo"
	Ωyoutube "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/youtube"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AmaraIE           λ.Object
	InfoExtractor     λ.Object
	VimeoIE           λ.Object
	YoutubeIE         λ.Object
	ϒint_or_none      λ.Object
	ϒparse_iso8601    λ.Object
	ϒupdate_url_query λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		YoutubeIE = Ωyoutube.YoutubeIE
		VimeoIE = Ωvimeo.VimeoIE
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		AmaraIE = λ.Cal(λ.TypeType, λ.StrLiteral("AmaraIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				AmaraIE__VALID_URL    λ.Object
				AmaraIE__real_extract λ.Object
			)
			AmaraIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?amara\\.org/(?:\\w+/)?videos/(?P<id>\\w+)")
			AmaraIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒf             λ.Object
						ϒie            λ.Object
						ϒinfo          λ.Object
						ϒlanguage      λ.Object
						ϒmeta          λ.Object
						ϒself          = λargs[0]
						ϒsubtitle      λ.Object
						ϒsubtitles     λ.Object
						ϒsubtitles_uri λ.Object
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						ϒvideo_id      λ.Object
						ϒvideo_url     λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
						τmp3           λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒmeta = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("https://amara.org/api/videos/%s/"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]string{
							"format": "json",
						})},
					})
					ϒtitle = λ.GetItem(ϒmeta, λ.StrLiteral("title"))
					ϒvideo_url = λ.GetItem(λ.GetItem(ϒmeta, λ.StrLiteral("all_urls")), λ.IntLiteral(0))
					ϒsubtitles = λ.DictLiteral(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, func() λ.Object {
						if λv := λ.Calm(ϒmeta, "get", λ.StrLiteral("languages")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}())
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒlanguage = τmp1
						ϒsubtitles_uri = λ.Calm(ϒlanguage, "get", λ.StrLiteral("subtitles_uri"))
						if !λ.IsTrue(func() λ.Object {
							if λv := ϒsubtitles_uri; !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒlanguage, "get", λ.StrLiteral("published"))
							}
						}()) {
							continue
						}
						ϒsubtitle = λ.Calm(ϒsubtitles, "setdefault", func() λ.Object {
							if λv := λ.Calm(ϒlanguage, "get", λ.StrLiteral("code")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.StrLiteral("en")
							}
						}(), λ.NewList())
						τmp2 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
							λ.StrLiteral("json"),
							λ.StrLiteral("srt"),
							λ.StrLiteral("vtt"),
						))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒf = τmp3
							λ.Calm(ϒsubtitle, "append", λ.DictLiteral(map[string]λ.Object{
								"ext": ϒf,
								"url": λ.Cal(ϒupdate_url_query, ϒsubtitles_uri, λ.DictLiteral(map[string]λ.Object{
									"format": ϒf,
								})),
							}))
						}
					}
					ϒinfo = λ.DictLiteral(map[string]λ.Object{
						"url":         ϒvideo_url,
						"id":          ϒvideo_id,
						"subtitles":   ϒsubtitles,
						"title":       ϒtitle,
						"description": λ.Calm(ϒmeta, "get", λ.StrLiteral("description")),
						"thumbnail":   λ.Calm(ϒmeta, "get", λ.StrLiteral("thumbnail")),
						"duration":    λ.Cal(ϒint_or_none, λ.Calm(ϒmeta, "get", λ.StrLiteral("duration"))),
						"timestamp":   λ.Cal(ϒparse_iso8601, λ.Calm(ϒmeta, "get", λ.StrLiteral("created"))),
					})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						YoutubeIE,
						VimeoIE,
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒie = τmp1
						if λ.IsTrue(λ.Calm(ϒie, "suitable", ϒvideo_url)) {
							λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
								"_type":  λ.StrLiteral("url_transparent"),
								"ie_key": λ.Calm(ϒie, "ie_key"),
							}))
							break
						}
					}
					return ϒinfo
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    AmaraIE__VALID_URL,
				"_real_extract": AmaraIE__real_extract,
			})
		}())
	})
}
