// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * slideslive/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/slideslive.py
 */

package slideslive

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	SlidesLiveIE  λ.Object
	ϒbool_or_none λ.Object
	ϒsmuggle_url  λ.Object
	ϒtry_get      λ.Object
	ϒurl_or_none  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒbool_or_none = Ωutils.ϒbool_or_none
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		ϒtry_get = Ωutils.ϒtry_get
		ϒurl_or_none = Ωutils.ϒurl_or_none
		SlidesLiveIE = λ.Cal(λ.TypeType, λ.StrLiteral("SlidesLiveIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SlidesLiveIE__VALID_URL    λ.Object
				SlidesLiveIE__real_extract λ.Object
			)
			SlidesLiveIE__VALID_URL = λ.StrLiteral("https?://slideslive\\.com/(?P<id>[0-9]+)")
			SlidesLiveIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒ_MANIFEST_PATTERN λ.Object
						ϒformats           λ.Object
						ϒinfo              λ.Object
						ϒlang              λ.Object
						ϒself              = λargs[0]
						ϒservice_id        λ.Object
						ϒservice_name      λ.Object
						ϒsub               λ.Object
						ϒsubtitles         λ.Object
						ϒurl               = λargs[1]
						ϒvideo_data        λ.Object
						ϒvideo_id          λ.Object
						ϒwebvtt_url        λ.Object
						τmp0               λ.Object
						τmp1               λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒvideo_data = λ.Calm(ϒself, "_download_json", λ.Add(λ.StrLiteral("https://ben.slideslive.com/player/"), ϒvideo_id), ϒvideo_id)
					ϒservice_name = λ.Calm(λ.GetItem(ϒvideo_data, λ.StrLiteral("video_service_name")), "lower")
					if !λ.Contains(λ.NewTuple(
						λ.StrLiteral("url"),
						λ.StrLiteral("yoda"),
						λ.StrLiteral("vimeo"),
						λ.StrLiteral("youtube"),
					), ϒservice_name) {
						panic(λ.Raise(λ.Cal(λ.AssertionErrorType)))
					}
					ϒservice_id = λ.GetItem(ϒvideo_data, λ.StrLiteral("video_service_id"))
					ϒsubtitles = λ.DictLiteral(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒvideo_data, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(ϒx, λ.StrLiteral("subtitles"))
							}), λ.ListType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}())
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒsub = τmp1
						if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒsub, λ.DictType)) {
							continue
						}
						ϒwebvtt_url = λ.Cal(ϒurl_or_none, λ.Calm(ϒsub, "get", λ.StrLiteral("webvtt_url")))
						if !λ.IsTrue(ϒwebvtt_url) {
							continue
						}
						ϒlang = func() λ.Object {
							if λv := λ.Calm(ϒsub, "get", λ.StrLiteral("language")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.StrLiteral("en")
							}
						}()
						λ.Calm(λ.Calm(ϒsubtitles, "setdefault", ϒlang, λ.NewList()), "append", λ.DictLiteral(map[string]λ.Object{
							"url": ϒwebvtt_url,
						}))
					}
					ϒinfo = λ.DictLiteral(map[string]λ.Object{
						"id":        ϒvideo_id,
						"thumbnail": λ.Calm(ϒvideo_data, "get", λ.StrLiteral("thumbnail")),
						"is_live":   λ.Cal(ϒbool_or_none, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("is_live"))),
						"subtitles": ϒsubtitles,
					})
					if λ.Contains(λ.NewTuple(
						λ.StrLiteral("url"),
						λ.StrLiteral("yoda"),
					), ϒservice_name) {
						λ.SetItem(ϒinfo, λ.StrLiteral("title"), λ.GetItem(ϒvideo_data, λ.StrLiteral("title")))
						if λ.IsTrue(λ.Eq(ϒservice_name, λ.StrLiteral("url"))) {
							λ.SetItem(ϒinfo, λ.StrLiteral("url"), ϒservice_id)
						} else {
							ϒformats = λ.NewList()
							ϒ_MANIFEST_PATTERN = λ.StrLiteral("https://01.cdn.yoda.slideslive.com/%s/master.%s")
							λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
								λ.Mod(ϒ_MANIFEST_PATTERN, λ.NewTuple(
									ϒservice_id,
									λ.StrLiteral("m3u8"),
								)),
								ϒservice_id,
								λ.StrLiteral("mp4"),
							), λ.KWArgs{
								{Name: "entry_protocol", Value: λ.StrLiteral("m3u8_native")},
								{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
								{Name: "fatal", Value: λ.False},
							}))
							λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
								λ.Mod(ϒ_MANIFEST_PATTERN, λ.NewTuple(
									ϒservice_id,
									λ.StrLiteral("mpd"),
								)),
								ϒservice_id,
							), λ.KWArgs{
								{Name: "mpd_id", Value: λ.StrLiteral("dash")},
								{Name: "fatal", Value: λ.False},
							}))
							λ.Calm(ϒself, "_sort_formats", ϒformats)
							λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
								"id":      ϒservice_id,
								"formats": ϒformats,
							}))
						}
					} else {
						λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
							"_type":  λ.StrLiteral("url_transparent"),
							"url":    ϒservice_id,
							"ie_key": λ.Calm(ϒservice_name, "capitalize"),
							"title":  λ.Calm(ϒvideo_data, "get", λ.StrLiteral("title")),
						}))
						if λ.IsTrue(λ.Eq(ϒservice_name, λ.StrLiteral("vimeo"))) {
							λ.SetItem(ϒinfo, λ.StrLiteral("url"), λ.Cal(ϒsmuggle_url, λ.Add(λ.StrLiteral("https://player.vimeo.com/video/"), ϒservice_id), λ.DictLiteral(map[string]λ.Object{
								"http_headers": λ.DictLiteral(map[string]λ.Object{
									"Referer": ϒurl,
								}),
							})))
						}
					}
					return ϒinfo
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    SlidesLiveIE__VALID_URL,
				"_real_extract": SlidesLiveIE__real_extract,
			})
		}())
	})
}
