// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * videopress/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/videopress.py
 */

package videopress

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	VideoPressIE       λ.Object
	ϒdetermine_ext     λ.Object
	ϒfloat_or_none     λ.Object
	ϒint_or_none       λ.Object
	ϒparse_age_limit   λ.Object
	ϒqualities         λ.Object
	ϒrandom_birthday   λ.Object
	ϒunified_timestamp λ.Object
	ϒurljoin           λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_age_limit = Ωutils.ϒparse_age_limit
		ϒqualities = Ωutils.ϒqualities
		ϒrandom_birthday = Ωutils.ϒrandom_birthday
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ϒurljoin = Ωutils.ϒurljoin
		VideoPressIE = λ.Cal(λ.TypeType, λ.StrLiteral("VideoPressIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VideoPressIE__ID_REGEX     λ.Object
				VideoPressIE__PATH_REGEX   λ.Object
				VideoPressIE__VALID_URL    λ.Object
				VideoPressIE__real_extract λ.Object
			)
			VideoPressIE__ID_REGEX = λ.StrLiteral("[\\da-zA-Z]{8}")
			VideoPressIE__PATH_REGEX = λ.StrLiteral("video(?:\\.word)?press\\.com/embed/")
			VideoPressIE__VALID_URL = λ.Mod(λ.StrLiteral("https?://%s(?P<id>%s)"), λ.NewTuple(
				VideoPressIE__PATH_REGEX,
				VideoPressIE__ID_REGEX,
			))
			VideoPressIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						QUALITIES      λ.Object
						ϒbase_url      λ.Object
						ϒext           λ.Object
						ϒf             λ.Object
						ϒfile_url_base λ.Object
						ϒformat_id     λ.Object
						ϒformats       λ.Object
						ϒoriginal_url  λ.Object
						ϒpath          λ.Object
						ϒquality       λ.Object
						ϒquery         λ.Object
						ϒself          = λargs[0]
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						ϒvideo         λ.Object
						ϒvideo_id      λ.Object
						τmp0           λ.Object
						τmp1           λ.Object
						τmp2           λ.Object
						τmp3           λ.Object
						τmp4           λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒquery = λ.Cal(ϒrandom_birthday, λ.StrLiteral("birth_year"), λ.StrLiteral("birth_month"), λ.StrLiteral("birth_day"))
					λ.SetItem(ϒquery, λ.StrLiteral("fields"), λ.StrLiteral("description,duration,file_url_base,files,height,original,poster,rating,title,upload_date,width"))
					ϒvideo = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("https://public-api.wordpress.com/rest/v1.1/videos/%s"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: ϒquery},
					})
					ϒtitle = λ.GetItem(ϒvideo, λ.StrLiteral("title"))
					ϒfile_url_base = func() λ.Object {
						if λv := λ.Calm(ϒvideo, "get", λ.StrLiteral("file_url_base")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒbase_url = func() λ.Object {
						if λv := λ.Calm(ϒfile_url_base, "get", λ.StrLiteral("https")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒfile_url_base, "get", λ.StrLiteral("http"))
						}
					}()
					QUALITIES = λ.NewTuple(
						λ.StrLiteral("std"),
						λ.StrLiteral("dvd"),
						λ.StrLiteral("hd"),
					)
					ϒquality = λ.Cal(ϒqualities, QUALITIES)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(func() λ.Object {
						if λv := λ.Calm(ϒvideo, "get", λ.StrLiteral("files")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}(), "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = λ.UnpackIterable(τmp1, 2)
						ϒformat_id = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒf = λ.GetItem(τmp2, λ.IntLiteral(1))
						if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒf, λ.DictType)) {
							continue
						}
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒf, "items"))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							τmp4 = λ.UnpackIterable(τmp3, 2)
							ϒext = λ.GetItem(τmp4, λ.IntLiteral(0))
							ϒpath = λ.GetItem(τmp4, λ.IntLiteral(1))
							if λ.Contains(λ.NewTuple(
								λ.StrLiteral("mp4"),
								λ.StrLiteral("ogg"),
							), ϒext) {
								λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
									"url": λ.Cal(ϒurljoin, ϒbase_url, ϒpath),
									"format_id": λ.Mod(λ.StrLiteral("%s-%s"), λ.NewTuple(
										ϒformat_id,
										ϒext,
									)),
									"ext":     λ.Cal(ϒdetermine_ext, ϒpath, ϒext),
									"quality": λ.Cal(ϒquality, ϒformat_id),
								}))
							}
						}
					}
					ϒoriginal_url = λ.Calm(ϒvideo, "get", λ.StrLiteral("original"))
					if λ.IsTrue(ϒoriginal_url) {
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url":       ϒoriginal_url,
							"format_id": λ.StrLiteral("original"),
							"quality":   λ.Cal(λ.BuiltinLen, QUALITIES),
							"width":     λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("width"))),
							"height":    λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("height"))),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": λ.Calm(ϒvideo, "get", λ.StrLiteral("description")),
						"thumbnail":   λ.Calm(ϒvideo, "get", λ.StrLiteral("poster")),
						"duration":    λ.Cal(ϒfloat_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("duration")), λ.IntLiteral(1000)),
						"timestamp":   λ.Cal(ϒunified_timestamp, λ.Calm(ϒvideo, "get", λ.StrLiteral("upload_date"))),
						"age_limit":   λ.Cal(ϒparse_age_limit, λ.Calm(ϒvideo, "get", λ.StrLiteral("rating"))),
						"formats":     ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_ID_REGEX":     VideoPressIE__ID_REGEX,
				"_PATH_REGEX":   VideoPressIE__PATH_REGEX,
				"_VALID_URL":    VideoPressIE__VALID_URL,
				"_real_extract": VideoPressIE__real_extract,
			})
		}())
	})
}
