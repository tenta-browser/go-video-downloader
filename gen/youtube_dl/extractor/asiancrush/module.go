// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * asiancrush/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/asiancrush.py
 */

package asiancrush

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωkaltura "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/kaltura"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	AsianCrushBaseIE     λ.Object
	AsianCrushIE         λ.Object
	AsianCrushPlaylistIE λ.Object
	InfoExtractor        λ.Object
	KalturaIE            λ.Object
	ϒextract_attributes  λ.Object
	ϒint_or_none         λ.Object
	ϒparse_age_limit     λ.Object
	ϒstrip_or_none       λ.Object
	ϒtry_get             λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		KalturaIE = Ωkaltura.KalturaIE
		ϒextract_attributes = Ωutils.ϒextract_attributes
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_age_limit = Ωutils.ϒparse_age_limit
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒtry_get = Ωutils.ϒtry_get
		AsianCrushBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("AsianCrushBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				AsianCrushBaseIE__API_SUFFIX             λ.Object
				AsianCrushBaseIE__KALTURA_KEYS           λ.Object
				AsianCrushBaseIE__VALID_URL_BASE         λ.Object
				AsianCrushBaseIE__call_api               λ.Object
				AsianCrushBaseIE__download_object_data   λ.Object
				AsianCrushBaseIE__get_object_description λ.Object
				AsianCrushBaseIE__parse_video_data       λ.Object
			)
			AsianCrushBaseIE__VALID_URL_BASE = λ.StrLiteral("https?://(?:www\\.)?(?P<host>(?:(?:asiancrush|yuyutv|midnightpulp)\\.com|(?:cocoro|retrocrush)\\.tv))")
			AsianCrushBaseIE__KALTURA_KEYS = λ.NewList(
				λ.StrLiteral("video_url"),
				λ.StrLiteral("progressive_url"),
				λ.StrLiteral("download_url"),
				λ.StrLiteral("thumbnail_url"),
				λ.StrLiteral("widescreen_thumbnail_url"),
				λ.StrLiteral("screencap_widescreen"),
			)
			AsianCrushBaseIE__API_SUFFIX = λ.DictLiteral(map[string]string{
				"retrocrush.tv": "-ott",
			})
			AsianCrushBaseIE__call_api = λ.NewFunction("_call_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "host"},
					{Name: "endpoint"},
					{Name: "video_id"},
					{Name: "query"},
					{Name: "resource"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒendpoint = λargs[2]
						ϒhost     = λargs[1]
						ϒquery    = λargs[4]
						ϒresource = λargs[5]
						ϒself     = λargs[0]
						ϒvideo_id = λargs[3]
					)
					return λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Mod(λ.StrLiteral("https://api%s.%s/%s"), λ.NewTuple(
							λ.Calm(λ.GetAttr(ϒself, "_API_SUFFIX", nil), "get", ϒhost, λ.StrLiteral("")),
							ϒhost,
							ϒendpoint,
						)),
						ϒvideo_id,
						λ.Mod(λ.StrLiteral("Downloading %s JSON metadata"), ϒresource),
					), λ.KWArgs{
						{Name: "query", Value: ϒquery},
						{Name: "headers", Value: λ.Calm(ϒself, "geo_verification_headers")},
					}), λ.StrLiteral("objects"))
				})
			AsianCrushBaseIE__download_object_data = λ.NewFunction("_download_object_data",
				[]λ.Param{
					{Name: "self"},
					{Name: "host"},
					{Name: "object_id"},
					{Name: "resource"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒhost      = λargs[1]
						ϒobject_id = λargs[2]
						ϒresource  = λargs[3]
						ϒself      = λargs[0]
					)
					return λ.GetItem(λ.Calm(ϒself, "_call_api", ϒhost, λ.StrLiteral("search"), ϒobject_id, λ.DictLiteral(map[string]λ.Object{
						"id": ϒobject_id,
					}), ϒresource), λ.IntLiteral(0))
				})
			AsianCrushBaseIE__get_object_description = λ.NewFunction("_get_object_description",
				[]λ.Param{
					{Name: "self"},
					{Name: "obj"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒobj  = λargs[1]
						ϒself = λargs[0]
					)
					_ = ϒself
					return λ.Cal(ϒstrip_or_none, func() λ.Object {
						if λv := λ.Calm(ϒobj, "get", λ.StrLiteral("long_description")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒobj, "get", λ.StrLiteral("short_description"))
						}
					}())
				})
			AsianCrushBaseIE__parse_video_data = λ.NewFunction("_parse_video_data",
				[]λ.Param{
					{Name: "self"},
					{Name: "video"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcategories      λ.Object
						ϒentry_id        λ.Object
						ϒk               λ.Object
						ϒk_url           λ.Object
						ϒmeta_categories λ.Object
						ϒmobj            λ.Object
						ϒpartner_id      λ.Object
						ϒself            = λargs[0]
						ϒshow_info       λ.Object
						ϒtitle           λ.Object
						ϒvideo           = λargs[1]
						τmp0             λ.Object
						τmp1             λ.Object
						τmp2             λ.Object
					)
					ϒtitle = λ.GetItem(ϒvideo, λ.StrLiteral("name"))
					τmp0 = λ.UnpackIterable(λ.Mul(λ.NewList(λ.None), λ.IntLiteral(2)), 2)
					ϒentry_id = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒpartner_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetAttr(ϒself, "_KALTURA_KEYS", nil))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒk = τmp1
						ϒk_url = λ.Calm(ϒvideo, "get", ϒk)
						if λ.IsTrue(ϒk_url) {
							ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("/p/(\\d+)/.+?/entryId/([^/]+)/"), ϒk_url)
							if λ.IsTrue(ϒmobj) {
								τmp2 = λ.UnpackIterable(λ.Calm(ϒmobj, "groups"), 2)
								ϒpartner_id = λ.GetItem(τmp2, λ.IntLiteral(0))
								ϒentry_id = λ.GetItem(τmp2, λ.IntLiteral(1))
								break
							}
						}
					}
					ϒmeta_categories = func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒvideo, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("meta")), λ.StrLiteral("categories"))
							}), λ.ListType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}()
					ϒcategories = λ.Cal(λ.ListType, λ.Cal(λ.FilterIteratorType, λ.None, λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒc   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, ϒmeta_categories)
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒc = τmp1
									λgy.Yield(λ.Calm(ϒc, "get", λ.StrLiteral("name")))
								}
								return λ.None
							})
						})))))
					ϒshow_info = func() λ.Object {
						if λv := λ.Calm(ϒvideo, "get", λ.StrLiteral("show_info")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					return λ.DictLiteral(map[string]λ.Object{
						"_type": λ.StrLiteral("url_transparent"),
						"url": λ.Mod(λ.StrLiteral("kaltura:%s:%s"), λ.NewTuple(
							ϒpartner_id,
							ϒentry_id,
						)),
						"ie_key":      λ.Calm(KalturaIE, "ie_key"),
						"id":          ϒentry_id,
						"title":       ϒtitle,
						"description": λ.Calm(ϒself, "_get_object_description", ϒvideo),
						"age_limit": λ.Cal(ϒparse_age_limit, func() λ.Object {
							if λv := λ.Calm(ϒvideo, "get", λ.StrLiteral("mpaa_rating")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒvideo, "get", λ.StrLiteral("tv_rating"))
							}
						}()),
						"categories":     ϒcategories,
						"series":         λ.Calm(ϒshow_info, "get", λ.StrLiteral("show_name")),
						"season_number":  λ.Cal(ϒint_or_none, λ.Calm(ϒshow_info, "get", λ.StrLiteral("season_num"))),
						"season_id":      λ.Calm(ϒshow_info, "get", λ.StrLiteral("season_id")),
						"episode_number": λ.Cal(ϒint_or_none, λ.Calm(ϒshow_info, "get", λ.StrLiteral("episode_num"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_API_SUFFIX":             AsianCrushBaseIE__API_SUFFIX,
				"_KALTURA_KEYS":           AsianCrushBaseIE__KALTURA_KEYS,
				"_VALID_URL_BASE":         AsianCrushBaseIE__VALID_URL_BASE,
				"_call_api":               AsianCrushBaseIE__call_api,
				"_download_object_data":   AsianCrushBaseIE__download_object_data,
				"_get_object_description": AsianCrushBaseIE__get_object_description,
				"_parse_video_data":       AsianCrushBaseIE__parse_video_data,
			})
		}())
		AsianCrushIE = λ.Cal(λ.TypeType, λ.StrLiteral("AsianCrushIE"), λ.NewTuple(AsianCrushBaseIE), func() λ.Dict {
			var (
				AsianCrushIE__VALID_URL    λ.Object
				AsianCrushIE__real_extract λ.Object
			)
			AsianCrushIE__VALID_URL = λ.Mod(λ.StrLiteral("%s/video/(?:[^/]+/)?0+(?P<id>\\d+)v\\b"), λ.GetAttr(AsianCrushBaseIE, "_VALID_URL_BASE", nil))
			AsianCrushIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒembed_vars λ.Object
						ϒhost       λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒvideo      λ.Object
						ϒvideo_id   λ.Object
						ϒwebpage    λ.Object
						τmp0        λ.Object
					)
					τmp0 = λ.UnpackIterable(λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups"), 2)
					ϒhost = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒvideo_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					if λ.IsTrue(λ.Eq(ϒhost, λ.StrLiteral("cocoro.tv"))) {
						ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
						ϒembed_vars = func() λ.Object {
							if λv := λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
								λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.StrLiteral("iEmbedVars\\s*=\\s*({.+?})"),
									ϒwebpage,
									λ.StrLiteral("embed vars"),
								), λ.KWArgs{
									{Name: "default", Value: λ.StrLiteral("{}")},
								}),
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							}); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.DictLiteral(map[λ.Object]λ.Object{})
							}
						}()
						ϒvideo_id = func() λ.Object {
							if λv := λ.Calm(ϒembed_vars, "get", λ.StrLiteral("entry_id")); λ.IsTrue(λv) {
								return λv
							} else {
								return ϒvideo_id
							}
						}()
					}
					ϒvideo = λ.Calm(ϒself, "_download_object_data", ϒhost, ϒvideo_id, λ.StrLiteral("video"))
					return λ.Calm(ϒself, "_parse_video_data", ϒvideo)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    AsianCrushIE__VALID_URL,
				"_real_extract": AsianCrushIE__real_extract,
			})
		}())
		AsianCrushPlaylistIE = λ.Cal(λ.TypeType, λ.StrLiteral("AsianCrushPlaylistIE"), λ.NewTuple(AsianCrushBaseIE), func() λ.Dict {
			var (
				AsianCrushPlaylistIE__VALID_URL λ.Object
			)
			AsianCrushPlaylistIE__VALID_URL = λ.Mod(λ.StrLiteral("%s/series/0+(?P<id>\\d+)s\\b"), λ.GetAttr(AsianCrushBaseIE, "_VALID_URL_BASE", nil))
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": AsianCrushPlaylistIE__VALID_URL,
			})
		}())
	})
}
