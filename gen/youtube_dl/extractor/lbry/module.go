// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * lbry/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/lbry.py
 */

package lbry

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	LBRYIE         λ.Object
	ϒcompat_str    λ.Object
	ϒdetermine_ext λ.Object
	ϒint_or_none   λ.Object
	ϒmimetype2ext  λ.Object
	ϒtry_get       λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmimetype2ext = Ωutils.ϒmimetype2ext
		ϒtry_get = Ωutils.ϒtry_get
		LBRYIE = λ.Cal(λ.TypeType, λ.StrLiteral("LBRYIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				LBRYIE_IE_NAME         λ.Object
				LBRYIE__VALID_URL      λ.Object
				LBRYIE__call_api_proxy λ.Object
				LBRYIE__real_extract   λ.Object
			)
			LBRYIE_IE_NAME = λ.StrLiteral("lbry.tv")
			LBRYIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?(?:lbry\\.tv|odysee\\.com)/(?P<id>@[^:]+:[0-9a-z]+/[^:]+:[0-9a-z])")
			LBRYIE__call_api_proxy = λ.NewFunction("_call_api_proxy",
				[]λ.Param{
					{Name: "self"},
					{Name: "method"},
					{Name: "display_id"},
					{Name: "params"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id = λargs[2]
						ϒmethod     = λargs[1]
						ϒparams     = λargs[3]
						ϒself       = λargs[0]
					)
					return λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("https://api.lbry.tv/api/v1/proxy"),
						ϒdisplay_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.DictLiteral(map[string]string{
							"Content-Type": "application/json-rpc",
						})},
						{Name: "data", Value: λ.Calm(λ.Cal(Ωjson.ϒdumps, λ.DictLiteral(map[string]λ.Object{
							"method": ϒmethod,
							"params": ϒparams,
						})), "encode")},
					}), λ.StrLiteral("result"))
				})
			LBRYIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id      λ.Object
						ϒmedia           λ.Object
						ϒresult          λ.Object
						ϒresult_value    λ.Object
						ϒself            = λargs[0]
						ϒsigning_channel λ.Object
						ϒsource          λ.Object
						ϒstreaming_url   λ.Object
						ϒuri             λ.Object
						ϒurl             = λargs[1]
					)
					ϒdisplay_id = λ.Calm(λ.Calm(ϒself, "_match_id", ϒurl), "replace", λ.StrLiteral(":"), λ.StrLiteral("#"))
					ϒuri = λ.Add(λ.StrLiteral("lbry://"), ϒdisplay_id)
					ϒresult = λ.GetItem(λ.Calm(ϒself, "_call_api_proxy", λ.StrLiteral("resolve"), ϒdisplay_id, λ.DictLiteral(map[string]λ.Object{
						"urls": λ.NewList(ϒuri),
					})), ϒuri)
					ϒresult_value = λ.GetItem(ϒresult, λ.StrLiteral("value"))
					if !λ.Contains(λ.NewTuple(
						λ.StrLiteral("video"),
						λ.StrLiteral("audio"),
					), λ.Calm(ϒresult_value, "get", λ.StrLiteral("stream_type"))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("Unsupported URL")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒstreaming_url = λ.GetItem(λ.Calm(ϒself, "_call_api_proxy", λ.StrLiteral("get"), ϒdisplay_id, λ.DictLiteral(map[string]λ.Object{
						"uri": ϒuri,
					})), λ.StrLiteral("streaming_url"))
					ϒsource = func() λ.Object {
						if λv := λ.Calm(ϒresult_value, "get", λ.StrLiteral("source")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒmedia = func() λ.Object {
						if λv := λ.Calm(ϒresult_value, "get", λ.StrLiteral("video")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Calm(ϒresult_value, "get", λ.StrLiteral("audio")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒsigning_channel = func() λ.Object {
						if λv := λ.Calm(ϒresult_value, "get", λ.StrLiteral("signing_channel")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					return λ.DictLiteral(map[string]λ.Object{
						"id":    λ.GetItem(ϒresult, λ.StrLiteral("claim_id")),
						"title": λ.GetItem(ϒresult_value, λ.StrLiteral("title")),
						"thumbnail": λ.Cal(ϒtry_get, ϒresult_value, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("thumbnail")), λ.StrLiteral("url"))
							}), ϒcompat_str),
						"description": λ.Calm(ϒresult_value, "get", λ.StrLiteral("description")),
						"license":     λ.Calm(ϒresult_value, "get", λ.StrLiteral("license")),
						"timestamp":   λ.Cal(ϒint_or_none, λ.Calm(ϒresult, "get", λ.StrLiteral("timestamp"))),
						"tags":        λ.Calm(ϒresult_value, "get", λ.StrLiteral("tags")),
						"width":       λ.Cal(ϒint_or_none, λ.Calm(ϒmedia, "get", λ.StrLiteral("width"))),
						"height":      λ.Cal(ϒint_or_none, λ.Calm(ϒmedia, "get", λ.StrLiteral("height"))),
						"duration":    λ.Cal(ϒint_or_none, λ.Calm(ϒmedia, "get", λ.StrLiteral("duration"))),
						"channel":     λ.Calm(ϒsigning_channel, "get", λ.StrLiteral("name")),
						"channel_id":  λ.Calm(ϒsigning_channel, "get", λ.StrLiteral("claim_id")),
						"ext": func() λ.Object {
							if λv := λ.Cal(ϒdetermine_ext, λ.Calm(ϒsource, "get", λ.StrLiteral("name"))); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(ϒmimetype2ext, λ.Calm(ϒsource, "get", λ.StrLiteral("media_type")))
							}
						}(),
						"filesize": λ.Cal(ϒint_or_none, λ.Calm(ϒsource, "get", λ.StrLiteral("size"))),
						"url":      ϒstreaming_url,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":         LBRYIE_IE_NAME,
				"_VALID_URL":      LBRYIE__VALID_URL,
				"_call_api_proxy": LBRYIE__call_api_proxy,
				"_real_extract":   LBRYIE__real_extract,
			})
		}())
	})
}
