// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * twentythreevideo/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/twentythreevideo.py
 */

package twentythreevideo

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	TwentyThreeVideoIE λ.Object
	ϒint_or_none       λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		TwentyThreeVideoIE = λ.Cal(λ.TypeType, λ.StrLiteral("TwentyThreeVideoIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				TwentyThreeVideoIE_IE_NAME       λ.Object
				TwentyThreeVideoIE__VALID_URL    λ.Object
				TwentyThreeVideoIE__real_extract λ.Object
			)
			TwentyThreeVideoIE_IE_NAME = λ.StrLiteral("23video")
			TwentyThreeVideoIE__VALID_URL = λ.StrLiteral("https?://(?P<domain>[^.]+\\.(?:twentythree\\.net|23video\\.com|filmweb\\.no))/v\\.ihtml/player\\.html\\?(?P<query>.*?\\bphoto(?:_|%5f)id=(?P<id>\\d+).*)")
			TwentyThreeVideoIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒadd_common_info_to_list λ.Object
						ϒaudio_path              λ.Object
						ϒbase_url                λ.Object
						ϒdomain                  λ.Object
						ϒf                       λ.Object
						ϒformats                 λ.Object
						ϒphoto_data              λ.Object
						ϒphoto_id                λ.Object
						ϒquery                   λ.Object
						ϒself                    = λargs[0]
						ϒt                       λ.Object
						ϒthumbnails              λ.Object
						ϒtitle                   λ.Object
						ϒurl                     = λargs[1]
						τmp0                     λ.Object
						τmp1                     λ.Object
					)
					τmp0 = λ.UnpackIterable(λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups"), 3)
					ϒdomain = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒquery = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒphoto_id = λ.GetItem(τmp0, λ.IntLiteral(2))
					ϒbase_url = λ.Mod(λ.StrLiteral("https://%s"), ϒdomain)
					ϒphoto_data = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.Add(ϒbase_url, λ.StrLiteral("/api/photo/list?")), ϒquery),
						ϒphoto_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]string{
							"format": "json",
						})},
						{Name: "transform_source", Value: λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "s"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒs = λargs[0]
								)
								return λ.Calm(ϒself, "_search_regex", λ.StrLiteral("(?s)({.+})"), ϒs, λ.StrLiteral("photo data"))
							})},
					}), λ.StrLiteral("photo"))
					ϒtitle = λ.GetItem(ϒphoto_data, λ.StrLiteral("title"))
					ϒformats = λ.NewList()
					ϒaudio_path = λ.Calm(ϒphoto_data, "get", λ.StrLiteral("audio_download"))
					if λ.IsTrue(ϒaudio_path) {
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"format_id": λ.StrLiteral("audio"),
							"url":       λ.Add(ϒbase_url, ϒaudio_path),
							"filesize":  λ.Cal(ϒint_or_none, λ.Calm(ϒphoto_data, "get", λ.StrLiteral("audio_size"))),
							"vcodec":    λ.StrLiteral("none"),
						}))
					}
					ϒadd_common_info_to_list = λ.NewFunction("add_common_info_to_list",
						[]λ.Param{
							{Name: "l"},
							{Name: "template"},
							{Name: "id_field"},
							{Name: "id_value"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒf_base   λ.Object
								ϒf_path   λ.Object
								ϒid_field = λargs[2]
								ϒid_value = λargs[3]
								ϒl        = λargs[0]
								ϒtemplate = λargs[1]
							)
							ϒf_base = λ.Mod(ϒtemplate, ϒid_value)
							ϒf_path = λ.Calm(ϒphoto_data, "get", λ.Add(ϒf_base, λ.StrLiteral("download")))
							if !λ.IsTrue(ϒf_path) {
								return λ.None
							}
							λ.Calm(ϒl, "append", λ.DictLiteral(map[λ.Object]λ.Object{
								ϒid_field:                ϒid_value,
								λ.StrLiteral("url"):      λ.Add(ϒbase_url, ϒf_path),
								λ.StrLiteral("width"):    λ.Cal(ϒint_or_none, λ.Calm(ϒphoto_data, "get", λ.Add(ϒf_base, λ.StrLiteral("width")))),
								λ.StrLiteral("height"):   λ.Cal(ϒint_or_none, λ.Calm(ϒphoto_data, "get", λ.Add(ϒf_base, λ.StrLiteral("height")))),
								λ.StrLiteral("filesize"): λ.Cal(ϒint_or_none, λ.Calm(ϒphoto_data, "get", λ.Add(ϒf_base, λ.StrLiteral("size")))),
							}))
							return λ.None
						})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.StrLiteral("mobile_high"),
						λ.StrLiteral("medium"),
						λ.StrLiteral("hd"),
						λ.StrLiteral("1080p"),
						λ.StrLiteral("4k"),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒf = τmp1
						λ.Cal(ϒadd_common_info_to_list, ϒformats, λ.StrLiteral("video_%s_"), λ.StrLiteral("format_id"), ϒf)
					}
					ϒthumbnails = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.StrLiteral("quad16"),
						λ.StrLiteral("quad50"),
						λ.StrLiteral("quad75"),
						λ.StrLiteral("quad100"),
						λ.StrLiteral("small"),
						λ.StrLiteral("portrait"),
						λ.StrLiteral("standard"),
						λ.StrLiteral("medium"),
						λ.StrLiteral("large"),
						λ.StrLiteral("original"),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒt = τmp1
						λ.Cal(ϒadd_common_info_to_list, ϒthumbnails, λ.StrLiteral("%s_"), λ.StrLiteral("id"), ϒt)
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":            ϒphoto_id,
						"title":         ϒtitle,
						"timestamp":     λ.Cal(ϒint_or_none, λ.Calm(ϒphoto_data, "get", λ.StrLiteral("creation_date_epoch"))),
						"duration":      λ.Cal(ϒint_or_none, λ.Calm(ϒphoto_data, "get", λ.StrLiteral("video_length"))),
						"view_count":    λ.Cal(ϒint_or_none, λ.Calm(ϒphoto_data, "get", λ.StrLiteral("view_count"))),
						"comment_count": λ.Cal(ϒint_or_none, λ.Calm(ϒphoto_data, "get", λ.StrLiteral("number_of_comments"))),
						"uploader_id":   λ.Calm(ϒphoto_data, "get", λ.StrLiteral("user_id")),
						"uploader":      λ.Calm(ϒphoto_data, "get", λ.StrLiteral("display_name")),
						"thumbnails":    ϒthumbnails,
						"formats":       ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       TwentyThreeVideoIE_IE_NAME,
				"_VALID_URL":    TwentyThreeVideoIE__VALID_URL,
				"_real_extract": TwentyThreeVideoIE__real_extract,
			})
		}())
	})
}
