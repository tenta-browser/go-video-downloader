// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * streamable/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/streamable.py
 */

package streamable

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	StreamableIE   λ.Object
	ϒfloat_or_none λ.Object
	ϒint_or_none   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		StreamableIE = λ.Cal(λ.TypeType, λ.StrLiteral("StreamableIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				StreamableIE__VALID_URL    λ.Object
				StreamableIE__real_extract λ.Object
			)
			StreamableIE__VALID_URL = λ.StrLiteral("https?://streamable\\.com/(?:[es]/)?(?P<id>\\w+)")
			StreamableIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformats  λ.Object
						ϒinfo     λ.Object
						ϒkey      λ.Object
						ϒself     = λargs[0]
						ϒstatus   λ.Object
						ϒtitle    λ.Object
						ϒurl      = λargs[1]
						ϒvideo    λ.Object
						ϒvideo_id λ.Object
						τmp0      λ.Object
						τmp1      λ.Object
						τmp2      λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒvideo = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("https://ajax.streamable.com/videos/%s"), ϒvideo_id), ϒvideo_id)
					ϒstatus = λ.Calm(ϒvideo, "get", λ.StrLiteral("status"))
					if λ.IsTrue(λ.Ne(ϒstatus, λ.IntLiteral(2))) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("This video is currently unavailable. It may still be uploading or processing.")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒtitle = func() λ.Object {
						if λv := λ.Calm(ϒvideo, "get", λ.StrLiteral("reddit_title")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.GetItem(ϒvideo, λ.StrLiteral("title"))
						}
					}()
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.GetItem(ϒvideo, λ.StrLiteral("files")), "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = λ.UnpackIterable(τmp1, 2)
						ϒkey = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒinfo = λ.GetItem(τmp2, λ.IntLiteral(1))
						if !λ.IsTrue(λ.Calm(ϒinfo, "get", λ.StrLiteral("url"))) {
							continue
						}
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"format_id": ϒkey,
							"url":       λ.Calm(ϒself, "_proto_relative_url", λ.GetItem(ϒinfo, λ.StrLiteral("url"))),
							"width":     λ.Cal(ϒint_or_none, λ.Calm(ϒinfo, "get", λ.StrLiteral("width"))),
							"height":    λ.Cal(ϒint_or_none, λ.Calm(ϒinfo, "get", λ.StrLiteral("height"))),
							"filesize":  λ.Cal(ϒint_or_none, λ.Calm(ϒinfo, "get", λ.StrLiteral("size"))),
							"fps":       λ.Cal(ϒint_or_none, λ.Calm(ϒinfo, "get", λ.StrLiteral("framerate"))),
							"vbr":       λ.Cal(ϒfloat_or_none, λ.Calm(ϒinfo, "get", λ.StrLiteral("bitrate")), λ.IntLiteral(1000)),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": λ.Calm(ϒvideo, "get", λ.StrLiteral("description")),
						"thumbnail":   λ.Calm(ϒself, "_proto_relative_url", λ.Calm(ϒvideo, "get", λ.StrLiteral("thumbnail_url"))),
						"uploader":    λ.Calm(λ.Calm(ϒvideo, "get", λ.StrLiteral("owner"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("user_name")),
						"timestamp":   λ.Cal(ϒfloat_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("date_added"))),
						"duration":    λ.Cal(ϒfloat_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("duration"))),
						"view_count":  λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("plays"))),
						"formats":     ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    StreamableIE__VALID_URL,
				"_real_extract": StreamableIE__real_extract,
			})
		}())
	})
}
