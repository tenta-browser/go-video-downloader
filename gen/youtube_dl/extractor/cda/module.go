// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * cda/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/cda.py
 */

package cda

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	CDAIE                        λ.Object
	ExtractorError               λ.Object
	InfoExtractor                λ.Object
	ϒcompat_chr                  λ.Object
	ϒcompat_ord                  λ.Object
	ϒcompat_urllib_parse_unquote λ.Object
	ϒfloat_or_none               λ.Object
	ϒint_or_none                 λ.Object
	ϒmerge_dicts                 λ.Object
	ϒparse_duration              λ.Object
	ϒrandom_birthday             λ.Object
	ϒurljoin                     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_chr = Ωcompat.ϒcompat_chr
		ϒcompat_ord = Ωcompat.ϒcompat_ord
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒmerge_dicts = Ωutils.ϒmerge_dicts
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒrandom_birthday = Ωutils.ϒrandom_birthday
		ϒurljoin = Ωutils.ϒurljoin
		CDAIE = λ.Cal(λ.TypeType, λ.StrLiteral("CDAIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				CDAIE__BASE_URL     λ.Object
				CDAIE__VALID_URL    λ.Object
				CDAIE__real_extract λ.Object
			)
			CDAIE__VALID_URL = λ.StrLiteral("https?://(?:(?:www\\.)?cda\\.pl/video|ebd\\.cda\\.pl/[0-9]+x[0-9]+)/(?P<id>[0-9a-z]+)")
			CDAIE__BASE_URL = λ.StrLiteral("http://www.cda.pl/")
			CDAIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaverage_rating   λ.Object
						ϒdecrypt_file     λ.Object
						ϒextract_format   λ.Object
						ϒformats          λ.Object
						ϒhandler          λ.Object
						ϒhref             λ.Object
						ϒinfo             λ.Object
						ϒinfo_dict        λ.Object
						ϒneed_confirm_age λ.Object
						ϒresolution       λ.Object
						ϒself             = λargs[0]
						ϒuploader         λ.Object
						ϒurl              = λargs[1]
						ϒvideo_id         λ.Object
						ϒview_count       λ.Object
						ϒwebpage          λ.Object
						τmp0              λ.Object
						τmp1              λ.Object
						τmp2              λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					λ.Calm(ϒself, "_set_cookie", λ.StrLiteral("cda.pl"), λ.StrLiteral("cda.player"), λ.StrLiteral("html5"))
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", λ.Add(λ.Add(λ.GetAttr(ϒself, "_BASE_URL", nil), λ.StrLiteral("/video/")), ϒvideo_id), ϒvideo_id)
					if λ.Contains(ϒwebpage, λ.StrLiteral("Ten film jest dostępny dla użytkowników premium")) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("This video is only available for premium users.")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					if λ.IsTrue(λ.Cal(Ωre.ϒsearch, λ.StrLiteral("niedostępn[ey] w(?:&nbsp;|\\s+)Twoim kraju\\s*<"), ϒwebpage)) {
						λ.Calm(ϒself, "raise_geo_restricted")
					}
					ϒneed_confirm_age = λ.False
					if λ.IsTrue(λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(<form[^>]+action=\"[^\"]*/a/validatebirth[^\"]*\")"),
						ϒwebpage,
						λ.StrLiteral("birthday validate form"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})) {
						ϒwebpage = λ.Call(λ.GetAttr(ϒself, "_download_age_confirm_page", nil), λ.NewArgs(
							ϒurl,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "note", Value: λ.StrLiteral("Confirming age")},
						})
						ϒneed_confirm_age = λ.True
					}
					ϒformats = λ.NewList()
					ϒuploader = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(?x)\n            <(span|meta)[^>]+itemprop=([\"\\'])author\\2[^>]*>\n            (?:<\\1[^>]*>[^<]*</\\1>|(?!</\\1>)(?:.|\\n))*?\n            <(span|meta)[^>]+itemprop=([\"\\'])name\\4[^>]*>(?P<uploader>[^<]+)</\\3>\n        "),
						ϒwebpage,
						λ.StrLiteral("uploader"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
						{Name: "group", Value: λ.StrLiteral("uploader")},
					})
					ϒview_count = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("Odsłony:(?:\\s|&nbsp;)*([0-9]+)"),
						ϒwebpage,
						λ.StrLiteral("view_count"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					ϒaverage_rating = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.StrLiteral("<(?:span|meta)[^>]+itemprop=([\"\\'])ratingValue\\1[^>]*>(?P<rating_value>[0-9.]+)"),
							λ.StrLiteral("<span[^>]+\\bclass=[\"\\']rating[\"\\'][^>]*>(?P<rating_value>[0-9.]+)"),
						),
						ϒwebpage,
						λ.StrLiteral("rating"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
						{Name: "group", Value: λ.StrLiteral("rating_value")},
					})
					ϒinfo_dict = λ.DictLiteral(map[string]λ.Object{
						"id":             ϒvideo_id,
						"title":          λ.Calm(ϒself, "_og_search_title", ϒwebpage),
						"description":    λ.Calm(ϒself, "_og_search_description", ϒwebpage),
						"uploader":       ϒuploader,
						"view_count":     λ.Cal(ϒint_or_none, ϒview_count),
						"average_rating": λ.Cal(ϒfloat_or_none, ϒaverage_rating),
						"thumbnail":      λ.Calm(ϒself, "_og_search_thumbnail", ϒwebpage),
						"formats":        ϒformats,
						"duration":       λ.None,
						"age_limit": func() λ.Object {
							if λ.IsTrue(ϒneed_confirm_age) {
								return λ.IntLiteral(18)
							} else {
								return λ.IntLiteral(0)
							}
						}(),
					})
					ϒdecrypt_file = λ.NewFunction("decrypt_file",
						[]λ.Param{
							{Name: "a"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒa   = λargs[0]
								ϒb   λ.Object
								ϒc   λ.Object
								ϒf   λ.Object
								ϒp   λ.Object
								τmp0 λ.Object
								τmp1 λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
								λ.StrLiteral("_XDDD"),
								λ.StrLiteral("_CDA"),
								λ.StrLiteral("_ADC"),
								λ.StrLiteral("_CXD"),
								λ.StrLiteral("_QWE"),
								λ.StrLiteral("_Q5"),
								λ.StrLiteral("_IKSDE"),
							))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒp = τmp1
								ϒa = λ.Calm(ϒa, "replace", ϒp, λ.StrLiteral(""))
							}
							ϒa = λ.Cal(ϒcompat_urllib_parse_unquote, ϒa)
							ϒb = λ.NewList()
							τmp0 = λ.Cal(λ.BuiltinIter, ϒa)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒc = τmp1
								ϒf = λ.Cal(ϒcompat_ord, ϒc)
								λ.Calm(ϒb, "append", func() λ.Object {
									if λ.IsTrue(func() λ.Object {
										if λv := λ.Le(λ.IntLiteral(33), ϒf); !λ.IsTrue(λv) {
											return λv
										} else {
											return λ.Ge(λ.IntLiteral(126), ϒf)
										}
									}()) {
										return λ.Cal(ϒcompat_chr, λ.Add(λ.IntLiteral(33), λ.Mod(λ.Add(ϒf, λ.IntLiteral(14)), λ.IntLiteral(94))))
									} else {
										return λ.Cal(ϒcompat_chr, ϒf)
									}
								}())
							}
							ϒa = λ.Calm(λ.StrLiteral(""), "join", ϒb)
							ϒa = λ.Calm(ϒa, "replace", λ.StrLiteral(".cda.mp4"), λ.StrLiteral(""))
							τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
								λ.StrLiteral(".2cda.pl"),
								λ.StrLiteral(".3cda.pl"),
							))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒp = τmp1
								ϒa = λ.Calm(ϒa, "replace", ϒp, λ.StrLiteral(".cda.pl"))
							}
							if λ.Contains(ϒa, λ.StrLiteral("/upstream")) {
								ϒa = λ.Calm(ϒa, "replace", λ.StrLiteral("/upstream"), λ.StrLiteral(".mp4/upstream"))
								return λ.Add(λ.StrLiteral("https://"), ϒa)
							}
							return λ.Add(λ.Add(λ.StrLiteral("https://"), ϒa), λ.StrLiteral(".mp4"))
						})
					ϒextract_format = λ.NewFunction("extract_format",
						[]λ.Param{
							{Name: "page"},
							{Name: "version"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒf           λ.Object
								ϒjson_str    λ.Object
								ϒm           λ.Object
								ϒpage        = λargs[0]
								ϒplayer_data λ.Object
								ϒversion     = λargs[1]
								ϒvideo       λ.Object
							)
							ϒjson_str = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
								λ.StrLiteral("player_data=(\\\\?[\"\\'])(?P<player_data>.+?)\\1"),
								ϒpage,
								λ.Mod(λ.StrLiteral("%s player_json"), ϒversion),
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
								{Name: "group", Value: λ.StrLiteral("player_data")},
							})
							if !λ.IsTrue(ϒjson_str) {
								return λ.None
							}
							ϒplayer_data = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
								ϒjson_str,
								λ.Mod(λ.StrLiteral("%s player_data"), ϒversion),
							), λ.KWArgs{
								{Name: "fatal", Value: λ.False},
							})
							if !λ.IsTrue(ϒplayer_data) {
								return λ.None
							}
							ϒvideo = λ.Calm(ϒplayer_data, "get", λ.StrLiteral("video"))
							if λ.IsTrue(func() λ.Object {
								if λv := λ.NewBool(!λ.IsTrue(ϒvideo)); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewBool(!λ.Contains(ϒvideo, λ.StrLiteral("file")))
								}
							}()) {
								λ.Calm(ϒself, "report_warning", λ.Mod(λ.StrLiteral("Unable to extract %s version information"), ϒversion))
								return λ.None
							}
							if λ.IsTrue(λ.Calm(λ.GetItem(ϒvideo, λ.StrLiteral("file")), "startswith", λ.StrLiteral("uggc"))) {
								λ.SetItem(ϒvideo, λ.StrLiteral("file"), λ.Cal(λ.None, λ.GetItem(ϒvideo, λ.StrLiteral("file")), λ.StrLiteral("rot_13")))
								if λ.IsTrue(λ.Calm(λ.GetItem(ϒvideo, λ.StrLiteral("file")), "endswith", λ.StrLiteral("adc.mp4"))) {
									λ.SetItem(ϒvideo, λ.StrLiteral("file"), λ.Calm(λ.GetItem(ϒvideo, λ.StrLiteral("file")), "replace", λ.StrLiteral("adc.mp4"), λ.StrLiteral(".mp4")))
								}
							} else {
								if !λ.IsTrue(λ.Calm(λ.GetItem(ϒvideo, λ.StrLiteral("file")), "startswith", λ.StrLiteral("http"))) {
									λ.SetItem(ϒvideo, λ.StrLiteral("file"), λ.Cal(ϒdecrypt_file, λ.GetItem(ϒvideo, λ.StrLiteral("file"))))
								}
							}
							ϒf = λ.DictLiteral(map[string]λ.Object{
								"url": λ.GetItem(ϒvideo, λ.StrLiteral("file")),
							})
							ϒm = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("<a[^>]+data-quality=\"(?P<format_id>[^\"]+)\"[^>]+href=\"[^\"]+\"[^>]+class=\"[^\"]*quality-btn-active[^\"]*\">(?P<height>[0-9]+)p"), ϒpage)
							if λ.IsTrue(ϒm) {
								λ.Calm(ϒf, "update", λ.DictLiteral(map[string]λ.Object{
									"format_id": λ.Calm(ϒm, "group", λ.StrLiteral("format_id")),
									"height":    λ.Cal(λ.IntType, λ.Calm(ϒm, "group", λ.StrLiteral("height"))),
								}))
							}
							λ.Calm(λ.GetItem(ϒinfo_dict, λ.StrLiteral("formats")), "append", ϒf)
							if !λ.IsTrue(λ.GetItem(ϒinfo_dict, λ.StrLiteral("duration"))) {
								λ.SetItem(ϒinfo_dict, λ.StrLiteral("duration"), λ.Cal(ϒparse_duration, λ.Calm(ϒvideo, "get", λ.StrLiteral("duration"))))
							}
							return λ.None
						})
					λ.Cal(ϒextract_format, ϒwebpage, λ.StrLiteral("default"))
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.StrLiteral("<a[^>]+data-quality=\"[^\"]+\"[^>]+href=\"([^\"]+)\"[^>]+class=\"quality-btn\"[^>]*>([0-9]+p)"), ϒwebpage))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒhref = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒresolution = λ.GetItem(τmp2, λ.IntLiteral(1))
						if λ.IsTrue(ϒneed_confirm_age) {
							ϒhandler = λ.GetAttr(ϒself, "_download_age_confirm_page", nil)
						} else {
							ϒhandler = λ.GetAttr(ϒself, "_download_webpage", nil)
						}
						ϒwebpage = λ.Call(ϒhandler, λ.NewArgs(
							λ.Add(λ.GetAttr(ϒself, "_BASE_URL", nil), ϒhref),
							ϒvideo_id,
							λ.Mod(λ.StrLiteral("Downloading %s version information"), ϒresolution),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						})
						if !λ.IsTrue(ϒwebpage) {
							λ.Calm(ϒself, "report_warning", λ.Mod(λ.StrLiteral("Unable to download %s version information"), ϒresolution))
							continue
						}
						λ.Cal(ϒextract_format, ϒwebpage, ϒresolution)
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒinfo = λ.Call(λ.GetAttr(ϒself, "_search_json_ld", nil), λ.NewArgs(
						ϒwebpage,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "default", Value: λ.DictLiteral(map[λ.Object]λ.Object{})},
					})
					return λ.Cal(ϒmerge_dicts, ϒinfo_dict, ϒinfo)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_BASE_URL":     CDAIE__BASE_URL,
				"_VALID_URL":    CDAIE__VALID_URL,
				"_real_extract": CDAIE__real_extract,
			})
		}())
	})
}
