// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * washingtonpost/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/washingtonpost.py
 */

package washingtonpost

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor           λ.Object
	WashingtonPostArticleIE λ.Object
	WashingtonPostIE        λ.Object
	ϒint_or_none            λ.Object
	ϒstrip_jsonp            λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒstrip_jsonp = Ωutils.ϒstrip_jsonp
		WashingtonPostIE = λ.Cal(λ.TypeType, λ.StrLiteral("WashingtonPostIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				WashingtonPostIE__VALID_URL λ.Object
			)
			WashingtonPostIE__VALID_URL = λ.StrLiteral("(?:washingtonpost:|https?://(?:www\\.)?washingtonpost\\.com/video/(?:[^/]+/)*)(?P<id>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": WashingtonPostIE__VALID_URL,
			})
		}())
		WashingtonPostArticleIE = λ.Cal(λ.TypeType, λ.StrLiteral("WashingtonPostArticleIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				WashingtonPostArticleIE__VALID_URL λ.Object
				WashingtonPostArticleIE_suitable   λ.Object
			)
			WashingtonPostArticleIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?washingtonpost\\.com/(?:[^/]+/)*(?P<id>[^/?#]+)")
			WashingtonPostArticleIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Calm(WashingtonPostIE, "suitable", ϒurl)) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, WashingtonPostArticleIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			WashingtonPostArticleIE_suitable = λ.Cal(λ.ClassMethodType, WashingtonPostArticleIE_suitable)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": WashingtonPostArticleIE__VALID_URL,
				"suitable":   WashingtonPostArticleIE_suitable,
			})
		}())
	})
}
