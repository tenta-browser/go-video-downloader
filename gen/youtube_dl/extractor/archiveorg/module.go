// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * archiveorg/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/archiveorg.py
 */

package archiveorg

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ArchiveOrgIE        λ.Object
	InfoExtractor       λ.Object
	ϒclean_html         λ.Object
	ϒextract_attributes λ.Object
	ϒunified_strdate    λ.Object
	ϒunified_timestamp  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒclean_html = Ωutils.ϒclean_html
		ϒextract_attributes = Ωutils.ϒextract_attributes
		ϒunified_strdate = Ωutils.ϒunified_strdate
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		ArchiveOrgIE = λ.Cal(λ.TypeType, λ.StrLiteral("ArchiveOrgIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ArchiveOrgIE_IE_NAME       λ.Object
				ArchiveOrgIE__VALID_URL    λ.Object
				ArchiveOrgIE__real_extract λ.Object
			)
			ArchiveOrgIE_IE_NAME = λ.StrLiteral("archive.org")
			ArchiveOrgIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?archive\\.org/(?:details|embed)/(?P<id>[^/?#&]+)")
			ArchiveOrgIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒattrs             λ.Object
						ϒcreator           λ.Object
						ϒget_optional      λ.Object
						ϒinfo              λ.Object
						ϒjwplayer_playlist λ.Object
						ϒmetadata          λ.Object
						ϒplay8             λ.Object
						ϒplaylist          λ.Object
						ϒself              = λargs[0]
						ϒurl               = λargs[1]
						ϒvideo_id          λ.Object
						ϒwebpage           λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", λ.Add(λ.StrLiteral("http://archive.org/embed/"), ϒvideo_id), ϒvideo_id)
					ϒplaylist = λ.None
					ϒplay8 = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(<[^>]+\\bclass=[\"\\']js-play8-playlist[^>]+>)"),
						ϒwebpage,
						λ.StrLiteral("playlist"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
					})
					if λ.IsTrue(ϒplay8) {
						ϒattrs = λ.Cal(ϒextract_attributes, ϒplay8)
						ϒplaylist = λ.Calm(ϒattrs, "get", λ.StrLiteral("value"))
					}
					if !λ.IsTrue(ϒplaylist) {
						ϒplaylist = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("(?s)Play\\('[^']+'\\s*,\\s*(\\[.+\\])\\s*,\\s*{.*?}\\)"),
							ϒwebpage,
							λ.StrLiteral("jwplayer playlist"),
						), λ.KWArgs{
							{Name: "default", Value: λ.StrLiteral("[]")},
						})
					}
					ϒjwplayer_playlist = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						ϒplaylist,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					})
					if λ.IsTrue(ϒjwplayer_playlist) {
						ϒinfo = λ.Call(λ.GetAttr(ϒself, "_parse_jwplayer_data", nil), λ.NewArgs(
							λ.DictLiteral(map[string]λ.Object{
								"playlist": ϒjwplayer_playlist,
							}),
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "base_url", Value: ϒurl},
						})
					} else {
						ϒinfo = λ.GetItem(λ.Calm(ϒself, "_parse_html5_media_entries", ϒurl, ϒwebpage, ϒvideo_id), λ.IntLiteral(0))
						λ.SetItem(ϒinfo, λ.StrLiteral("id"), ϒvideo_id)
					}
					ϒget_optional = λ.NewFunction("get_optional",
						[]λ.Param{
							{Name: "metadata"},
							{Name: "field"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒfield    = λargs[1]
								ϒmetadata = λargs[0]
							)
							return λ.GetItem(λ.Calm(ϒmetadata, "get", ϒfield, λ.NewList(λ.None)), λ.IntLiteral(0))
						})
					ϒmetadata = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.StrLiteral("http://archive.org/details/"), ϒvideo_id),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]string{
							"output": "json",
						})},
					}), λ.StrLiteral("metadata"))
					λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
						"title": func() λ.Object {
							if λv := λ.Cal(ϒget_optional, ϒmetadata, λ.StrLiteral("title")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒinfo, "get", λ.StrLiteral("title"))
							}
						}(),
						"description": λ.Cal(ϒclean_html, λ.Cal(ϒget_optional, ϒmetadata, λ.StrLiteral("description"))),
					}))
					if λ.IsTrue(λ.Ne(λ.Calm(ϒinfo, "get", λ.StrLiteral("_type")), λ.StrLiteral("playlist"))) {
						ϒcreator = λ.Cal(ϒget_optional, ϒmetadata, λ.StrLiteral("creator"))
						λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
							"creator":      ϒcreator,
							"release_date": λ.Cal(ϒunified_strdate, λ.Cal(ϒget_optional, ϒmetadata, λ.StrLiteral("date"))),
							"uploader": func() λ.Object {
								if λv := λ.Cal(ϒget_optional, ϒmetadata, λ.StrLiteral("publisher")); λ.IsTrue(λv) {
									return λv
								} else {
									return ϒcreator
								}
							}(),
							"timestamp": λ.Cal(ϒunified_timestamp, λ.Cal(ϒget_optional, ϒmetadata, λ.StrLiteral("publicdate"))),
							"language":  λ.Cal(ϒget_optional, ϒmetadata, λ.StrLiteral("language")),
						}))
					}
					return ϒinfo
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       ArchiveOrgIE_IE_NAME,
				"_VALID_URL":    ArchiveOrgIE__VALID_URL,
				"_real_extract": ArchiveOrgIE__real_extract,
			})
		}())
	})
}
