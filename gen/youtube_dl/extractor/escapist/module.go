// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * escapist/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/escapist.py
 */

package escapist

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	EscapistIE       λ.Object
	InfoExtractor    λ.Object
	ϒ_decrypt_config λ.Object
	ϒclean_html      λ.Object
	ϒdetermine_ext   λ.Object
	ϒfloat_or_none   λ.Object
	ϒint_or_none     λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒclean_html = Ωutils.ϒclean_html
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒ_decrypt_config = λ.NewFunction("_decrypt_config",
			[]λ.Param{
				{Name: "key"},
				{Name: "string"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒa      λ.Object
					ϒc      λ.Object
					ϒi      λ.Object
					ϒicko   λ.Object
					ϒkey    = λargs[0]
					ϒr      λ.Object
					ϒstring = λargs[1]
					ϒt      λ.Object
					τmp0    λ.Object
					τmp1    λ.Object
					τmp2    λ.Object
				)
				ϒa = λ.StrLiteral("")
				ϒi = λ.StrLiteral("")
				ϒr = λ.StrLiteral("")
				for λ.IsTrue(λ.Lt(λ.Cal(λ.BuiltinLen, ϒa), λ.TrueDiv(λ.Cal(λ.BuiltinLen, ϒstring), λ.IntLiteral(2)))) {
					τmp0 = λ.IAdd(ϒa, ϒkey)
					ϒa = τmp0
				}
				ϒa = λ.GetItem(ϒa, λ.NewSlice(λ.IntLiteral(0), λ.Cal(λ.IntType, λ.TrueDiv(λ.Cal(λ.BuiltinLen, ϒstring), λ.IntLiteral(2))), λ.None))
				ϒt = λ.IntLiteral(0)
				for λ.IsTrue(λ.Lt(ϒt, λ.Cal(λ.BuiltinLen, ϒstring))) {
					τmp0 = λ.IAdd(ϒi, λ.Cal(λ.BuiltinChr, λ.Cal(λ.IntType, λ.Add(λ.GetItem(ϒstring, ϒt), λ.GetItem(ϒstring, λ.Add(ϒt, λ.IntLiteral(1)))), λ.IntLiteral(16))))
					ϒi = τmp0
					τmp0 = λ.IAdd(ϒt, λ.IntLiteral(2))
					ϒt = τmp0
				}
				ϒicko = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
					nil,
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
							var (
								ϒs   λ.Object
								τmp0 λ.Object
								τmp1 λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, ϒi)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒs = τmp1
								λgy.Yield(ϒs)
							}
							return λ.None
						})
					})))
				τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.EnumerateIteratorType, ϒa))
				for {
					if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
						break
					}
					τmp2 = λ.UnpackIterable(τmp1, 2)
					ϒt = λ.GetItem(τmp2, λ.IntLiteral(0))
					ϒc = λ.GetItem(τmp2, λ.IntLiteral(1))
					τmp2 = λ.IAdd(ϒr, λ.Cal(λ.BuiltinChr, λ.Xor(λ.Cal(λ.BuiltinOrd, ϒc), λ.Cal(λ.BuiltinOrd, λ.GetItem(ϒicko, ϒt)))))
					ϒr = τmp2
				}
				return ϒr
			})
		EscapistIE = λ.Cal(λ.TypeType, λ.StrLiteral("EscapistIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				EscapistIE__VALID_URL    λ.Object
				EscapistIE__real_extract λ.Object
			)
			EscapistIE__VALID_URL = λ.StrLiteral("https?://?(?:(?:www|v1)\\.)?escapistmagazine\\.com/videos/view/[^/]+/(?P<id>[0-9]+)")
			EscapistIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒconfig     λ.Object
						ϒdata       λ.Object
						ϒformats    λ.Object
						ϒims_video  λ.Object
						ϒkey        λ.Object
						ϒself       = λargs[0]
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvideo_data λ.Object
						ϒvideo_id   λ.Object
						ϒwebpage    λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒims_video = λ.Calm(ϒself, "_parse_json", λ.Calm(ϒself, "_search_regex", λ.StrLiteral("imsVideo\\.play\\(({.+?})\\);"), ϒwebpage, λ.StrLiteral("imsVideo")), ϒvideo_id)
					ϒvideo_id = λ.GetItem(ϒims_video, λ.StrLiteral("videoID"))
					ϒkey = λ.GetItem(ϒims_video, λ.StrLiteral("hash"))
					ϒconfig = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						λ.StrLiteral("http://www.escapistmagazine.com/videos/vidconfig.php"),
						ϒvideo_id,
						λ.StrLiteral("Downloading video config"),
					), λ.KWArgs{
						{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
							"Referer": ϒurl,
						})},
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"videoID": ϒvideo_id,
							"hash":    ϒkey,
						})},
					})
					ϒdata = λ.Calm(ϒself, "_parse_json", λ.Cal(ϒ_decrypt_config, ϒkey, ϒconfig), ϒvideo_id)
					ϒvideo_data = λ.GetItem(ϒdata, λ.StrLiteral("videoData"))
					ϒtitle = λ.Cal(ϒclean_html, λ.GetItem(ϒvideo_data, λ.StrLiteral("title")))
					ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒvideo λ.Object
									τmp0   λ.Object
									τmp1   λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(λ.GetItem(ϒdata, λ.StrLiteral("files")), λ.StrLiteral("videos")))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒvideo = τmp1
									λgy.Yield(λ.DictLiteral(map[string]λ.Object{
										"url": λ.GetItem(ϒvideo, λ.StrLiteral("src")),
										"format_id": λ.Mod(λ.StrLiteral("%s-%sp"), λ.NewTuple(
											λ.Cal(ϒdetermine_ext, λ.GetItem(ϒvideo, λ.StrLiteral("src"))),
											λ.GetItem(ϒvideo, λ.StrLiteral("res")),
										)),
										"height": λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("res"))),
									}))
								}
								return λ.None
							})
						})))
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":      ϒvideo_id,
						"formats": ϒformats,
						"title":   ϒtitle,
						"thumbnail": func() λ.Object {
							if λv := λ.Calm(ϒself, "_og_search_thumbnail", ϒwebpage); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒdata, "get", λ.StrLiteral("poster"))
							}
						}(),
						"description": λ.Calm(ϒself, "_og_search_description", ϒwebpage),
						"duration":    λ.Cal(ϒfloat_or_none, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("duration")), λ.IntLiteral(1000)),
						"uploader":    λ.Calm(ϒvideo_data, "get", λ.StrLiteral("publisher")),
						"series":      λ.Calm(ϒvideo_data, "get", λ.StrLiteral("show")),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    EscapistIE__VALID_URL,
				"_real_extract": EscapistIE__real_extract,
			})
		}())
	})
}
