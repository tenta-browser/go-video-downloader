// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * mediaset/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/mediaset.py
 */

package mediaset

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωtheplatform "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/theplatform"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError                λ.Object
	MediasetIE                    λ.Object
	ThePlatformBaseIE             λ.Object
	ϒcompat_parse_qs              λ.Object
	ϒcompat_urllib_parse_urlparse λ.Object
	ϒint_or_none                  λ.Object
	ϒupdate_url_query             λ.Object
)

func init() {
	λ.InitModule(func() {
		ThePlatformBaseIE = Ωtheplatform.ThePlatformBaseIE
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		MediasetIE = λ.Cal(λ.TypeType, λ.StrLiteral("MediasetIE"), λ.NewTuple(ThePlatformBaseIE), func() λ.Dict {
			var (
				MediasetIE__TP_TLD             λ.Object
				MediasetIE__VALID_URL          λ.Object
				MediasetIE__parse_smil_formats λ.Object
				MediasetIE__real_extract       λ.Object
			)
			MediasetIE__TP_TLD = λ.StrLiteral("eu")
			MediasetIE__VALID_URL = λ.StrLiteral("(?x)\n                    (?:\n                        mediaset:|\n                        https?://\n                            (?:(?:www|static3)\\.)?mediasetplay\\.mediaset\\.it/\n                            (?:\n                                (?:video|on-demand|movie)/(?:[^/]+/)+[^/]+_|\n                                player/index\\.html\\?.*?\\bprogramGuid=\n                            )\n                    )(?P<id>[0-9A-Z]{16,})\n                    ")
			MediasetIE__parse_smil_formats = λ.NewFunction("_parse_smil_formats",
				[]λ.Param{
					{Name: "self"},
					{Name: "smil"},
					{Name: "smil_url"},
					{Name: "video_id"},
					{Name: "namespace", Def: λ.None},
					{Name: "f4m_params", Def: λ.None},
					{Name: "transform_rtmp_url", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒf4m_params         = λargs[5]
						ϒnamespace          = λargs[4]
						ϒself               = λargs[0]
						ϒsmil               = λargs[1]
						ϒsmil_url           = λargs[2]
						ϒtransform_rtmp_url = λargs[6]
						ϒvideo              λ.Object
						ϒvideo_id           = λargs[3]
						τmp0                λ.Object
						τmp1                λ.Object
					)
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒsmil, "findall", λ.Calm(ϒself, "_xpath_ns", λ.StrLiteral(".//video"), ϒnamespace)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒvideo = τmp1
						λ.SetItem(λ.GetAttr(ϒvideo, "attrib", nil), λ.StrLiteral("src"), λ.Cal(Ωre.ϒsub, λ.StrLiteral("(https?://vod05)t(-mediaset-it\\.akamaized\\.net/.+?.mpd)\\?.+"), λ.StrLiteral("\\1\\2"), λ.GetItem(λ.GetAttr(ϒvideo, "attrib", nil), λ.StrLiteral("src"))))
					}
					return λ.Calm(λ.Cal(λ.SuperType, MediasetIE, ϒself), "_parse_smil_formats", ϒsmil, ϒsmil_url, ϒvideo_id, ϒnamespace, ϒf4m_params, ϒtransform_rtmp_url)
				})
			MediasetIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒasset_type   λ.Object
						ϒf            λ.Object
						ϒfeed_data    λ.Object
						ϒfields       λ.Object
						ϒfirst_e      λ.Object
						ϒformats      λ.Object
						ϒguid         λ.Object
						ϒinfo         λ.Object
						ϒpublish_info λ.Object
						ϒrepls        λ.Object
						ϒself         = λargs[0]
						ϒsubtitles    λ.Object
						ϒtempl        λ.Object
						ϒtp_f         λ.Object
						ϒtp_formats   λ.Object
						ϒtp_path      λ.Object
						ϒtp_subtitles λ.Object
						ϒurl          = λargs[1]
						τmp0          λ.Object
						τmp1          λ.Object
						τmp2          λ.Object
						τmp3          λ.Object
						τmp4          λ.Object
						τmp5          λ.Object
						τmp6          λ.Object
					)
					ϒguid = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒtp_path = λ.Add(λ.StrLiteral("PR1GhC/media/guid/2702976343/"), ϒguid)
					ϒinfo = λ.Calm(ϒself, "_extract_theplatform_metadata", ϒtp_path, ϒguid)
					ϒformats = λ.NewList()
					ϒsubtitles = λ.DictLiteral(map[λ.Object]λ.Object{})
					ϒfirst_e = λ.None
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.StrLiteral("SD"),
						λ.StrLiteral("HD"),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒasset_type = τmp1
						τmp2 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
							λ.StrLiteral("MPEG4"),
							λ.StrLiteral("MPEG-DASH+none"),
							λ.StrLiteral("M3U+none"),
						))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒf = τmp3
							τmp4, τmp5 = func() (λexit λ.Object, λret λ.Object) {
								defer λ.CatchMulti(
									nil,
									&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
										var ϒe λ.Object = λex
										if !λ.IsTrue(ϒfirst_e) {
											ϒfirst_e = ϒe
										}
										λexit = λ.BlockExitBreak
										return
									}},
								)
								τmp6 = λ.Calm(ϒself, "_extract_theplatform_smil", λ.Cal(ϒupdate_url_query, λ.Mod(λ.StrLiteral("http://link.theplatform.%s/s/%s"), λ.NewTuple(
									λ.GetAttr(ϒself, "_TP_TLD", nil),
									ϒtp_path,
								)), λ.DictLiteral(map[string]λ.Object{
									"mbr":        λ.StrLiteral("true"),
									"formats":    ϒf,
									"assetTypes": ϒasset_type,
								})), ϒguid, λ.Mod(λ.StrLiteral("Downloading %s %s SMIL data"), λ.NewTuple(
									λ.GetItem(λ.Calm(ϒf, "split", λ.StrLiteral("+")), λ.IntLiteral(0)),
									ϒasset_type,
								)))
								ϒtp_formats = λ.GetItem(τmp6, λ.IntLiteral(0))
								ϒtp_subtitles = λ.GetItem(τmp6, λ.IntLiteral(1))
								return λ.BlockExitNormally, nil
							}()
							if τmp4 == λ.BlockExitBreak {
								break
							}
							τmp5 = λ.Cal(λ.BuiltinIter, ϒtp_formats)
							for {
								if τmp4 = λ.NextDefault(τmp5, λ.AfterLast); τmp4 == λ.AfterLast {
									break
								}
								ϒtp_f = τmp4
								λ.SetItem(ϒtp_f, λ.StrLiteral("quality"), func() λ.Object {
									if λ.IsTrue(λ.Eq(ϒasset_type, λ.StrLiteral("HD"))) {
										return λ.IntLiteral(1)
									} else {
										return λ.IntLiteral(0)
									}
								}())
							}
							λ.Calm(ϒformats, "extend", ϒtp_formats)
							ϒsubtitles = λ.Calm(ϒself, "_merge_subtitles", ϒsubtitles, ϒtp_subtitles)
						}
					}
					if λ.IsTrue(func() λ.Object {
						if λv := ϒfirst_e; !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(!λ.IsTrue(ϒformats))
						}
					}()) {
						panic(λ.Raise(ϒfirst_e))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒfields = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
						λ.NewTuple(
							λ.StrLiteral("tvSeason%sNumber"),
							λ.NewTuple(
								λ.StrLiteral(""),
								λ.StrLiteral("Episode"),
							),
						),
						λ.NewTuple(
							λ.StrLiteral("mediasetprogram$%s"),
							λ.NewTuple(
								λ.StrLiteral("brandTitle"),
								λ.StrLiteral("numberOfViews"),
								λ.StrLiteral("publishInfo"),
							),
						),
					))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒtempl = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒrepls = λ.GetItem(τmp2, λ.IntLiteral(1))
						λ.Calm(ϒfields, "extend", λ.Cal(λ.NewFunction("<generator>",
							nil,
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
									var (
										ϒrepl λ.Object
										τmp0  λ.Object
										τmp1  λ.Object
									)
									τmp0 = λ.Cal(λ.BuiltinIter, ϒrepls)
									for {
										if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
											break
										}
										ϒrepl = τmp1
										λgy.Yield(λ.Mod(ϒtempl, ϒrepl))
									}
									return λ.None
								})
							})))
					}
					ϒfeed_data = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.StrLiteral("https://feed.entertainment.tv.theplatform.eu/f/PR1GhC/mediaset-prod-all-programs/guid/-/"), ϒguid),
						ϒguid,
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"fields": λ.Calm(λ.StrLiteral(","), "join", ϒfields),
						})},
					})
					if λ.IsTrue(ϒfeed_data) {
						ϒpublish_info = func() λ.Object {
							if λv := λ.Calm(ϒfeed_data, "get", λ.StrLiteral("mediasetprogram$publishInfo")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.DictLiteral(map[λ.Object]λ.Object{})
							}
						}()
						λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
							"episode_number": λ.Cal(ϒint_or_none, λ.Calm(ϒfeed_data, "get", λ.StrLiteral("tvSeasonEpisodeNumber"))),
							"season_number":  λ.Cal(ϒint_or_none, λ.Calm(ϒfeed_data, "get", λ.StrLiteral("tvSeasonNumber"))),
							"series":         λ.Calm(ϒfeed_data, "get", λ.StrLiteral("mediasetprogram$brandTitle")),
							"uploader":       λ.Calm(ϒpublish_info, "get", λ.StrLiteral("description")),
							"uploader_id":    λ.Calm(ϒpublish_info, "get", λ.StrLiteral("channel")),
							"view_count":     λ.Cal(ϒint_or_none, λ.Calm(ϒfeed_data, "get", λ.StrLiteral("mediasetprogram$numberOfViews"))),
						}))
					}
					λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
						"id":        ϒguid,
						"formats":   ϒformats,
						"subtitles": ϒsubtitles,
					}))
					return ϒinfo
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_TP_TLD":             MediasetIE__TP_TLD,
				"_VALID_URL":          MediasetIE__VALID_URL,
				"_parse_smil_formats": MediasetIE__parse_smil_formats,
				"_real_extract":       MediasetIE__real_extract,
			})
		}())
	})
}
