// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * spotify/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/spotify.py
 */

package spotify

import (
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	SpotifyBaseIE      λ.Object
	SpotifyIE          λ.Object
	SpotifyShowIE      λ.Object
	ϒclean_podcast_url λ.Object
	ϒfloat_or_none     λ.Object
	ϒint_or_none       λ.Object
	ϒstrip_or_none     λ.Object
	ϒtry_get           λ.Object
	ϒunified_strdate   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒclean_podcast_url = Ωutils.ϒclean_podcast_url
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒstrip_or_none = Ωutils.ϒstrip_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒunified_strdate = Ωutils.ϒunified_strdate
		SpotifyBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("SpotifyBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				SpotifyBaseIE__ACCESS_TOKEN     λ.Object
				SpotifyBaseIE__OPERATION_HASHES λ.Object
				SpotifyBaseIE__VALID_URL_TEMPL  λ.Object
				SpotifyBaseIE__call_api         λ.Object
				SpotifyBaseIE__extract_episode  λ.Object
				SpotifyBaseIE__real_initialize  λ.Object
			)
			SpotifyBaseIE__ACCESS_TOKEN = λ.None
			SpotifyBaseIE__OPERATION_HASHES = λ.DictLiteral(map[string]string{
				"Episode":      "8276d4423d709ae9b68ec1b74cc047ba0f7479059a37820be730f125189ac2bf",
				"MinimalShow":  "13ee079672fad3f858ea45a55eb109553b4fb0969ed793185b2e34cbb6ee7cc0",
				"ShowEpisodes": "e0e5ce27bd7748d2c59b4d44ba245a8992a05be75d6fabc3b20753fc8857444d",
			})
			SpotifyBaseIE__VALID_URL_TEMPL = λ.StrLiteral("https?://open\\.spotify\\.com/%s/(?P<id>[^/?&#]+)")
			SpotifyBaseIE__real_initialize = λ.NewFunction("_real_initialize",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					λ.SetAttr(ϒself, "_ACCESS_TOKEN", λ.GetItem(λ.Calm(ϒself, "_download_json", λ.StrLiteral("https://open.spotify.com/get_access_token"), λ.None), λ.StrLiteral("accessToken")))
					return λ.None
				})
			SpotifyBaseIE__call_api = λ.NewFunction("_call_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "operation"},
					{Name: "video_id"},
					{Name: "variables"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒoperation = λargs[1]
						ϒself      = λargs[0]
						ϒvariables = λargs[3]
						ϒvideo_id  = λargs[2]
					)
					return λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("https://api-partner.spotify.com/pathfinder/v1/query"),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"operationName": λ.Add(λ.StrLiteral("query"), ϒoperation),
							"variables":     λ.Cal(Ωjson.ϒdumps, ϒvariables),
							"extensions": λ.Cal(Ωjson.ϒdumps, λ.DictLiteral(map[string]λ.Object{
								"persistedQuery": λ.DictLiteral(map[string]λ.Object{
									"sha256Hash": λ.GetItem(λ.GetAttr(ϒself, "_OPERATION_HASHES", nil), ϒoperation),
								}),
							})),
						})},
						{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
							"authorization": λ.Add(λ.StrLiteral("Bearer "), λ.GetAttr(ϒself, "_ACCESS_TOKEN", nil)),
						})},
					}), λ.StrLiteral("data"))
				})
			SpotifyBaseIE__extract_episode = λ.NewFunction("_extract_episode",
				[]λ.Param{
					{Name: "self"},
					{Name: "episode"},
					{Name: "series"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaudio_preview        λ.Object
						ϒaudio_preview_format λ.Object
						ϒaudio_preview_url    λ.Object
						ϒepisode              = λargs[1]
						ϒepisode_id           λ.Object
						ϒf                    λ.Object
						ϒformats              λ.Object
						ϒitem                 λ.Object
						ϒitem_url             λ.Object
						ϒmobj                 λ.Object
						ϒself                 = λargs[0]
						ϒseries               = λargs[2]
						ϒsource               λ.Object
						ϒsource_url           λ.Object
						ϒthumbnails           λ.Object
						ϒtitle                λ.Object
						τmp0                  λ.Object
						τmp1                  λ.Object
					)
					_ = ϒself
					ϒepisode_id = λ.GetItem(ϒepisode, λ.StrLiteral("id"))
					ϒtitle = λ.Calm(λ.GetItem(ϒepisode, λ.StrLiteral("name")), "strip")
					ϒformats = λ.NewList()
					ϒaudio_preview = func() λ.Object {
						if λv := λ.Calm(ϒepisode, "get", λ.StrLiteral("audioPreview")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒaudio_preview_url = λ.Calm(ϒaudio_preview, "get", λ.StrLiteral("url"))
					if λ.IsTrue(ϒaudio_preview_url) {
						ϒf = λ.DictLiteral(map[string]λ.Object{
							"url":    λ.Calm(ϒaudio_preview_url, "replace", λ.StrLiteral("://p.scdn.co/mp3-preview/"), λ.StrLiteral("://anon-podcast.scdn.co/")),
							"vcodec": λ.StrLiteral("none"),
						})
						ϒaudio_preview_format = λ.Calm(ϒaudio_preview, "get", λ.StrLiteral("format"))
						if λ.IsTrue(ϒaudio_preview_format) {
							λ.SetItem(ϒf, λ.StrLiteral("format_id"), ϒaudio_preview_format)
							ϒmobj = λ.Cal(Ωre.ϒmatch, λ.StrLiteral("([0-9A-Z]{3})_(?:[A-Z]+_)?(\\d+)"), ϒaudio_preview_format)
							if λ.IsTrue(ϒmobj) {
								λ.Calm(ϒf, "update", λ.DictLiteral(map[string]λ.Object{
									"abr": λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(2))),
									"ext": λ.Calm(λ.Calm(ϒmobj, "group", λ.IntLiteral(1)), "lower"),
								}))
							}
						}
						λ.Calm(ϒformats, "append", ϒf)
					}
					τmp0 = λ.Cal(λ.BuiltinIter, func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒepisode, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("audio")), λ.StrLiteral("items"))
							})); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}())
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒitem = τmp1
						ϒitem_url = λ.Calm(ϒitem, "get", λ.StrLiteral("url"))
						if !λ.IsTrue(func() λ.Object {
							if λv := ϒitem_url; !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒitem, "get", λ.StrLiteral("externallyHosted"))
							}
						}()) {
							continue
						}
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url":    λ.Cal(ϒclean_podcast_url, ϒitem_url),
							"vcodec": λ.StrLiteral("none"),
						}))
					}
					ϒthumbnails = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒepisode, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("coverArt")), λ.StrLiteral("sources"))
							})); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}())
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒsource = τmp1
						ϒsource_url = λ.Calm(ϒsource, "get", λ.StrLiteral("url"))
						if !λ.IsTrue(ϒsource_url) {
							continue
						}
						λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
							"url":    ϒsource_url,
							"width":  λ.Cal(ϒint_or_none, λ.Calm(ϒsource, "get", λ.StrLiteral("width"))),
							"height": λ.Cal(ϒint_or_none, λ.Calm(ϒsource, "get", λ.StrLiteral("height"))),
						}))
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒepisode_id,
						"title":       ϒtitle,
						"formats":     ϒformats,
						"thumbnails":  ϒthumbnails,
						"description": λ.Cal(ϒstrip_or_none, λ.Calm(ϒepisode, "get", λ.StrLiteral("description"))),
						"duration": λ.Cal(ϒfloat_or_none, λ.Cal(ϒtry_get, ϒepisode, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("duration")), λ.StrLiteral("totalMilliseconds"))
							})), λ.IntLiteral(1000)),
						"release_date": λ.Cal(ϒunified_strdate, λ.Cal(ϒtry_get, ϒepisode, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("releaseDate")), λ.StrLiteral("isoString"))
							}))),
						"series": ϒseries,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_ACCESS_TOKEN":     SpotifyBaseIE__ACCESS_TOKEN,
				"_OPERATION_HASHES": SpotifyBaseIE__OPERATION_HASHES,
				"_VALID_URL_TEMPL":  SpotifyBaseIE__VALID_URL_TEMPL,
				"_call_api":         SpotifyBaseIE__call_api,
				"_extract_episode":  SpotifyBaseIE__extract_episode,
				"_real_initialize":  SpotifyBaseIE__real_initialize,
			})
		}())
		SpotifyIE = λ.Cal(λ.TypeType, λ.StrLiteral("SpotifyIE"), λ.NewTuple(SpotifyBaseIE), func() λ.Dict {
			var (
				SpotifyIE_IE_NAME       λ.Object
				SpotifyIE__VALID_URL    λ.Object
				SpotifyIE__real_extract λ.Object
			)
			SpotifyIE_IE_NAME = λ.StrLiteral("spotify")
			SpotifyIE__VALID_URL = λ.Mod(λ.GetAttr(SpotifyBaseIE, "_VALID_URL_TEMPL", nil), λ.StrLiteral("episode"))
			SpotifyIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒepisode    λ.Object
						ϒepisode_id λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
					)
					ϒepisode_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒepisode = λ.GetItem(λ.Calm(ϒself, "_call_api", λ.StrLiteral("Episode"), ϒepisode_id, λ.DictLiteral(map[string]λ.Object{
						"uri": λ.Add(λ.StrLiteral("spotify:episode:"), ϒepisode_id),
					})), λ.StrLiteral("episode"))
					return λ.Calm(ϒself, "_extract_episode", ϒepisode, λ.Cal(ϒtry_get, ϒepisode, λ.NewFunction("<lambda>",
						[]λ.Param{
							{Name: "x"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒx = λargs[0]
							)
							return λ.GetItem(λ.GetItem(ϒx, λ.StrLiteral("podcast")), λ.StrLiteral("name"))
						})))
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       SpotifyIE_IE_NAME,
				"_VALID_URL":    SpotifyIE__VALID_URL,
				"_real_extract": SpotifyIE__real_extract,
			})
		}())
		SpotifyShowIE = λ.Cal(λ.TypeType, λ.StrLiteral("SpotifyShowIE"), λ.NewTuple(SpotifyBaseIE), func() λ.Dict {
			var (
				SpotifyShowIE__VALID_URL λ.Object
			)
			SpotifyShowIE__VALID_URL = λ.Mod(λ.GetAttr(SpotifyBaseIE, "_VALID_URL_TEMPL", nil), λ.StrLiteral("show"))
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": SpotifyShowIE__VALID_URL,
			})
		}())
	})
}
