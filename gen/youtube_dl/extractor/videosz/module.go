// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * videosz/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/videosz.py
 */

package videosz

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	VideosZIE      λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		VideosZIE = λ.Cal(λ.TypeType, λ.StrLiteral("VideosZIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VideosZIE__VALID_URL    λ.Object
				VideosZIE__real_extract λ.Object
			)
			VideosZIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.|m\\.|)videosz\\.com/[a-z]+/[a-z]+/(?P<id>[0-9]+)_")
			VideosZIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformat         λ.Object
						ϒformat_matches λ.Object
						ϒformat_url     λ.Object
						ϒformats        λ.Object
						ϒformats_source λ.Object
						ϒself           = λargs[0]
						ϒtitle          λ.Object
						ϒurl            = λargs[1]
						ϒvideo_id       λ.Object
						ϒwebpage        λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
						τmp2            λ.Object
					)
					ϒurl = λ.Cal(Ωre.ϒsub, λ.StrLiteral("^(https?://(?:.+?\\.)?)m\\."), λ.StrLiteral("\\1"), ϒurl)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					if λ.IsTrue(λ.Cal(Ωre.ϒsearch, λ.StrLiteral("<form[^>]*id=\"login_form\"[^>]*>"), ϒwebpage)) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("LOGIN_REQUIRED")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒtitle = λ.Calm(ϒself, "_html_search_meta", λ.StrLiteral("title"), ϒwebpage, λ.StrLiteral("title"))
					ϒtitle = λ.Cal(Ωre.ϒsub, λ.StrLiteral("([^:]+):.+"), λ.StrLiteral("\\1"), ϒtitle)
					ϒformats_source = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("<div[^>]*id=\"download_options_btn_content\"[^>]*>(.+?)</div>"),
						ϒwebpage,
						λ.StrLiteral("formats_source"),
					), λ.KWArgs{
						{Name: "flags", Value: Ωre.DOTALL},
					})
					ϒformats = λ.NewList()
					ϒformat_matches = λ.Cal(Ωre.ϒfindall, λ.StrLiteral("<a[^>]*href=\"(?P<url>[^\"]+)\"[^>]*>(?P<format>[^(]+) \\([^)]+\\)</a>"), ϒformats_source)
					τmp0 = λ.Cal(λ.BuiltinIter, ϒformat_matches)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = λ.UnpackIterable(τmp1, 2)
						ϒformat_url = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒformat = λ.GetItem(τmp2, λ.IntLiteral(1))
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"format_id": ϒformat,
							"url":       λ.Cal(Ωparse.ϒurljoin, ϒurl, ϒformat_url),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": ϒtitle,
						"age_limit":   λ.Calm(ϒself, "_media_rating_search", ϒwebpage),
						"formats":     ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    VideosZIE__VALID_URL,
				"_real_extract": VideosZIE__real_extract,
			})
		}())
	})
}
