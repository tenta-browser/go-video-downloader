// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * vine/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/vine.py
 */

package vine

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor      λ.Object
	VineIE             λ.Object
	VineUserIE         λ.Object
	ϒcompat_str        λ.Object
	ϒdetermine_ext     λ.Object
	ϒint_or_none       λ.Object
	ϒunified_timestamp λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒunified_timestamp = Ωutils.ϒunified_timestamp
		VineIE = λ.Cal(λ.TypeType, λ.StrLiteral("VineIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VineIE__VALID_URL    λ.Object
				VineIE__real_extract λ.Object
			)
			VineIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?vine\\.co/(?:v|oembed)/(?P<id>\\w+)")
			VineIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒalt_title  λ.Object
						ϒdata       λ.Object
						ϒformat_id  λ.Object
						ϒformat_url λ.Object
						ϒformats    λ.Object
						ϒquality    λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒusername   λ.Object
						ϒvideo_id   λ.Object
						ϒvideo_url  λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
						τmp2        λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒdata = λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("https://archive.vine.co/posts/%s.json"), ϒvideo_id), ϒvideo_id)
					ϒvideo_url = λ.NewFunction("video_url",
						[]λ.Param{
							{Name: "kind"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒformat_url λ.Object
								ϒkind       = λargs[0]
								ϒurl_suffix λ.Object
								τmp0        λ.Object
								τmp1        λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
								λ.StrLiteral("Url"),
								λ.StrLiteral("URL"),
							))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒurl_suffix = τmp1
								ϒformat_url = λ.Calm(ϒdata, "get", λ.Mod(λ.StrLiteral("video%s%s"), λ.NewTuple(
									ϒkind,
									ϒurl_suffix,
								)))
								if λ.IsTrue(ϒformat_url) {
									return ϒformat_url
								}
							}
							return λ.None
						})
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.EnumerateIteratorType, λ.NewTuple(
						λ.StrLiteral("low"),
						λ.StrLiteral(""),
						λ.StrLiteral("dash"),
					)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒquality = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒformat_id = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒformat_url = λ.Cal(ϒvideo_url, λ.Calm(ϒformat_id, "capitalize"))
						if !λ.IsTrue(ϒformat_url) {
							continue
						}
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒformat_id, λ.StrLiteral("dash")); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Eq(λ.Cal(ϒdetermine_ext, ϒformat_url), λ.StrLiteral("mpd"))
							}
						}()) {
							λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_mpd_formats", nil), λ.NewArgs(
								ϒformat_url,
								ϒvideo_id,
							), λ.KWArgs{
								{Name: "mpd_id", Value: λ.StrLiteral("dash")},
								{Name: "fatal", Value: λ.False},
							}))
						} else {
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"url": ϒformat_url,
								"format_id": func() λ.Object {
									if λv := ϒformat_id; λ.IsTrue(λv) {
										return λv
									} else {
										return λ.StrLiteral("standard")
									}
								}(),
								"quality": ϒquality,
							}))
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒusername = λ.Calm(ϒdata, "get", λ.StrLiteral("username"))
					ϒalt_title = func() λ.Object {
						if λ.IsTrue(ϒusername) {
							return λ.Mod(λ.StrLiteral("Vine by %s"), ϒusername)
						} else {
							return λ.None
						}
					}()
					return λ.DictLiteral(map[string]λ.Object{
						"id": ϒvideo_id,
						"title": func() λ.Object {
							if λv := λ.Calm(ϒdata, "get", λ.StrLiteral("description")); λ.IsTrue(λv) {
								return λv
							} else if λv := ϒalt_title; λ.IsTrue(λv) {
								return λv
							} else {
								return λ.StrLiteral("Vine video")
							}
						}(),
						"alt_title":     ϒalt_title,
						"thumbnail":     λ.Calm(ϒdata, "get", λ.StrLiteral("thumbnailUrl")),
						"timestamp":     λ.Cal(ϒunified_timestamp, λ.Calm(ϒdata, "get", λ.StrLiteral("created"))),
						"uploader":      ϒusername,
						"uploader_id":   λ.Calm(ϒdata, "get", λ.StrLiteral("userIdStr")),
						"view_count":    λ.Cal(ϒint_or_none, λ.Calm(ϒdata, "get", λ.StrLiteral("loops"))),
						"like_count":    λ.Cal(ϒint_or_none, λ.Calm(ϒdata, "get", λ.StrLiteral("likes"))),
						"comment_count": λ.Cal(ϒint_or_none, λ.Calm(ϒdata, "get", λ.StrLiteral("comments"))),
						"repost_count":  λ.Cal(ϒint_or_none, λ.Calm(ϒdata, "get", λ.StrLiteral("reposts"))),
						"formats":       ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    VineIE__VALID_URL,
				"_real_extract": VineIE__real_extract,
			})
		}())
		VineUserIE = λ.Cal(λ.TypeType, λ.StrLiteral("VineUserIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				VineUserIE__VALID_URL λ.Object
				VineUserIE_suitable   λ.Object
			)
			VineUserIE__VALID_URL = λ.StrLiteral("https?://vine\\.co/(?P<u>u/)?(?P<user>[^/]+)")
			VineUserIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Calm(VineIE, "suitable", ϒurl)) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, VineUserIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			VineUserIE_suitable = λ.Cal(λ.ClassMethodType, VineUserIE_suitable)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": VineUserIE__VALID_URL,
				"suitable":   VineUserIE_suitable,
			})
		}())
	})
}
