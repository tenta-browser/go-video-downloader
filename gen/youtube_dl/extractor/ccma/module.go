// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * ccma/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/ccma.py
 */

package ccma

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	CCMAIE            λ.Object
	InfoExtractor     λ.Object
	ϒclean_html       λ.Object
	ϒint_or_none      λ.Object
	ϒparse_duration   λ.Object
	ϒparse_iso8601    λ.Object
	ϒparse_resolution λ.Object
	ϒurl_or_none      λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒclean_html = Ωutils.ϒclean_html
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒparse_resolution = Ωutils.ϒparse_resolution
		ϒurl_or_none = Ωutils.ϒurl_or_none
		CCMAIE = λ.Cal(λ.TypeType, λ.StrLiteral("CCMAIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				CCMAIE__VALID_URL    λ.Object
				CCMAIE__real_extract λ.Object
			)
			CCMAIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?ccma\\.cat/(?:[^/]+/)*?(?P<type>video|audio)/(?P<id>\\d+)")
			CCMAIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdurada        λ.Object
						ϒduration      λ.Object
						ϒf             λ.Object
						ϒformat_       λ.Object
						ϒformat_url    λ.Object
						ϒformats       λ.Object
						ϒimatges       λ.Object
						ϒinformacio    λ.Object
						ϒlabel         λ.Object
						ϒmedia         λ.Object
						ϒmedia_id      λ.Object
						ϒmedia_type    λ.Object
						ϒmedia_url     λ.Object
						ϒself          = λargs[0]
						ϒsub_url       λ.Object
						ϒsubtitles     λ.Object
						ϒsubtitols     λ.Object
						ϒthumbnail_url λ.Object
						ϒthumbnails    λ.Object
						ϒtimestamp     λ.Object
						ϒtitle         λ.Object
						ϒurl           = λargs[1]
						τmp0           λ.Object
						τmp1           λ.Object
					)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒmedia_type = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒmedia_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒmedia = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("http://dinamics.ccma.cat/pvideo/media.jsp"),
						ϒmedia_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"media": ϒmedia_type,
							"idint": ϒmedia_id,
						})},
					})
					ϒformats = λ.NewList()
					ϒmedia_url = λ.GetItem(λ.GetItem(ϒmedia, λ.StrLiteral("media")), λ.StrLiteral("url"))
					if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒmedia_url, λ.ListType)) {
						τmp0 = λ.Cal(λ.BuiltinIter, ϒmedia_url)
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒformat_ = τmp1
							ϒformat_url = λ.Cal(ϒurl_or_none, λ.Calm(ϒformat_, "get", λ.StrLiteral("file")))
							if !λ.IsTrue(ϒformat_url) {
								continue
							}
							ϒlabel = λ.Calm(ϒformat_, "get", λ.StrLiteral("label"))
							ϒf = λ.Cal(ϒparse_resolution, ϒlabel)
							λ.Calm(ϒf, "update", λ.DictLiteral(map[string]λ.Object{
								"url":       ϒformat_url,
								"format_id": ϒlabel,
							}))
							λ.Calm(ϒformats, "append", ϒf)
						}
					} else {
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url": ϒmedia_url,
							"vcodec": func() λ.Object {
								if λ.IsTrue(λ.Eq(ϒmedia_type, λ.StrLiteral("audio"))) {
									return λ.StrLiteral("none")
								} else {
									return λ.None
								}
							}(),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒinformacio = λ.GetItem(ϒmedia, λ.StrLiteral("informacio"))
					ϒtitle = λ.GetItem(ϒinformacio, λ.StrLiteral("titol"))
					ϒdurada = λ.Calm(ϒinformacio, "get", λ.StrLiteral("durada"), λ.DictLiteral(map[λ.Object]λ.Object{}))
					ϒduration = func() λ.Object {
						if λv := λ.Cal(ϒint_or_none, λ.Calm(ϒdurada, "get", λ.StrLiteral("milisegons")), λ.IntLiteral(1000)); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(ϒparse_duration, λ.Calm(ϒdurada, "get", λ.StrLiteral("text")))
						}
					}()
					ϒtimestamp = λ.Cal(ϒparse_iso8601, λ.Calm(λ.Calm(ϒinformacio, "get", λ.StrLiteral("data_emissio"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("utc")))
					ϒsubtitles = λ.DictLiteral(map[λ.Object]λ.Object{})
					ϒsubtitols = λ.Calm(ϒmedia, "get", λ.StrLiteral("subtitols"), λ.DictLiteral(map[λ.Object]λ.Object{}))
					if λ.IsTrue(ϒsubtitols) {
						ϒsub_url = λ.Calm(ϒsubtitols, "get", λ.StrLiteral("url"))
						if λ.IsTrue(ϒsub_url) {
							λ.Calm(λ.Calm(ϒsubtitles, "setdefault", func() λ.Object {
								if λv := λ.Calm(ϒsubtitols, "get", λ.StrLiteral("iso")); λ.IsTrue(λv) {
									return λv
								} else if λv := λ.Calm(ϒsubtitols, "get", λ.StrLiteral("text")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.StrLiteral("ca")
								}
							}(), λ.NewList()), "append", λ.DictLiteral(map[string]λ.Object{
								"url": ϒsub_url,
							}))
						}
					}
					ϒthumbnails = λ.NewList()
					ϒimatges = λ.Calm(ϒmedia, "get", λ.StrLiteral("imatges"), λ.DictLiteral(map[λ.Object]λ.Object{}))
					if λ.IsTrue(ϒimatges) {
						ϒthumbnail_url = λ.Calm(ϒimatges, "get", λ.StrLiteral("url"))
						if λ.IsTrue(ϒthumbnail_url) {
							ϒthumbnails = λ.NewList(λ.DictLiteral(map[string]λ.Object{
								"url":    ϒthumbnail_url,
								"width":  λ.Cal(ϒint_or_none, λ.Calm(ϒimatges, "get", λ.StrLiteral("amplada"))),
								"height": λ.Cal(ϒint_or_none, λ.Calm(ϒimatges, "get", λ.StrLiteral("alcada"))),
							}))
						}
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒmedia_id,
						"title":       ϒtitle,
						"description": λ.Cal(ϒclean_html, λ.Calm(ϒinformacio, "get", λ.StrLiteral("descripcio"))),
						"duration":    ϒduration,
						"timestamp":   ϒtimestamp,
						"thumbnails":  ϒthumbnails,
						"subtitles":   ϒsubtitles,
						"formats":     ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    CCMAIE__VALID_URL,
				"_real_extract": CCMAIE__real_extract,
			})
		}())
	})
}
