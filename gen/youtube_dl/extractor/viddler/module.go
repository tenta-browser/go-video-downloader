// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * viddler/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/viddler.py
 */

package viddler

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor  λ.Object
	ViddlerIE      λ.Object
	ϒfloat_or_none λ.Object
	ϒint_or_none   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ViddlerIE = λ.Cal(λ.TypeType, λ.StrLiteral("ViddlerIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ViddlerIE__VALID_URL    λ.Object
				ViddlerIE__real_extract λ.Object
			)
			ViddlerIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?viddler\\.com/(?:v|embed|player)/(?P<id>[a-z0-9]+)(?:.+?\\bsecret=(\\d+))?")
			ViddlerIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcategories λ.Object
						ϒdata       λ.Object
						ϒf          λ.Object
						ϒfiled      λ.Object
						ϒformat_id  λ.Object
						ϒformats    λ.Object
						ϒquery      λ.Object
						ϒsecret     λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
					)
					τmp0 = λ.UnpackIterable(λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups"), 2)
					ϒvideo_id = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒsecret = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒquery = λ.DictLiteral(map[string]λ.Object{
						"video_id": ϒvideo_id,
						"key":      λ.StrLiteral("v0vhrt7bg2xq1vyxhkct"),
					})
					if λ.IsTrue(ϒsecret) {
						λ.SetItem(ϒquery, λ.StrLiteral("secret"), ϒsecret)
					}
					ϒdata = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("http://api.viddler.com/api/v2/viddler.videos.getPlaybackDetails.json"),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
							"Referer": ϒurl,
						})},
						{Name: "query", Value: ϒquery},
					}), λ.StrLiteral("video"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒdata, λ.StrLiteral("files")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒfiled = τmp1
						if λ.IsTrue(λ.Ne(λ.Calm(ϒfiled, "get", λ.StrLiteral("status"), λ.StrLiteral("ready")), λ.StrLiteral("ready"))) {
							continue
						}
						ϒformat_id = func() λ.Object {
							if λv := λ.Calm(ϒfiled, "get", λ.StrLiteral("profile_id")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.GetItem(ϒfiled, λ.StrLiteral("profile_name"))
							}
						}()
						ϒf = λ.DictLiteral(map[string]λ.Object{
							"format_id":         ϒformat_id,
							"format_note":       λ.GetItem(ϒfiled, λ.StrLiteral("profile_name")),
							"url":               λ.Calm(ϒself, "_proto_relative_url", λ.GetItem(ϒfiled, λ.StrLiteral("url"))),
							"width":             λ.Cal(ϒint_or_none, λ.Calm(ϒfiled, "get", λ.StrLiteral("width"))),
							"height":            λ.Cal(ϒint_or_none, λ.Calm(ϒfiled, "get", λ.StrLiteral("height"))),
							"filesize":          λ.Cal(ϒint_or_none, λ.Calm(ϒfiled, "get", λ.StrLiteral("size"))),
							"ext":               λ.Calm(ϒfiled, "get", λ.StrLiteral("ext")),
							"source_preference": λ.Neg(λ.IntLiteral(1)),
						})
						λ.Calm(ϒformats, "append", ϒf)
						if λ.IsTrue(λ.Calm(ϒfiled, "get", λ.StrLiteral("cdn_url"))) {
							ϒf = λ.Calm(ϒf, "copy")
							λ.SetItem(ϒf, λ.StrLiteral("url"), λ.Calm(ϒself, "_proto_relative_url", λ.GetItem(ϒfiled, λ.StrLiteral("cdn_url")), λ.StrLiteral("http:")))
							λ.SetItem(ϒf, λ.StrLiteral("format_id"), λ.Add(ϒformat_id, λ.StrLiteral("-cdn")))
							λ.SetItem(ϒf, λ.StrLiteral("source_preference"), λ.IntLiteral(1))
							λ.Calm(ϒformats, "append", ϒf)
						}
						if λ.IsTrue(λ.Calm(ϒfiled, "get", λ.StrLiteral("html5_video_source"))) {
							ϒf = λ.Calm(ϒf, "copy")
							λ.SetItem(ϒf, λ.StrLiteral("url"), λ.Calm(ϒself, "_proto_relative_url", λ.GetItem(ϒfiled, λ.StrLiteral("html5_video_source"))))
							λ.SetItem(ϒf, λ.StrLiteral("format_id"), λ.Add(ϒformat_id, λ.StrLiteral("-html5")))
							λ.SetItem(ϒf, λ.StrLiteral("source_preference"), λ.IntLiteral(0))
							λ.Calm(ϒformats, "append", ϒf)
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒcategories = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒt   λ.Object
									τmp0 λ.Object
									τmp1 λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒdata, "get", λ.StrLiteral("tags"), λ.NewList()))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒt = τmp1
									if λ.Contains(ϒt, λ.StrLiteral("text")) {
										λgy.Yield(λ.Calm(ϒt, "get", λ.StrLiteral("text")))
									}
								}
								return λ.None
							})
						})))
					return λ.DictLiteral(map[string]λ.Object{
						"id":            ϒvideo_id,
						"title":         λ.GetItem(ϒdata, λ.StrLiteral("title")),
						"formats":       ϒformats,
						"description":   λ.Calm(ϒdata, "get", λ.StrLiteral("description")),
						"timestamp":     λ.Cal(ϒint_or_none, λ.Calm(ϒdata, "get", λ.StrLiteral("upload_time"))),
						"thumbnail":     λ.Calm(ϒself, "_proto_relative_url", λ.Calm(ϒdata, "get", λ.StrLiteral("thumbnail_url"))),
						"uploader":      λ.Calm(ϒdata, "get", λ.StrLiteral("author")),
						"duration":      λ.Cal(ϒfloat_or_none, λ.Calm(ϒdata, "get", λ.StrLiteral("length"))),
						"view_count":    λ.Cal(ϒint_or_none, λ.Calm(ϒdata, "get", λ.StrLiteral("view_count"))),
						"comment_count": λ.Cal(ϒint_or_none, λ.Calm(ϒdata, "get", λ.StrLiteral("comment_count"))),
						"categories":    ϒcategories,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    ViddlerIE__VALID_URL,
				"_real_extract": ViddlerIE__real_extract,
			})
		}())
	})
}
