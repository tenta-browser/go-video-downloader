// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * wistia/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/wistia.py
 */

package wistia

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError   λ.Object
	InfoExtractor    λ.Object
	WistiaBaseIE     λ.Object
	WistiaIE         λ.Object
	WistiaPlaylistIE λ.Object
	ϒfloat_or_none   λ.Object
	ϒint_or_none     λ.Object
	ϒtry_get         λ.Object
	ϒunescapeHTML    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ExtractorError = Ωutils.ExtractorError
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒtry_get = Ωutils.ϒtry_get
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		WistiaBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("WistiaBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				WistiaBaseIE__EMBED_BASE_URL        λ.Object
				WistiaBaseIE__VALID_ID_REGEX        λ.Object
				WistiaBaseIE__VALID_URL_BASE        λ.Object
				WistiaBaseIE__download_embed_config λ.Object
				WistiaBaseIE__extract_media         λ.Object
			)
			WistiaBaseIE__VALID_ID_REGEX = λ.StrLiteral("(?P<id>[a-z0-9]{10})")
			WistiaBaseIE__VALID_URL_BASE = λ.StrLiteral("https?://(?:fast\\.)?wistia\\.(?:net|com)/embed/")
			WistiaBaseIE__EMBED_BASE_URL = λ.StrLiteral("http://fast.wistia.com/embed/")
			WistiaBaseIE__download_embed_config = λ.NewFunction("_download_embed_config",
				[]λ.Param{
					{Name: "self"},
					{Name: "config_type"},
					{Name: "config_id"},
					{Name: "referer"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbase_url     λ.Object
						ϒconfig_id    = λargs[2]
						ϒconfig_type  = λargs[1]
						ϒembed_config λ.Object
						ϒreferer      = λargs[3]
						ϒself         = λargs[0]
					)
					ϒbase_url = λ.Add(λ.GetAttr(ϒself, "_EMBED_BASE_URL", nil), λ.Mod(λ.StrLiteral("%ss/%s"), λ.NewTuple(
						ϒconfig_type,
						ϒconfig_id,
					)))
					ϒembed_config = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(ϒbase_url, λ.StrLiteral(".json")),
						ϒconfig_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
							"Referer": func() λ.Object {
								if λ.IsTrue(λ.Calm(ϒreferer, "startswith", λ.StrLiteral("http"))) {
									return ϒreferer
								} else {
									return ϒbase_url
								}
							}(),
						})},
					})
					if λ.IsTrue(func() λ.Object {
						if λv := λ.Cal(λ.BuiltinIsInstance, ϒembed_config, λ.DictType); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒembed_config, "get", λ.StrLiteral("error"))
						}
					}()) {
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("Error while getting the playlist")), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					return ϒembed_config
				})
			WistiaBaseIE__extract_media = λ.NewFunction("_extract_media",
				[]λ.Param{
					{Name: "self"},
					{Name: "embed_config"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒa            λ.Object
						ϒaext         λ.Object
						ϒastatus      λ.Object
						ϒatype        λ.Object
						ϒaurl         λ.Object
						ϒcaption      λ.Object
						ϒdata         λ.Object
						ϒdisplay_name λ.Object
						ϒembed_config = λargs[1]
						ϒf            λ.Object
						ϒformat_id    λ.Object
						ϒformats      λ.Object
						ϒlanguage     λ.Object
						ϒself         = λargs[0]
						ϒsubtitles    λ.Object
						ϒthumbnails   λ.Object
						ϒtitle        λ.Object
						ϒts_f         λ.Object
						ϒvideo_id     λ.Object
						τmp0          λ.Object
						τmp1          λ.Object
					)
					ϒdata = λ.GetItem(ϒembed_config, λ.StrLiteral("media"))
					ϒvideo_id = λ.GetItem(ϒdata, λ.StrLiteral("hashedId"))
					ϒtitle = λ.GetItem(ϒdata, λ.StrLiteral("name"))
					ϒformats = λ.NewList()
					ϒthumbnails = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒdata, λ.StrLiteral("assets")))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒa = τmp1
						ϒaurl = λ.Calm(ϒa, "get", λ.StrLiteral("url"))
						if !λ.IsTrue(ϒaurl) {
							continue
						}
						ϒastatus = λ.Calm(ϒa, "get", λ.StrLiteral("status"))
						ϒatype = λ.Calm(ϒa, "get", λ.StrLiteral("type"))
						if λ.IsTrue(func() λ.Object {
							if λv := func() λ.Object {
								if λv := λ.NewBool(ϒastatus != λ.None); !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Ne(ϒastatus, λ.IntLiteral(2))
								}
							}(); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(λ.NewTuple(
									λ.StrLiteral("preview"),
									λ.StrLiteral("storyboard"),
								), ϒatype))
							}
						}()) {
							continue
						} else {
							if λ.Contains(λ.NewTuple(
								λ.StrLiteral("still"),
								λ.StrLiteral("still_image"),
							), ϒatype) {
								λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
									"url":      ϒaurl,
									"width":    λ.Cal(ϒint_or_none, λ.Calm(ϒa, "get", λ.StrLiteral("width"))),
									"height":   λ.Cal(ϒint_or_none, λ.Calm(ϒa, "get", λ.StrLiteral("height"))),
									"filesize": λ.Cal(ϒint_or_none, λ.Calm(ϒa, "get", λ.StrLiteral("size"))),
								}))
							} else {
								ϒaext = λ.Calm(ϒa, "get", λ.StrLiteral("ext"))
								ϒdisplay_name = λ.Calm(ϒa, "get", λ.StrLiteral("display_name"))
								ϒformat_id = ϒatype
								if λ.IsTrue(func() λ.Object {
									if λv := ϒatype; !λ.IsTrue(λv) {
										return λv
									} else if λv := λ.Calm(ϒatype, "endswith", λ.StrLiteral("_video")); !λ.IsTrue(λv) {
										return λv
									} else {
										return ϒdisplay_name
									}
								}()) {
									ϒformat_id = λ.Mod(λ.StrLiteral("%s-%s"), λ.NewTuple(
										λ.GetItem(ϒatype, λ.NewSlice(λ.None, λ.Neg(λ.IntLiteral(6)), λ.None)),
										ϒdisplay_name,
									))
								}
								ϒf = λ.DictLiteral(map[string]λ.Object{
									"format_id": ϒformat_id,
									"url":       ϒaurl,
									"tbr": func() λ.Object {
										if λv := λ.Cal(ϒint_or_none, λ.Calm(ϒa, "get", λ.StrLiteral("bitrate"))); λ.IsTrue(λv) {
											return λv
										} else {
											return λ.None
										}
									}(),
									"preference": func() λ.Object {
										if λ.IsTrue(λ.Eq(ϒatype, λ.StrLiteral("original"))) {
											return λ.IntLiteral(1)
										} else {
											return λ.None
										}
									}(),
								})
								if λ.IsTrue(λ.Eq(ϒdisplay_name, λ.StrLiteral("Audio"))) {
									λ.Calm(ϒf, "update", λ.DictLiteral(map[string]string{
										"vcodec": "none",
									}))
								} else {
									λ.Calm(ϒf, "update", λ.DictLiteral(map[string]λ.Object{
										"width":  λ.Cal(ϒint_or_none, λ.Calm(ϒa, "get", λ.StrLiteral("width"))),
										"height": λ.Cal(ϒint_or_none, λ.Calm(ϒa, "get", λ.StrLiteral("height"))),
										"vcodec": λ.Calm(ϒa, "get", λ.StrLiteral("codec")),
									}))
								}
								if λ.IsTrue(func() λ.Object {
									if λv := λ.Eq(λ.Calm(ϒa, "get", λ.StrLiteral("container")), λ.StrLiteral("m3u8")); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Eq(ϒaext, λ.StrLiteral("m3u8"))
									}
								}()) {
									ϒts_f = λ.Calm(ϒf, "copy")
									λ.Calm(ϒts_f, "update", λ.DictLiteral(map[string]λ.Object{
										"ext":       λ.StrLiteral("ts"),
										"format_id": λ.Calm(λ.GetItem(ϒf, λ.StrLiteral("format_id")), "replace", λ.StrLiteral("hls-"), λ.StrLiteral("ts-")),
										"url":       λ.Calm(λ.GetItem(ϒf, λ.StrLiteral("url")), "replace", λ.StrLiteral(".bin"), λ.StrLiteral(".ts")),
									}))
									λ.Calm(ϒformats, "append", ϒts_f)
									λ.Calm(ϒf, "update", λ.DictLiteral(map[string]string{
										"ext":      "mp4",
										"protocol": "m3u8_native",
									}))
								} else {
									λ.Calm(ϒf, "update", λ.DictLiteral(map[string]λ.Object{
										"container": λ.Calm(ϒa, "get", λ.StrLiteral("container")),
										"ext":       ϒaext,
										"filesize":  λ.Cal(ϒint_or_none, λ.Calm(ϒa, "get", λ.StrLiteral("size"))),
									}))
								}
								λ.Calm(ϒformats, "append", ϒf)
							}
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒsubtitles = λ.DictLiteral(map[λ.Object]λ.Object{})
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒdata, "get", λ.StrLiteral("captions"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒcaption = τmp1
						ϒlanguage = λ.Calm(ϒcaption, "get", λ.StrLiteral("language"))
						if !λ.IsTrue(ϒlanguage) {
							continue
						}
						λ.SetItem(ϒsubtitles, ϒlanguage, λ.NewList(λ.DictLiteral(map[string]λ.Object{
							"url": λ.Add(λ.Add(λ.Add(λ.Add(λ.GetAttr(ϒself, "_EMBED_BASE_URL", nil), λ.StrLiteral("captions/")), ϒvideo_id), λ.StrLiteral(".vtt?language=")), ϒlanguage),
						})))
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"description": λ.Calm(ϒdata, "get", λ.StrLiteral("seoDescription")),
						"formats":     ϒformats,
						"thumbnails":  ϒthumbnails,
						"duration":    λ.Cal(ϒfloat_or_none, λ.Calm(ϒdata, "get", λ.StrLiteral("duration"))),
						"timestamp":   λ.Cal(ϒint_or_none, λ.Calm(ϒdata, "get", λ.StrLiteral("createdAt"))),
						"subtitles":   ϒsubtitles,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_EMBED_BASE_URL":        WistiaBaseIE__EMBED_BASE_URL,
				"_VALID_ID_REGEX":        WistiaBaseIE__VALID_ID_REGEX,
				"_VALID_URL_BASE":        WistiaBaseIE__VALID_URL_BASE,
				"_download_embed_config": WistiaBaseIE__download_embed_config,
				"_extract_media":         WistiaBaseIE__extract_media,
			})
		}())
		WistiaIE = λ.Cal(λ.TypeType, λ.StrLiteral("WistiaIE"), λ.NewTuple(WistiaBaseIE), func() λ.Dict {
			var (
				WistiaIE__VALID_URL    λ.Object
				WistiaIE__real_extract λ.Object
			)
			WistiaIE__VALID_URL = λ.Mod(λ.StrLiteral("(?:wistia:|%s(?:iframe|medias)/)%s"), λ.NewTuple(
				λ.GetAttr(WistiaBaseIE, "_VALID_URL_BASE", nil),
				λ.GetAttr(WistiaBaseIE, "_VALID_ID_REGEX", nil),
			))
			WistiaIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒembed_config λ.Object
						ϒself         = λargs[0]
						ϒurl          = λargs[1]
						ϒvideo_id     λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒembed_config = λ.Calm(ϒself, "_download_embed_config", λ.StrLiteral("media"), ϒvideo_id, ϒurl)
					return λ.Calm(ϒself, "_extract_media", ϒembed_config)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    WistiaIE__VALID_URL,
				"_real_extract": WistiaIE__real_extract,
			})
		}())
		WistiaPlaylistIE = λ.Cal(λ.TypeType, λ.StrLiteral("WistiaPlaylistIE"), λ.NewTuple(WistiaBaseIE), func() λ.Dict {
			var (
				WistiaPlaylistIE__VALID_URL λ.Object
			)
			WistiaPlaylistIE__VALID_URL = λ.Mod(λ.StrLiteral("%splaylists/%s"), λ.NewTuple(
				λ.GetAttr(WistiaIE, "_VALID_URL_BASE", nil),
				λ.GetAttr(WistiaIE, "_VALID_ID_REGEX", nil),
			))
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": WistiaPlaylistIE__VALID_URL,
			})
		}())
	})
}
