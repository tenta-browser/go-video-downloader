// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * kaltura/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/kaltura.py
 */

package kaltura

import (
	Ωbase64 "github.com/tenta-browser/go-video-downloader/gen/base64"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError   λ.Object
	InfoExtractor    λ.Object
	KalturaIE        λ.Object
	ϒclean_html      λ.Object
	ϒcompat_parse_qs λ.Object
	ϒint_or_none     λ.Object
	ϒsmuggle_url     λ.Object
	ϒunsmuggle_url   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒclean_html = Ωutils.ϒclean_html
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒunsmuggle_url = Ωutils.ϒunsmuggle_url
		ϒsmuggle_url = Ωutils.ϒsmuggle_url
		KalturaIE = λ.Cal(λ.TypeType, λ.StrLiteral("KalturaIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				KalturaIE__SERVICE_BASE     λ.Object
				KalturaIE__SERVICE_URL      λ.Object
				KalturaIE__VALID_URL        λ.Object
				KalturaIE__extract_url      λ.Object
				KalturaIE__extract_urls     λ.Object
				KalturaIE__get_video_info   λ.Object
				KalturaIE__kaltura_api_call λ.Object
				KalturaIE__real_extract     λ.Object
			)
			KalturaIE__VALID_URL = λ.StrLiteral("(?x)\n                (?:\n                    kaltura:(?P<partner_id>\\d+):(?P<id>[0-9a-z_]+)|\n                    https?://\n                        (:?(?:www|cdnapi(?:sec)?)\\.)?kaltura\\.com(?::\\d+)?/\n                        (?:\n                            (?:\n                                # flash player\n                                index\\.php/(?:kwidget|extwidget/preview)|\n                                # html5 player\n                                html5/html5lib/[^/]+/mwEmbedFrame\\.php\n                            )\n                        )(?:/(?P<path>[^?]+))?(?:\\?(?P<query>.*))?\n                )\n                ")
			KalturaIE__SERVICE_URL = λ.StrLiteral("http://cdnapi.kaltura.com")
			KalturaIE__SERVICE_BASE = λ.StrLiteral("/api_v3/index.php")
			KalturaIE__extract_url = λ.NewFunction("_extract_url",
				[]λ.Param{
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒurls    λ.Object
						ϒwebpage = λargs[0]
					)
					ϒurls = λ.Calm(KalturaIE, "_extract_urls", ϒwebpage)
					return func() λ.Object {
						if λ.IsTrue(ϒurls) {
							return λ.GetItem(ϒurls, λ.IntLiteral(0))
						} else {
							return λ.None
						}
					}()
				})
			KalturaIE__extract_url = λ.Cal(λ.StaticMethodType, KalturaIE__extract_url)
			KalturaIE__extract_urls = λ.NewFunction("_extract_urls",
				[]λ.Param{
					{Name: "webpage"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒembed_info   λ.Object
						ϒescaped_pid  λ.Object
						ϒfinditer     λ.Object
						ϒk            λ.Object
						ϒmobj         λ.Object
						ϒservice_mobj λ.Object
						ϒurl          λ.Object
						ϒurls         λ.Object
						ϒv            λ.Object
						ϒwebpage      = λargs[0]
						τmp0          λ.Object
						τmp1          λ.Object
						τmp2          λ.Object
						τmp3          λ.Object
						τmp4          λ.Object
					)
					ϒfinditer = func() λ.Object {
						if λv := λ.Cal(Ωre.ϒfinditer, λ.StrLiteral("(?xs)\n                    kWidget\\.(?:thumb)?[Ee]mbed\\(\n                    \\{.*?\n                        (?P<q1>['\"])wid(?P=q1)\\s*:\\s*\n                        (?P<q2>['\"])_?(?P<partner_id>(?:(?!(?P=q2)).)+)(?P=q2),.*?\n                        (?P<q3>['\"])entry_?[Ii]d(?P=q3)\\s*:\\s*\n                        (?P<q4>['\"])(?P<id>(?:(?!(?P=q4)).)+)(?P=q4)(?:,|\\s*\\})\n                "), ϒwebpage); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Cal(Ωre.ϒfinditer, λ.StrLiteral("(?xs)\n                    (?P<q1>[\"'])\n                        (?:https?:)?//cdnapi(?:sec)?\\.kaltura\\.com(?::\\d+)?/(?:(?!(?P=q1)).)*\\b(?:p|partner_id)/(?P<partner_id>\\d+)(?:(?!(?P=q1)).)*\n                    (?P=q1).*?\n                    (?:\n                        (?:\n                            entry_?[Ii]d|\n                            (?P<q2>[\"'])entry_?[Ii]d(?P=q2)\n                        )\\s*:\\s*|\n                        \\[\\s*(?P<q2_1>[\"'])entry_?[Ii]d(?P=q2_1)\\s*\\]\\s*=\\s*\n                    )\n                    (?P<q3>[\"'])(?P<id>(?:(?!(?P=q3)).)+)(?P=q3)\n                "), ϒwebpage); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Cal(Ωre.ϒfinditer, λ.StrLiteral("(?xs)\n                    <(?:iframe[^>]+src|meta[^>]+\\bcontent)=(?P<q1>[\"'])\n                      (?:https?:)?//(?:(?:www|cdnapi(?:sec)?)\\.)?kaltura\\.com/(?:(?!(?P=q1)).)*\\b(?:p|partner_id)/(?P<partner_id>\\d+)\n                      (?:(?!(?P=q1)).)*\n                      [?&;]entry_id=(?P<id>(?:(?!(?P=q1))[^&])+)\n                      (?:(?!(?P=q1)).)*\n                    (?P=q1)\n                "), ϒwebpage)
						}
					}()
					ϒurls = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, ϒfinditer)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒmobj = τmp1
						ϒembed_info = λ.Calm(ϒmobj, "groupdict")
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒembed_info, "items"))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							τmp4 = λ.UnpackIterable(τmp3, 2)
							ϒk = λ.GetItem(τmp4, λ.IntLiteral(0))
							ϒv = λ.GetItem(τmp4, λ.IntLiteral(1))
							if λ.IsTrue(ϒv) {
								λ.SetItem(ϒembed_info, ϒk, λ.Calm(ϒv, "strip"))
							}
						}
						ϒurl = λ.Mod(λ.StrLiteral("kaltura:%(partner_id)s:%(id)s"), ϒembed_info)
						ϒescaped_pid = λ.Cal(Ωre.ϒescape, λ.GetItem(ϒembed_info, λ.StrLiteral("partner_id")))
						ϒservice_mobj = λ.Cal(Ωre.ϒsearch, λ.Mod(λ.StrLiteral("<script[^>]+src=([\"\\'])(?P<id>(?:https?:)?//(?:(?!\\1).)+)/p/%s/sp/%s00/embedIframeJs"), λ.NewTuple(
							ϒescaped_pid,
							ϒescaped_pid,
						)), ϒwebpage)
						if λ.IsTrue(ϒservice_mobj) {
							ϒurl = λ.Cal(ϒsmuggle_url, ϒurl, λ.DictLiteral(map[string]λ.Object{
								"service_url": λ.Calm(ϒservice_mobj, "group", λ.StrLiteral("id")),
							}))
						}
						λ.Calm(ϒurls, "append", ϒurl)
					}
					return ϒurls
				})
			KalturaIE__extract_urls = λ.Cal(λ.StaticMethodType, KalturaIE__extract_urls)
			KalturaIE__kaltura_api_call = λ.NewFunction("_kaltura_api_call",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_id"},
					{Name: "actions"},
					{Name: "service_url", Def: λ.None},
				},
				0, true, true,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒa           λ.Object
						ϒactions     = λargs[2]
						ϒargs        = λargs[4]
						ϒdata        λ.Object
						ϒi           λ.Object
						ϒk           λ.Object
						ϒkwargs      = λargs[5]
						ϒparams      λ.Object
						ϒself        = λargs[0]
						ϒservice_url = λargs[3]
						ϒstatus      λ.Object
						ϒv           λ.Object
						ϒvideo_id    = λargs[1]
						τmp0         λ.Object
						τmp1         λ.Object
						τmp2         λ.Object
						τmp3         λ.Object
						τmp4         λ.Object
					)
					ϒparams = λ.GetItem(ϒactions, λ.IntLiteral(0))
					if λ.IsTrue(λ.Gt(λ.Cal(λ.BuiltinLen, ϒactions), λ.IntLiteral(1))) {
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Call(λ.EnumerateIteratorType, λ.NewArgs(λ.GetItem(ϒactions, λ.NewSlice(λ.IntLiteral(1), λ.None, λ.None))), λ.KWArgs{
							{Name: "start", Value: λ.IntLiteral(1)},
						}))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							τmp2 = λ.UnpackIterable(τmp1, 2)
							ϒi = λ.GetItem(τmp2, λ.IntLiteral(0))
							ϒa = λ.GetItem(τmp2, λ.IntLiteral(1))
							τmp2 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒa, "items"))
							for {
								if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
									break
								}
								τmp4 = λ.UnpackIterable(τmp3, 2)
								ϒk = λ.GetItem(τmp4, λ.IntLiteral(0))
								ϒv = λ.GetItem(τmp4, λ.IntLiteral(1))
								λ.SetItem(ϒparams, λ.Mod(λ.StrLiteral("%d:%s"), λ.NewTuple(
									ϒi,
									ϒk,
								)), ϒv)
							}
						}
					}
					ϒdata = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(λ.Unpack(
						λ.Add(func() λ.Object {
							if λv := ϒservice_url; λ.IsTrue(λv) {
								return λv
							} else {
								return λ.GetAttr(ϒself, "_SERVICE_URL", nil)
							}
						}(), λ.GetAttr(ϒself, "_SERVICE_BASE", nil)),
						ϒvideo_id,
						λ.AsStarred(ϒargs),
					)...), λ.KWArgs{
						{Name: "query", Value: ϒparams},
						{Name: "", Value: ϒkwargs},
					})
					ϒstatus = func() λ.Object {
						if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒactions), λ.IntLiteral(1))) {
							return ϒdata
						} else {
							return λ.GetItem(ϒdata, λ.IntLiteral(0))
						}
					}()
					if λ.IsTrue(λ.Eq(λ.Calm(ϒstatus, "get", λ.StrLiteral("objectType")), λ.StrLiteral("KalturaAPIException"))) {
						panic(λ.Raise(λ.Cal(ExtractorError, λ.Mod(λ.StrLiteral("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							λ.GetItem(ϒstatus, λ.StrLiteral("message")),
						)))))
					}
					return ϒdata
				})
			KalturaIE__get_video_info = λ.NewFunction("_get_video_info",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_id"},
					{Name: "partner_id"},
					{Name: "service_url", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒactions     λ.Object
						ϒpartner_id  = λargs[2]
						ϒself        = λargs[0]
						ϒservice_url = λargs[3]
						ϒvideo_id    = λargs[1]
					)
					ϒactions = λ.NewList(
						λ.DictLiteral(map[string]λ.Object{
							"action":     λ.StrLiteral("null"),
							"apiVersion": λ.StrLiteral("3.1.5"),
							"clientTag":  λ.StrLiteral("kdp:v3.8.5"),
							"format":     λ.IntLiteral(1),
							"service":    λ.StrLiteral("multirequest"),
						}),
						λ.DictLiteral(map[string]λ.Object{
							"expiry":   λ.IntLiteral(86400),
							"service":  λ.StrLiteral("session"),
							"action":   λ.StrLiteral("startWidgetSession"),
							"widgetId": λ.Mod(λ.StrLiteral("_%s"), ϒpartner_id),
						}),
						λ.DictLiteral(map[string]λ.Object{
							"action":                 λ.StrLiteral("get"),
							"entryId":                ϒvideo_id,
							"service":                λ.StrLiteral("baseentry"),
							"ks":                     λ.StrLiteral("{1:result:ks}"),
							"responseProfile:fields": λ.StrLiteral("createdAt,dataUrl,duration,name,plays,thumbnailUrl,userId"),
							"responseProfile:type":   λ.IntLiteral(1),
						}),
						λ.DictLiteral(map[string]λ.Object{
							"action":  λ.StrLiteral("getbyentryid"),
							"entryId": ϒvideo_id,
							"service": λ.StrLiteral("flavorAsset"),
							"ks":      λ.StrLiteral("{1:result:ks}"),
						}),
						λ.DictLiteral(map[string]λ.Object{
							"action":              λ.StrLiteral("list"),
							"filter:entryIdEqual": ϒvideo_id,
							"service":             λ.StrLiteral("caption_captionasset"),
							"ks":                  λ.StrLiteral("{1:result:ks}"),
						}),
					)
					return λ.Call(λ.GetAttr(ϒself, "_kaltura_api_call", nil), λ.NewArgs(
						ϒvideo_id,
						ϒactions,
						ϒservice_url,
					), λ.KWArgs{
						{Name: "note", Value: λ.StrLiteral("Downloading video info JSON")},
					})
				})
			KalturaIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcaption        λ.Object
						ϒcaption_format λ.Object
						ϒcaptions       λ.Object
						ϒdata_url       λ.Object
						ϒentry_data     λ.Object
						ϒentry_id       λ.Object
						ϒf              λ.Object
						ϒflavor_assets  λ.Object
						ϒformat_id      λ.Object
						ϒformats        λ.Object
						ϒinfo           λ.Object
						ϒks             λ.Object
						ϒm3u8_url       λ.Object
						ϒmobj           λ.Object
						ϒparams         λ.Object
						ϒpartner_id     λ.Object
						ϒpath           λ.Object
						ϒquery          λ.Object
						ϒreference_id   λ.Object
						ϒreferrer       λ.Object
						ϒself           = λargs[0]
						ϒsign_url       λ.Object
						ϒsmuggled_data  λ.Object
						ϒsource_url     λ.Object
						ϒsplitted_path  λ.Object
						ϒsubtitles      λ.Object
						ϒurl            = λargs[1]
						ϒvcodec         λ.Object
						ϒvideo_url      λ.Object
						ϒwebpage        λ.Object
						τmp0            λ.Object
						τmp1            λ.Object
						τmp2            λ.Object
					)
					τmp0 = λ.UnpackIterable(λ.Cal(ϒunsmuggle_url, ϒurl, λ.DictLiteral(map[λ.Object]λ.Object{})), 2)
					ϒurl = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒsmuggled_data = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					τmp0 = λ.UnpackIterable(λ.Calm(ϒmobj, "group", λ.StrLiteral("partner_id"), λ.StrLiteral("id")), 2)
					ϒpartner_id = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒentry_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒks = λ.None
					ϒcaptions = λ.None
					if λ.IsTrue(func() λ.Object {
						if λv := ϒpartner_id; !λ.IsTrue(λv) {
							return λv
						} else {
							return ϒentry_id
						}
					}()) {
						τmp0 = λ.UnpackIterable(λ.Calm(ϒself, "_get_video_info", ϒentry_id, ϒpartner_id, λ.Calm(ϒsmuggled_data, "get", λ.StrLiteral("service_url"))), 4)
						_ = λ.GetItem(τmp0, λ.IntLiteral(0))
						ϒinfo = λ.GetItem(τmp0, λ.IntLiteral(1))
						ϒflavor_assets = λ.GetItem(τmp0, λ.IntLiteral(2))
						ϒcaptions = λ.GetItem(τmp0, λ.IntLiteral(3))
					} else {
						τmp0 = λ.UnpackIterable(λ.Calm(ϒmobj, "group", λ.StrLiteral("path"), λ.StrLiteral("query")), 2)
						ϒpath = λ.GetItem(τmp0, λ.IntLiteral(0))
						ϒquery = λ.GetItem(τmp0, λ.IntLiteral(1))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒpath)); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(!λ.IsTrue(ϒquery))
							}
						}()) {
							panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("Invalid URL")), λ.KWArgs{
								{Name: "expected", Value: λ.True},
							})))
						}
						ϒparams = λ.DictLiteral(map[λ.Object]λ.Object{})
						if λ.IsTrue(ϒquery) {
							ϒparams = λ.Cal(ϒcompat_parse_qs, ϒquery)
						}
						if λ.IsTrue(ϒpath) {
							ϒsplitted_path = λ.Calm(ϒpath, "split", λ.StrLiteral("/"))
							λ.Calm(ϒparams, "update", λ.Cal(λ.DictType, λ.Cal(λ.ZipIteratorType, λ.GetItem(ϒsplitted_path, λ.NewSlice(λ.None, λ.None, λ.IntLiteral(2))), λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
								nil,
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
										var (
											ϒv   λ.Object
											τmp0 λ.Object
											τmp1 λ.Object
										)
										τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒsplitted_path, λ.NewSlice(λ.IntLiteral(1), λ.None, λ.IntLiteral(2))))
										for {
											if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
												break
											}
											ϒv = τmp1
											λgy.Yield(λ.NewList(ϒv))
										}
										return λ.None
									})
								}))))))
						}
						if λ.Contains(ϒparams, λ.StrLiteral("wid")) {
							ϒpartner_id = λ.GetItem(λ.GetItem(λ.GetItem(ϒparams, λ.StrLiteral("wid")), λ.IntLiteral(0)), λ.NewSlice(λ.IntLiteral(1), λ.None, λ.None))
						} else {
							if λ.Contains(ϒparams, λ.StrLiteral("p")) {
								ϒpartner_id = λ.GetItem(λ.GetItem(ϒparams, λ.StrLiteral("p")), λ.IntLiteral(0))
							} else {
								if λ.Contains(ϒparams, λ.StrLiteral("partner_id")) {
									ϒpartner_id = λ.GetItem(λ.GetItem(ϒparams, λ.StrLiteral("partner_id")), λ.IntLiteral(0))
								} else {
									panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("Invalid URL")), λ.KWArgs{
										{Name: "expected", Value: λ.True},
									})))
								}
							}
						}
						if λ.Contains(ϒparams, λ.StrLiteral("entry_id")) {
							ϒentry_id = λ.GetItem(λ.GetItem(ϒparams, λ.StrLiteral("entry_id")), λ.IntLiteral(0))
							τmp0 = λ.UnpackIterable(λ.Calm(ϒself, "_get_video_info", ϒentry_id, ϒpartner_id), 4)
							_ = λ.GetItem(τmp0, λ.IntLiteral(0))
							ϒinfo = λ.GetItem(τmp0, λ.IntLiteral(1))
							ϒflavor_assets = λ.GetItem(τmp0, λ.IntLiteral(2))
							ϒcaptions = λ.GetItem(τmp0, λ.IntLiteral(3))
						} else {
							if λ.IsTrue(func() λ.Object {
								if λv := λ.NewBool(λ.Contains(ϒparams, λ.StrLiteral("uiconf_id"))); !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.NewBool(λ.Contains(ϒparams, λ.StrLiteral("flashvars[referenceId]")))
								}
							}()) {
								ϒreference_id = λ.GetItem(λ.GetItem(ϒparams, λ.StrLiteral("flashvars[referenceId]")), λ.IntLiteral(0))
								ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒreference_id)
								ϒentry_data = λ.GetItem(λ.Calm(ϒself, "_parse_json", λ.Calm(ϒself, "_search_regex", λ.StrLiteral("window\\.kalturaIframePackageData\\s*=\\s*({.*});"), ϒwebpage, λ.StrLiteral("kalturaIframePackageData")), ϒreference_id), λ.StrLiteral("entryResult"))
								τmp0 = λ.UnpackIterable(λ.NewTuple(
									λ.GetItem(ϒentry_data, λ.StrLiteral("meta")),
									λ.GetItem(λ.GetItem(ϒentry_data, λ.StrLiteral("contextData")), λ.StrLiteral("flavorAssets")),
								), 2)
								ϒinfo = λ.GetItem(τmp0, λ.IntLiteral(0))
								ϒflavor_assets = λ.GetItem(τmp0, λ.IntLiteral(1))
								ϒentry_id = λ.GetItem(ϒinfo, λ.StrLiteral("id"))
								τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
									defer λ.CatchMulti(
										nil,
										&λ.Catcher{ExtractorError, func(λex λ.BaseException) {
											// pass
										}},
									)
									τmp2 = λ.UnpackIterable(λ.Calm(ϒself, "_get_video_info", ϒentry_id, ϒpartner_id), 4)
									_ = λ.GetItem(τmp2, λ.IntLiteral(0))
									ϒinfo = λ.GetItem(τmp2, λ.IntLiteral(1))
									ϒflavor_assets = λ.GetItem(τmp2, λ.IntLiteral(2))
									ϒcaptions = λ.GetItem(τmp2, λ.IntLiteral(3))
									return λ.BlockExitNormally, nil
								}()
							} else {
								panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.StrLiteral("Invalid URL")), λ.KWArgs{
									{Name: "expected", Value: λ.True},
								})))
							}
						}
						ϒks = λ.GetItem(λ.Calm(ϒparams, "get", λ.StrLiteral("flashvars[ks]"), λ.NewList(λ.None)), λ.IntLiteral(0))
					}
					ϒsource_url = λ.Calm(ϒsmuggled_data, "get", λ.StrLiteral("source_url"))
					if λ.IsTrue(ϒsource_url) {
						ϒreferrer = λ.Calm(λ.Cal(Ωbase64.ϒb64encode, λ.Calm(λ.Calm(λ.StrLiteral("://"), "join", λ.GetItem(λ.Cal(Ωparse.ϒurlparse, ϒsource_url), λ.NewSlice(λ.None, λ.IntLiteral(2), λ.None))), "encode", λ.StrLiteral("utf-8"))), "decode", λ.StrLiteral("utf-8"))
					} else {
						ϒreferrer = λ.None
					}
					ϒsign_url = λ.NewFunction("sign_url",
						[]λ.Param{
							{Name: "unsigned_url"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒunsigned_url = λargs[0]
								τmp0          λ.Object
							)
							if λ.IsTrue(ϒks) {
								τmp0 = λ.IAdd(ϒunsigned_url, λ.Mod(λ.StrLiteral("/ks/%s"), ϒks))
								ϒunsigned_url = τmp0
							}
							if λ.IsTrue(ϒreferrer) {
								τmp0 = λ.IAdd(ϒunsigned_url, λ.Mod(λ.StrLiteral("?referrer=%s"), ϒreferrer))
								ϒunsigned_url = τmp0
							}
							return ϒunsigned_url
						})
					ϒdata_url = λ.GetItem(ϒinfo, λ.StrLiteral("dataUrl"))
					if λ.Contains(ϒdata_url, λ.StrLiteral("/flvclipper/")) {
						ϒdata_url = λ.Cal(Ωre.ϒsub, λ.StrLiteral("/flvclipper/.*"), λ.StrLiteral("/serveFlavor"), ϒdata_url)
					}
					ϒformats = λ.NewList()
					τmp1 = λ.Cal(λ.BuiltinIter, ϒflavor_assets)
					for {
						if τmp0 = λ.NextDefault(τmp1, λ.AfterLast); τmp0 == λ.AfterLast {
							break
						}
						ϒf = τmp0
						if λ.IsTrue(λ.Ne(λ.Calm(ϒf, "get", λ.StrLiteral("status")), λ.IntLiteral(2))) {
							continue
						}
						if λ.IsTrue(λ.Eq(λ.Calm(ϒf, "get", λ.StrLiteral("fileExt")), λ.StrLiteral("chun"))) {
							continue
						}
						if λ.IsTrue(λ.Eq(λ.Calm(ϒf, "get", λ.StrLiteral("fileExt")), λ.StrLiteral("wvm"))) {
							continue
						}
						if !λ.IsTrue(λ.Calm(ϒf, "get", λ.StrLiteral("fileExt"))) {
							if λ.IsTrue(λ.Eq(λ.Calm(ϒf, "get", λ.StrLiteral("containerFormat")), λ.StrLiteral("qt"))) {
								λ.SetItem(ϒf, λ.StrLiteral("fileExt"), λ.StrLiteral("mov"))
							} else {
								λ.SetItem(ϒf, λ.StrLiteral("fileExt"), λ.StrLiteral("mp4"))
							}
						}
						ϒvideo_url = λ.Cal(ϒsign_url, λ.Mod(λ.StrLiteral("%s/flavorId/%s"), λ.NewTuple(
							ϒdata_url,
							λ.GetItem(ϒf, λ.StrLiteral("id")),
						)))
						ϒformat_id = λ.Mod(λ.StrLiteral("%(fileExt)s-%(bitrate)s"), ϒf)
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(λ.Calm(ϒf, "get", λ.StrLiteral("isOriginal")) == λ.True); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(!λ.IsTrue(λ.Calm(ϒself, "_is_valid_url", ϒvideo_url, ϒentry_id, ϒformat_id)))
							}
						}()) {
							continue
						}
						ϒvcodec = func() λ.Object {
							if λ.IsTrue(func() λ.Object {
								if λv := λ.NewBool(!λ.Contains(ϒf, λ.StrLiteral("videoCodecId"))); !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Eq(λ.Calm(ϒf, "get", λ.StrLiteral("frameRate")), λ.IntLiteral(0))
								}
							}()) {
								return λ.StrLiteral("none")
							} else {
								return λ.Calm(ϒf, "get", λ.StrLiteral("videoCodecId"))
							}
						}()
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"format_id": ϒformat_id,
							"ext":       λ.Calm(ϒf, "get", λ.StrLiteral("fileExt")),
							"tbr":       λ.Cal(ϒint_or_none, λ.GetItem(ϒf, λ.StrLiteral("bitrate"))),
							"fps":       λ.Cal(ϒint_or_none, λ.Calm(ϒf, "get", λ.StrLiteral("frameRate"))),
							"filesize_approx": λ.Call(ϒint_or_none, λ.NewArgs(λ.Calm(ϒf, "get", λ.StrLiteral("size"))), λ.KWArgs{
								{Name: "invscale", Value: λ.IntLiteral(1024)},
							}),
							"container": λ.Calm(ϒf, "get", λ.StrLiteral("containerFormat")),
							"vcodec":    ϒvcodec,
							"height":    λ.Cal(ϒint_or_none, λ.Calm(ϒf, "get", λ.StrLiteral("height"))),
							"width":     λ.Cal(ϒint_or_none, λ.Calm(ϒf, "get", λ.StrLiteral("width"))),
							"url":       ϒvideo_url,
						}))
					}
					if λ.Contains(ϒdata_url, λ.StrLiteral("/playManifest/")) {
						ϒm3u8_url = λ.Cal(ϒsign_url, λ.Calm(ϒdata_url, "replace", λ.StrLiteral("format/url"), λ.StrLiteral("format/applehttp")))
						λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒm3u8_url,
							ϒentry_id,
							λ.StrLiteral("mp4"),
							λ.StrLiteral("m3u8_native"),
						), λ.KWArgs{
							{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒsubtitles = λ.DictLiteral(map[λ.Object]λ.Object{})
					if λ.IsTrue(ϒcaptions) {
						τmp1 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒcaptions, "get", λ.StrLiteral("objects"), λ.NewList()))
						for {
							if τmp0 = λ.NextDefault(τmp1, λ.AfterLast); τmp0 == λ.AfterLast {
								break
							}
							ϒcaption = τmp0
							if λ.IsTrue(λ.Ne(λ.Calm(ϒcaption, "get", λ.StrLiteral("status")), λ.IntLiteral(2))) {
								continue
							}
							if !λ.IsTrue(λ.Calm(ϒcaption, "get", λ.StrLiteral("id"))) {
								continue
							}
							ϒcaption_format = λ.Cal(ϒint_or_none, λ.Calm(ϒcaption, "get", λ.StrLiteral("format")))
							λ.Calm(λ.Calm(ϒsubtitles, "setdefault", func() λ.Object {
								if λv := λ.Calm(ϒcaption, "get", λ.StrLiteral("languageCode")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Calm(ϒcaption, "get", λ.StrLiteral("language"))
								}
							}(), λ.NewList()), "append", λ.DictLiteral(map[string]λ.Object{
								"url": λ.Mod(λ.StrLiteral("%s/api_v3/service/caption_captionasset/action/serve/captionAssetId/%s"), λ.NewTuple(
									λ.GetAttr(ϒself, "_SERVICE_URL", nil),
									λ.GetItem(ϒcaption, λ.StrLiteral("id")),
								)),
								"ext": func() λ.Object {
									if λv := λ.Calm(ϒcaption, "get", λ.StrLiteral("fileExt")); λ.IsTrue(λv) {
										return λv
									} else if λv := λ.Calm(λ.GetAttr(ϒself, "_CAPTION_TYPES", nil), "get", ϒcaption_format); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.StrLiteral("ttml")
									}
								}(),
							}))
						}
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒentry_id,
						"title":       λ.GetItem(ϒinfo, λ.StrLiteral("name")),
						"formats":     ϒformats,
						"subtitles":   ϒsubtitles,
						"description": λ.Cal(ϒclean_html, λ.Calm(ϒinfo, "get", λ.StrLiteral("description"))),
						"thumbnail":   λ.Calm(ϒinfo, "get", λ.StrLiteral("thumbnailUrl")),
						"duration":    λ.Calm(ϒinfo, "get", λ.StrLiteral("duration")),
						"timestamp":   λ.Calm(ϒinfo, "get", λ.StrLiteral("createdAt")),
						"uploader_id": func() λ.Object {
							if λ.IsTrue(λ.Ne(λ.Calm(ϒinfo, "get", λ.StrLiteral("userId")), λ.StrLiteral("None"))) {
								return λ.Calm(ϒinfo, "get", λ.StrLiteral("userId"))
							} else {
								return λ.None
							}
						}(),
						"view_count": λ.Calm(ϒinfo, "get", λ.StrLiteral("plays")),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_SERVICE_BASE":     KalturaIE__SERVICE_BASE,
				"_SERVICE_URL":      KalturaIE__SERVICE_URL,
				"_VALID_URL":        KalturaIE__VALID_URL,
				"_extract_url":      KalturaIE__extract_url,
				"_extract_urls":     KalturaIE__extract_urls,
				"_get_video_info":   KalturaIE__get_video_info,
				"_kaltura_api_call": KalturaIE__kaltura_api_call,
				"_real_extract":     KalturaIE__real_extract,
			})
		}())
	})
}
