// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * livestream/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/livestream.py
 */

package livestream

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor         λ.Object
	LivestreamIE          λ.Object
	LivestreamOriginalIE  λ.Object
	LivestreamShortenerIE λ.Object
	ϒcompat_str           λ.Object
	ϒdetermine_ext        λ.Object
	ϒfind_xpath_attr      λ.Object
	ϒfloat_or_none        λ.Object
	ϒint_or_none          λ.Object
	ϒparse_iso8601        λ.Object
	ϒupdate_url_query     λ.Object
	ϒxpath_attr           λ.Object
	ϒxpath_text           λ.Object
	ϒxpath_with_ns        λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒfind_xpath_attr = Ωutils.ϒfind_xpath_attr
		ϒxpath_attr = Ωutils.ϒxpath_attr
		ϒxpath_with_ns = Ωutils.ϒxpath_with_ns
		ϒxpath_text = Ωutils.ϒxpath_text
		ϒupdate_url_query = Ωutils.ϒupdate_url_query
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		LivestreamIE = λ.Cal(λ.TypeType, λ.StrLiteral("LivestreamIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				LivestreamIE_IE_NAME             λ.Object
				LivestreamIE__API_URL_TEMPLATE   λ.Object
				LivestreamIE__VALID_URL          λ.Object
				LivestreamIE__extract_video_info λ.Object
				LivestreamIE__parse_smil_formats λ.Object
				LivestreamIE__real_extract       λ.Object
			)
			LivestreamIE_IE_NAME = λ.StrLiteral("livestream")
			LivestreamIE__VALID_URL = λ.StrLiteral("https?://(?:new\\.)?livestream\\.com/(?:accounts/(?P<account_id>\\d+)|(?P<account_name>[^/]+))/(?:events/(?P<event_id>\\d+)|(?P<event_name>[^/]+))(?:/videos/(?P<id>\\d+))?")
			LivestreamIE__API_URL_TEMPLATE = λ.StrLiteral("http://livestream.com/api/accounts/%s/events/%s")
			LivestreamIE__parse_smil_formats = λ.NewFunction("_parse_smil_formats",
				[]λ.Param{
					{Name: "self"},
					{Name: "smil"},
					{Name: "smil_url"},
					{Name: "video_id"},
					{Name: "namespace", Def: λ.None},
					{Name: "f4m_params", Def: λ.None},
					{Name: "transform_rtmp_url", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbase               λ.Object
						ϒbase_ele           λ.Object
						ϒf4m_params         = λargs[5]
						ϒformats            λ.Object
						ϒfurl               λ.Object
						ϒnamespace          = λargs[4]
						ϒself               = λargs[0]
						ϒsmil               = λargs[1]
						ϒsmil_url           = λargs[2]
						ϒtbr                λ.Object
						ϒtransform_rtmp_url = λargs[6]
						ϒvideo_id           = λargs[3]
						ϒvideo_nodes        λ.Object
						ϒvn                 λ.Object
						τmp0                λ.Object
						τmp1                λ.Object
						τmp2                λ.Object
					)
					_ = ϒf4m_params
					_ = ϒsmil_url
					_ = ϒtransform_rtmp_url
					_ = ϒvideo_id
					ϒbase_ele = λ.Cal(ϒfind_xpath_attr, ϒsmil, λ.Calm(ϒself, "_xpath_ns", λ.StrLiteral(".//meta"), ϒnamespace), λ.StrLiteral("name"), λ.StrLiteral("httpBase"))
					ϒbase = func() λ.Object {
						if ϒbase_ele != λ.None {
							return λ.Calm(ϒbase_ele, "get", λ.StrLiteral("content"))
						} else {
							return λ.StrLiteral("http://livestreamvod-f.akamaihd.net/")
						}
					}()
					ϒformats = λ.NewList()
					ϒvideo_nodes = λ.Calm(ϒsmil, "findall", λ.Calm(ϒself, "_xpath_ns", λ.StrLiteral(".//video"), ϒnamespace))
					τmp0 = λ.Cal(λ.BuiltinIter, ϒvideo_nodes)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒvn = τmp1
						ϒtbr = λ.Cal(ϒint_or_none, λ.Calm(λ.GetAttr(ϒvn, "attrib", nil), "get", λ.StrLiteral("system-bitrate")), λ.IntLiteral(1000))
						ϒfurl = λ.Cal(ϒupdate_url_query, λ.Cal(Ωparse.ϒurljoin, ϒbase, λ.GetItem(λ.GetAttr(ϒvn, "attrib", nil), λ.StrLiteral("src"))), λ.DictLiteral(map[string]string{
							"v":  "3.0.3",
							"fp": "WIN% 14,0,0,145",
						}))
						if λ.Contains(λ.GetAttr(ϒvn, "attrib", nil), λ.StrLiteral("clipBegin")) {
							τmp2 = λ.IAdd(ϒfurl, λ.Add(λ.StrLiteral("&ssek="), λ.GetItem(λ.GetAttr(ϒvn, "attrib", nil), λ.StrLiteral("clipBegin"))))
							ϒfurl = τmp2
						}
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url":        ϒfurl,
							"format_id":  λ.Mod(λ.StrLiteral("smil_%d"), ϒtbr),
							"ext":        λ.StrLiteral("flv"),
							"tbr":        ϒtbr,
							"preference": λ.Neg(λ.IntLiteral(1000)),
						}))
					}
					return ϒformats
				})
			LivestreamIE__extract_video_info = λ.NewFunction("_extract_video_info",
				[]λ.Param{
					{Name: "self"},
					{Name: "video_data"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						FORMAT_KEYS λ.Object
						ϒbitrate    λ.Object
						ϒcomments   λ.Object
						ϒext        λ.Object
						ϒf4m_url    λ.Object
						ϒformat_id  λ.Object
						ϒformats    λ.Object
						ϒkey        λ.Object
						ϒm3u8_url   λ.Object
						ϒself       = λargs[0]
						ϒsmil_url   λ.Object
						ϒvideo_data = λargs[1]
						ϒvideo_id   λ.Object
						ϒvideo_url  λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
						τmp2        λ.Object
					)
					ϒvideo_id = λ.Cal(ϒcompat_str, λ.GetItem(ϒvideo_data, λ.StrLiteral("id")))
					FORMAT_KEYS = λ.NewTuple(
						λ.NewTuple(
							λ.StrLiteral("sd"),
							λ.StrLiteral("progressive_url"),
						),
						λ.NewTuple(
							λ.StrLiteral("hd"),
							λ.StrLiteral("progressive_url_hd"),
						),
					)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, FORMAT_KEYS)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒkey = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒvideo_url = λ.Calm(ϒvideo_data, "get", ϒkey)
						if λ.IsTrue(ϒvideo_url) {
							ϒext = λ.Cal(ϒdetermine_ext, ϒvideo_url)
							if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("m3u8"))) {
								continue
							}
							ϒbitrate = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.Mod(λ.StrLiteral("(\\d+)\\.%s"), ϒext),
								ϒvideo_url,
								λ.StrLiteral("bitrate"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							}))
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"url":       ϒvideo_url,
								"format_id": ϒformat_id,
								"tbr":       ϒbitrate,
								"ext":       ϒext,
							}))
						}
					}
					ϒsmil_url = λ.Calm(ϒvideo_data, "get", λ.StrLiteral("smil_url"))
					if λ.IsTrue(ϒsmil_url) {
						λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_smil_formats", nil), λ.NewArgs(
							ϒsmil_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
						}))
					}
					ϒm3u8_url = λ.Calm(ϒvideo_data, "get", λ.StrLiteral("m3u8_url"))
					if λ.IsTrue(ϒm3u8_url) {
						λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
							ϒm3u8_url,
							ϒvideo_id,
							λ.StrLiteral("mp4"),
							λ.StrLiteral("m3u8_native"),
						), λ.KWArgs{
							{Name: "m3u8_id", Value: λ.StrLiteral("hls")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					ϒf4m_url = λ.Calm(ϒvideo_data, "get", λ.StrLiteral("f4m_url"))
					if λ.IsTrue(ϒf4m_url) {
						λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
							ϒf4m_url,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "f4m_id", Value: λ.StrLiteral("hds")},
							{Name: "fatal", Value: λ.False},
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒcomments = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
						nil,
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
								var (
									ϒcomment λ.Object
									τmp0     λ.Object
									τmp1     λ.Object
								)
								τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.Calm(ϒvideo_data, "get", λ.StrLiteral("comments"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("data"), λ.NewList()))
								for {
									if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
										break
									}
									ϒcomment = τmp1
									λgy.Yield(λ.DictLiteral(map[string]λ.Object{
										"author_id": λ.Calm(ϒcomment, "get", λ.StrLiteral("author_id")),
										"author":    λ.Calm(λ.Calm(ϒcomment, "get", λ.StrLiteral("author"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("full_name")),
										"id":        λ.Calm(ϒcomment, "get", λ.StrLiteral("id")),
										"text":      λ.GetItem(ϒcomment, λ.StrLiteral("text")),
										"timestamp": λ.Cal(ϒparse_iso8601, λ.Calm(ϒcomment, "get", λ.StrLiteral("created_at"))),
									}))
								}
								return λ.None
							})
						})))
					return λ.DictLiteral(map[string]λ.Object{
						"id":            ϒvideo_id,
						"formats":       ϒformats,
						"title":         λ.GetItem(ϒvideo_data, λ.StrLiteral("caption")),
						"description":   λ.Calm(ϒvideo_data, "get", λ.StrLiteral("description")),
						"thumbnail":     λ.Calm(ϒvideo_data, "get", λ.StrLiteral("thumbnail_url")),
						"duration":      λ.Cal(ϒfloat_or_none, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("duration")), λ.IntLiteral(1000)),
						"timestamp":     λ.Cal(ϒparse_iso8601, λ.Calm(ϒvideo_data, "get", λ.StrLiteral("publish_at"))),
						"like_count":    λ.Calm(λ.Calm(ϒvideo_data, "get", λ.StrLiteral("likes"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("total")),
						"comment_count": λ.Calm(λ.Calm(ϒvideo_data, "get", λ.StrLiteral("comments"), λ.DictLiteral(map[λ.Object]λ.Object{})), "get", λ.StrLiteral("total")),
						"view_count":    λ.Calm(ϒvideo_data, "get", λ.StrLiteral("views")),
						"comments":      ϒcomments,
					})
				})
			LivestreamIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaccount    λ.Object
						ϒapi_url    λ.Object
						ϒevent      λ.Object
						ϒevent_data λ.Object
						ϒmobj       λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
						ϒvideo_data λ.Object
						ϒvideo_id   λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒevent = func() λ.Object {
						if λv := λ.Calm(ϒmobj, "group", λ.StrLiteral("event_id")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒmobj, "group", λ.StrLiteral("event_name"))
						}
					}()
					ϒaccount = func() λ.Object {
						if λv := λ.Calm(ϒmobj, "group", λ.StrLiteral("account_id")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒmobj, "group", λ.StrLiteral("account_name"))
						}
					}()
					ϒapi_url = λ.Mod(λ.GetAttr(ϒself, "_API_URL_TEMPLATE", nil), λ.NewTuple(
						ϒaccount,
						ϒevent,
					))
					if λ.IsTrue(ϒvideo_id) {
						ϒvideo_data = λ.Calm(ϒself, "_download_json", λ.Add(ϒapi_url, λ.Mod(λ.StrLiteral("/videos/%s"), ϒvideo_id)), ϒvideo_id)
						return λ.Calm(ϒself, "_extract_video_info", ϒvideo_data)
					} else {
						ϒevent_data = λ.Calm(ϒself, "_download_json", ϒapi_url, ϒvideo_id)
						return λ.Calm(ϒself, "_extract_event", ϒevent_data)
					}
					return λ.None
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":             LivestreamIE_IE_NAME,
				"_API_URL_TEMPLATE":   LivestreamIE__API_URL_TEMPLATE,
				"_VALID_URL":          LivestreamIE__VALID_URL,
				"_extract_video_info": LivestreamIE__extract_video_info,
				"_parse_smil_formats": LivestreamIE__parse_smil_formats,
				"_real_extract":       LivestreamIE__real_extract,
			})
		}())
		LivestreamOriginalIE = λ.Cal(λ.TypeType, λ.StrLiteral("LivestreamOriginalIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				LivestreamOriginalIE__VALID_URL λ.Object
			)
			LivestreamOriginalIE__VALID_URL = λ.StrLiteral("(?x)https?://original\\.livestream\\.com/\n        (?P<user>[^/\\?#]+)(?:/(?P<type>video|folder)\n        (?:(?:\\?.*?Id=|/)(?P<id>.*?)(&|$))?)?\n        ")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": LivestreamOriginalIE__VALID_URL,
			})
		}())
		LivestreamShortenerIE = λ.Cal(λ.TypeType, λ.StrLiteral("LivestreamShortenerIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				LivestreamShortenerIE__VALID_URL λ.Object
			)
			LivestreamShortenerIE__VALID_URL = λ.StrLiteral("https?://livestre\\.am/(?P<id>.+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": LivestreamShortenerIE__VALID_URL,
			})
		}())
	})
}
