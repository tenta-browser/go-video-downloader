// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * rumble/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/rumble.py
 */

package rumble

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor  λ.Object
	RumbleEmbedIE  λ.Object
	ϒcompat_str    λ.Object
	ϒdetermine_ext λ.Object
	ϒint_or_none   λ.Object
	ϒparse_iso8601 λ.Object
	ϒtry_get       λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒtry_get = Ωutils.ϒtry_get
		RumbleEmbedIE = λ.Cal(λ.TypeType, λ.StrLiteral("RumbleEmbedIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				RumbleEmbedIE__VALID_URL    λ.Object
				RumbleEmbedIE__real_extract λ.Object
			)
			RumbleEmbedIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?rumble\\.com/embed/(?:[0-9a-z]+\\.)?(?P<id>[0-9a-z]+)")
			RumbleEmbedIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒauthor   λ.Object
						ϒbitrate  λ.Object
						ϒext      λ.Object
						ϒf        λ.Object
						ϒf_url    λ.Object
						ϒformats  λ.Object
						ϒheight   λ.Object
						ϒi        λ.Object
						ϒself     = λargs[0]
						ϒtitle    λ.Object
						ϒua       λ.Object
						ϒurl      = λargs[1]
						ϒvideo    λ.Object
						ϒvideo_id λ.Object
						τmp0      λ.Object
						τmp1      λ.Object
						τmp2      λ.Object
						τmp3      λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒvideo = λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("https://rumble.com/embedJS/"),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"request": λ.StrLiteral("video"),
							"v":       ϒvideo_id,
						})},
					})
					ϒtitle = λ.GetItem(ϒvideo, λ.StrLiteral("title"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(func() λ.Object {
						if λv := λ.Calm(ϒvideo, "get", λ.StrLiteral("ua")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}(), "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒheight = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒua = λ.GetItem(τmp2, λ.IntLiteral(1))
						τmp2 = λ.Cal(λ.BuiltinIter, λ.Cal(λ.RangeType, λ.IntLiteral(2)))
						for {
							if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
								break
							}
							ϒi = τmp3
							ϒf_url = λ.Cal(ϒtry_get, ϒua, λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "x"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒx = λargs[0]
									)
									return λ.GetItem(ϒx, ϒi)
								}), ϒcompat_str)
							if λ.IsTrue(ϒf_url) {
								ϒext = λ.Cal(ϒdetermine_ext, ϒf_url)
								ϒf = λ.DictLiteral(map[string]λ.Object{
									"ext": ϒext,
									"format_id": λ.Mod(λ.StrLiteral("%s-%sp"), λ.NewTuple(
										ϒext,
										ϒheight,
									)),
									"height": λ.Cal(ϒint_or_none, ϒheight),
									"url":    ϒf_url,
								})
								ϒbitrate = λ.Cal(ϒtry_get, ϒua, λ.NewFunction("<lambda>",
									[]λ.Param{
										{Name: "x"},
									},
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										var (
											ϒx = λargs[0]
										)
										return λ.GetItem(λ.GetItem(ϒx, λ.Add(ϒi, λ.IntLiteral(2))), λ.StrLiteral("bitrate"))
									}))
								if λ.IsTrue(ϒbitrate) {
									λ.SetItem(ϒf, λ.StrLiteral("tbr"), λ.Cal(ϒint_or_none, ϒbitrate))
								}
								λ.Calm(ϒformats, "append", ϒf)
							}
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒauthor = func() λ.Object {
						if λv := λ.Calm(ϒvideo, "get", λ.StrLiteral("author")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"title":       ϒtitle,
						"formats":     ϒformats,
						"thumbnail":   λ.Calm(ϒvideo, "get", λ.StrLiteral("i")),
						"timestamp":   λ.Cal(ϒparse_iso8601, λ.Calm(ϒvideo, "get", λ.StrLiteral("pubDate"))),
						"channel":     λ.Calm(ϒauthor, "get", λ.StrLiteral("name")),
						"channel_url": λ.Calm(ϒauthor, "get", λ.StrLiteral("url")),
						"duration":    λ.Cal(ϒint_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("duration"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    RumbleEmbedIE__VALID_URL,
				"_real_extract": RumbleEmbedIE__real_extract,
			})
		}())
	})
}
