// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * nowness/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/nowness.py
 */

package nowness

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωbrightcove "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/brightcove"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BrightcoveLegacyIE λ.Object
	BrightcoveNewIE    λ.Object
	ExtractorError     λ.Object
	InfoExtractor      λ.Object
	NownessBaseIE      λ.Object
	NownessIE          λ.Object
	NownessPlaylistIE  λ.Object
	NownessSeriesIE    λ.Object
	ϒcompat_str        λ.Object
	ϒsanitized_Request λ.Object
)

func init() {
	λ.InitModule(func() {
		BrightcoveLegacyIE = Ωbrightcove.BrightcoveLegacyIE
		BrightcoveNewIE = Ωbrightcove.BrightcoveNewIE
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ExtractorError = Ωutils.ExtractorError
		ϒsanitized_Request = Ωutils.ϒsanitized_Request
		NownessBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("NownessBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				NownessBaseIE__api_request        λ.Object
				NownessBaseIE__extract_url_result λ.Object
			)
			NownessBaseIE__extract_url_result = λ.NewFunction("_extract_url_result",
				[]λ.Param{
					{Name: "self"},
					{Name: "post"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbc_url      λ.Object
						ϒmedia       λ.Object
						ϒplayer_code λ.Object
						ϒpost        = λargs[1]
						ϒself        = λargs[0]
						ϒsource      λ.Object
						ϒvideo_id    λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
					)
					if λ.IsTrue(λ.Eq(λ.GetItem(ϒpost, λ.StrLiteral("type")), λ.StrLiteral("video"))) {
						τmp0 = λ.Cal(λ.BuiltinIter, λ.GetItem(ϒpost, λ.StrLiteral("media")))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒmedia = τmp1
							if λ.IsTrue(λ.Eq(λ.GetItem(ϒmedia, λ.StrLiteral("type")), λ.StrLiteral("video"))) {
								ϒvideo_id = λ.GetItem(ϒmedia, λ.StrLiteral("content"))
								ϒsource = λ.GetItem(ϒmedia, λ.StrLiteral("source"))
								if λ.IsTrue(λ.Eq(ϒsource, λ.StrLiteral("brightcove"))) {
									ϒplayer_code = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
										λ.Mod(λ.StrLiteral("http://www.nowness.com/iframe?id=%s"), ϒvideo_id),
										ϒvideo_id,
									), λ.KWArgs{
										{Name: "note", Value: λ.StrLiteral("Downloading player JavaScript")},
										{Name: "errnote", Value: λ.StrLiteral("Unable to download player JavaScript")},
									})
									ϒbc_url = λ.Calm(BrightcoveLegacyIE, "_extract_brightcove_url", ϒplayer_code)
									if λ.IsTrue(ϒbc_url) {
										return λ.Calm(ϒself, "url_result", ϒbc_url, λ.Calm(BrightcoveLegacyIE, "ie_key"))
									}
									ϒbc_url = λ.Calm(BrightcoveNewIE, "_extract_url", ϒself, ϒplayer_code)
									if λ.IsTrue(ϒbc_url) {
										return λ.Calm(ϒself, "url_result", ϒbc_url, λ.Calm(BrightcoveNewIE, "ie_key"))
									}
									panic(λ.Raise(λ.Cal(ExtractorError, λ.StrLiteral("Could not find player definition"))))
								} else {
									if λ.IsTrue(λ.Eq(ϒsource, λ.StrLiteral("vimeo"))) {
										return λ.Calm(ϒself, "url_result", λ.Mod(λ.StrLiteral("http://vimeo.com/%s"), ϒvideo_id), λ.StrLiteral("Vimeo"))
									} else {
										if λ.IsTrue(λ.Eq(ϒsource, λ.StrLiteral("youtube"))) {
											return λ.Calm(ϒself, "url_result", ϒvideo_id, λ.StrLiteral("Youtube"))
										} else {
											if λ.IsTrue(λ.Eq(ϒsource, λ.StrLiteral("cinematique"))) {
												// pass
											}
										}
									}
								}
							}
						}
					}
					return λ.None
				})
			NownessBaseIE__api_request = λ.NewFunction("_api_request",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
					{Name: "request_path"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdisplay_id   λ.Object
						ϒrequest      λ.Object
						ϒrequest_path = λargs[2]
						ϒself         = λargs[0]
						ϒurl          = λargs[1]
					)
					ϒdisplay_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒrequest = λ.Call(ϒsanitized_Request, λ.NewArgs(λ.Add(λ.StrLiteral("http://api.nowness.com/api/"), λ.Mod(ϒrequest_path, ϒdisplay_id))), λ.KWArgs{
						{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
							"X-Nowness-Language": func() λ.Object {
								if λ.Contains(ϒurl, λ.StrLiteral("cn.nowness.com")) {
									return λ.StrLiteral("zh-cn")
								} else {
									return λ.StrLiteral("en-us")
								}
							}(),
						})},
					})
					return λ.NewTuple(
						ϒdisplay_id,
						λ.Calm(ϒself, "_download_json", ϒrequest, ϒdisplay_id),
					)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_api_request":        NownessBaseIE__api_request,
				"_extract_url_result": NownessBaseIE__extract_url_result,
			})
		}())
		NownessIE = λ.Cal(λ.TypeType, λ.StrLiteral("NownessIE"), λ.NewTuple(NownessBaseIE), func() λ.Dict {
			var (
				NownessIE_IE_NAME       λ.Object
				NownessIE__VALID_URL    λ.Object
				NownessIE__real_extract λ.Object
			)
			NownessIE_IE_NAME = λ.StrLiteral("nowness")
			NownessIE__VALID_URL = λ.StrLiteral("https?://(?:(?:www|cn)\\.)?nowness\\.com/(?:story|(?:series|category)/[^/]+)/(?P<id>[^/]+?)(?:$|[?#])")
			NownessIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒpost λ.Object
						ϒself = λargs[0]
						ϒurl  = λargs[1]
						τmp0  λ.Object
					)
					τmp0 = λ.UnpackIterable(λ.Calm(ϒself, "_api_request", ϒurl, λ.StrLiteral("post/getBySlug/%s")), 2)
					_ = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒpost = λ.GetItem(τmp0, λ.IntLiteral(1))
					return λ.Calm(ϒself, "_extract_url_result", ϒpost)
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"IE_NAME":       NownessIE_IE_NAME,
				"_VALID_URL":    NownessIE__VALID_URL,
				"_real_extract": NownessIE__real_extract,
			})
		}())
		NownessPlaylistIE = λ.Cal(λ.TypeType, λ.StrLiteral("NownessPlaylistIE"), λ.NewTuple(NownessBaseIE), func() λ.Dict {
			var (
				NownessPlaylistIE__VALID_URL λ.Object
			)
			NownessPlaylistIE__VALID_URL = λ.StrLiteral("https?://(?:(?:www|cn)\\.)?nowness\\.com/playlist/(?P<id>\\d+)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": NownessPlaylistIE__VALID_URL,
			})
		}())
		NownessSeriesIE = λ.Cal(λ.TypeType, λ.StrLiteral("NownessSeriesIE"), λ.NewTuple(NownessBaseIE), func() λ.Dict {
			var (
				NownessSeriesIE__VALID_URL λ.Object
			)
			NownessSeriesIE__VALID_URL = λ.StrLiteral("https?://(?:(?:www|cn)\\.)?nowness\\.com/series/(?P<id>[^/]+?)(?:$|[?#])")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": NownessSeriesIE__VALID_URL,
			})
		}())
	})
}
