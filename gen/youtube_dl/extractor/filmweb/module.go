// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * filmweb/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/filmweb.py
 */

package filmweb

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	FilmwebIE     λ.Object
	InfoExtractor λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		FilmwebIE = λ.Cal(λ.TypeType, λ.StrLiteral("FilmwebIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				FilmwebIE__VALID_URL    λ.Object
				FilmwebIE__real_extract λ.Object
			)
			FilmwebIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?filmweb\\.no/(?P<type>trailere|filmnytt)/article(?P<id>\\d+)\\.ece")
			FilmwebIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒarticle_id   λ.Object
						ϒarticle_type λ.Object
						ϒembed_code   λ.Object
						ϒiframe_url   λ.Object
						ϒself         = λargs[0]
						ϒurl          = λargs[1]
						ϒwebpage      λ.Object
						τmp0          λ.Object
					)
					τmp0 = λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl), "groups")
					ϒarticle_type = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒarticle_id = λ.GetItem(τmp0, λ.IntLiteral(1))
					if λ.IsTrue(λ.Eq(ϒarticle_type, λ.StrLiteral("filmnytt"))) {
						ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒarticle_id)
						ϒarticle_id = λ.Calm(ϒself, "_search_regex", λ.StrLiteral("data-videoid=\"(\\d+)\""), ϒwebpage, λ.StrLiteral("article id"))
					}
					ϒembed_code = λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("https://www.filmweb.no/template_v2/ajax/json_trailerEmbed.jsp"),
						ϒarticle_id,
					), λ.KWArgs{
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"articleId": ϒarticle_id,
						})},
					}), λ.StrLiteral("embedCode"))
					ϒiframe_url = λ.Calm(ϒself, "_proto_relative_url", λ.Calm(ϒself, "_search_regex", λ.StrLiteral("<iframe[^>]+src=\"([^\"]+)"), ϒembed_code, λ.StrLiteral("iframe url")))
					return λ.DictLiteral(map[string]λ.Object{
						"_type":  λ.StrLiteral("url_transparent"),
						"id":     ϒarticle_id,
						"url":    ϒiframe_url,
						"ie_key": λ.StrLiteral("TwentyThreeVideo"),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    FilmwebIE__VALID_URL,
				"_real_extract": FilmwebIE__real_extract,
			})
		}())
	})
}
