// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * biqle/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/biqle.py
 */

package biqle

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωvk "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/vk"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BIQLEIE                      λ.Object
	InfoExtractor                λ.Object
	VKIE                         λ.Object
	ϒcompat_b64decode            λ.Object
	ϒcompat_urllib_parse_unquote λ.Object
	ϒint_or_none                 λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		VKIE = Ωvk.VKIE
		ϒcompat_b64decode = Ωcompat.ϒcompat_b64decode
		ϒcompat_urllib_parse_unquote = Ωcompat.ϒcompat_urllib_parse_unquote
		ϒint_or_none = Ωutils.ϒint_or_none
		BIQLEIE = λ.Cal(λ.TypeType, λ.StrLiteral("BIQLEIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BIQLEIE__VALID_URL    λ.Object
				BIQLEIE__real_extract λ.Object
			)
			BIQLEIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?biqle\\.(?:com|org|ru)/watch/(?P<id>-?\\d+_\\d+)")
			BIQLEIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒaccess_token λ.Object
						ϒembed_page   λ.Object
						ϒembed_url    λ.Object
						ϒext          λ.Object
						ϒf_id         λ.Object
						ϒf_url        λ.Object
						ϒformats      λ.Object
						ϒheight       λ.Object
						ϒitem         λ.Object
						ϒk            λ.Object
						ϒself         = λargs[0]
						ϒsig          λ.Object
						ϒthumbnails   λ.Object
						ϒtitle        λ.Object
						ϒurl          = λargs[1]
						ϒv            λ.Object
						ϒvideo_ext    λ.Object
						ϒvideo_id     λ.Object
						ϒwebpage      λ.Object
						ϒwidth        λ.Object
						τmp0          λ.Object
						τmp1          λ.Object
						τmp2          λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒembed_url = λ.Calm(ϒself, "_proto_relative_url", λ.Calm(ϒself, "_search_regex", λ.StrLiteral("<iframe.+?src=\"((?:https?:)?//(?:daxab\\.com|dxb\\.to|[^/]+/player)/[^\"]+)\".*?></iframe>"), ϒwebpage, λ.StrLiteral("embed url")))
					if λ.IsTrue(λ.Calm(VKIE, "suitable", ϒembed_url)) {
						return λ.Calm(ϒself, "url_result", ϒembed_url, λ.Calm(VKIE, "ie_key"), ϒvideo_id)
					}
					ϒembed_page = λ.Call(λ.GetAttr(ϒself, "_download_webpage", nil), λ.NewArgs(
						ϒembed_url,
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.DictLiteral(map[string]λ.Object{
							"Referer": ϒurl,
						})},
					})
					ϒvideo_ext = λ.Calm(λ.Calm(ϒself, "_get_cookies", ϒembed_url), "get", λ.StrLiteral("video_ext"))
					if λ.IsTrue(ϒvideo_ext) {
						ϒvideo_ext = λ.Cal(ϒcompat_urllib_parse_unquote, λ.GetAttr(ϒvideo_ext, "value", nil))
					}
					if !λ.IsTrue(ϒvideo_ext) {
						ϒvideo_ext = λ.Calm(λ.Cal(ϒcompat_b64decode, λ.Calm(ϒself, "_search_regex", λ.StrLiteral("video_ext\\s*:\\s*[\\'\"]([A-Za-z0-9+/=]+)"), ϒembed_page, λ.StrLiteral("video_ext"))), "decode")
					}
					τmp0 = λ.Calm(ϒvideo_ext, "split", λ.StrLiteral(":"))
					ϒvideo_id = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒsig = λ.GetItem(τmp0, λ.IntLiteral(1))
					_ = λ.GetItem(τmp0, λ.IntLiteral(2))
					ϒaccess_token = λ.GetItem(τmp0, λ.IntLiteral(3))
					ϒitem = λ.GetItem(λ.GetItem(λ.GetItem(λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.StrLiteral("https://api.vk.com/method/video.get"),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "headers", Value: λ.DictLiteral(map[string]string{
							"User-Agent": "okhttp/3.4.1",
						})},
						{Name: "query", Value: λ.DictLiteral(map[string]λ.Object{
							"access_token": ϒaccess_token,
							"sig":          ϒsig,
							"v":            λ.FloatLiteral(5.44),
							"videos":       ϒvideo_id,
						})},
					}), λ.StrLiteral("response")), λ.StrLiteral("items")), λ.IntLiteral(0))
					ϒtitle = λ.GetItem(ϒitem, λ.StrLiteral("title"))
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.Calm(ϒitem, "get", λ.StrLiteral("files"), λ.DictLiteral(map[λ.Object]λ.Object{})), "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒf_id = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒf_url = λ.GetItem(τmp2, λ.IntLiteral(1))
						if λ.IsTrue(λ.Eq(ϒf_id, λ.StrLiteral("external"))) {
							return λ.Calm(ϒself, "url_result", ϒf_url)
						}
						τmp2 = λ.Calm(ϒf_id, "split", λ.StrLiteral("_"))
						ϒext = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒheight = λ.GetItem(τmp2, λ.IntLiteral(1))
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"format_id": λ.Add(ϒheight, λ.StrLiteral("p")),
							"url":       ϒf_url,
							"height":    λ.Cal(ϒint_or_none, ϒheight),
							"ext":       ϒext,
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒthumbnails = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒitem, "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒk = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒv = λ.GetItem(τmp2, λ.IntLiteral(1))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Calm(ϒk, "startswith", λ.StrLiteral("photo_")); !λ.IsTrue(λv) {
								return λv
							} else {
								return ϒv
							}
						}()) {
							ϒwidth = λ.Calm(ϒk, "replace", λ.StrLiteral("photo_"), λ.StrLiteral(""))
							λ.Calm(ϒthumbnails, "append", λ.DictLiteral(map[string]λ.Object{
								"id":    ϒwidth,
								"url":   ϒv,
								"width": λ.Cal(ϒint_or_none, ϒwidth),
							}))
						}
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":            ϒvideo_id,
						"title":         ϒtitle,
						"formats":       ϒformats,
						"comment_count": λ.Cal(ϒint_or_none, λ.Calm(ϒitem, "get", λ.StrLiteral("comments"))),
						"description":   λ.Calm(ϒitem, "get", λ.StrLiteral("description")),
						"duration":      λ.Cal(ϒint_or_none, λ.Calm(ϒitem, "get", λ.StrLiteral("duration"))),
						"thumbnails":    ϒthumbnails,
						"timestamp":     λ.Cal(ϒint_or_none, λ.Calm(ϒitem, "get", λ.StrLiteral("date"))),
						"uploader":      λ.Calm(ϒitem, "get", λ.StrLiteral("owner_id")),
						"view_count":    λ.Cal(ϒint_or_none, λ.Calm(ϒitem, "get", λ.StrLiteral("views"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    BIQLEIE__VALID_URL,
				"_real_extract": BIQLEIE__real_extract,
			})
		}())
	})
}
