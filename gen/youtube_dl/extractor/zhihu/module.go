// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * zhihu/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/zhihu.py
 */

package zhihu

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor  λ.Object
	ZhihuIE        λ.Object
	ϒfloat_or_none λ.Object
	ϒint_or_none   λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒfloat_or_none = Ωutils.ϒfloat_or_none
		ϒint_or_none = Ωutils.ϒint_or_none
		ZhihuIE = λ.Cal(λ.TypeType, λ.StrLiteral("ZhihuIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ZhihuIE__VALID_URL    λ.Object
				ZhihuIE__real_extract λ.Object
			)
			ZhihuIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?zhihu\\.com/zvideo/(?P<id>[0-9]+)")
			ZhihuIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒauthor    λ.Object
						ϒformat_id λ.Object
						ϒformats   λ.Object
						ϒplay_url  λ.Object
						ϒq         λ.Object
						ϒself      = λargs[0]
						ϒtitle     λ.Object
						ϒurl       = λargs[1]
						ϒurl_token λ.Object
						ϒvideo     λ.Object
						ϒvideo_id  λ.Object
						ϒzvideo    λ.Object
						τmp0       λ.Object
						τmp1       λ.Object
						τmp2       λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒzvideo = λ.Calm(ϒself, "_download_json", λ.Add(λ.StrLiteral("https://www.zhihu.com/api/v4/zvideos/"), ϒvideo_id), ϒvideo_id)
					ϒtitle = λ.GetItem(ϒzvideo, λ.StrLiteral("title"))
					ϒvideo = func() λ.Object {
						if λv := λ.Calm(ϒzvideo, "get", λ.StrLiteral("video")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(func() λ.Object {
						if λv := λ.Calm(ϒvideo, "get", λ.StrLiteral("playlist")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}(), "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒq = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒplay_url = func() λ.Object {
							if λv := λ.Calm(ϒq, "get", λ.StrLiteral("url")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒq, "get", λ.StrLiteral("play_url"))
							}
						}()
						if !λ.IsTrue(ϒplay_url) {
							continue
						}
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"asr":       λ.Cal(ϒint_or_none, λ.Calm(ϒq, "get", λ.StrLiteral("sample_rate"))),
							"filesize":  λ.Cal(ϒint_or_none, λ.Calm(ϒq, "get", λ.StrLiteral("size"))),
							"format_id": ϒformat_id,
							"fps":       λ.Cal(ϒint_or_none, λ.Calm(ϒq, "get", λ.StrLiteral("fps"))),
							"height":    λ.Cal(ϒint_or_none, λ.Calm(ϒq, "get", λ.StrLiteral("height"))),
							"tbr":       λ.Cal(ϒfloat_or_none, λ.Calm(ϒq, "get", λ.StrLiteral("bitrate"))),
							"url":       ϒplay_url,
							"width":     λ.Cal(ϒint_or_none, λ.Calm(ϒq, "get", λ.StrLiteral("width"))),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒauthor = func() λ.Object {
						if λv := λ.Calm(ϒzvideo, "get", λ.StrLiteral("author")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.DictLiteral(map[λ.Object]λ.Object{})
						}
					}()
					ϒurl_token = λ.Calm(ϒauthor, "get", λ.StrLiteral("url_token"))
					return λ.DictLiteral(map[string]λ.Object{
						"id":      ϒvideo_id,
						"title":   ϒtitle,
						"formats": ϒformats,
						"thumbnail": func() λ.Object {
							if λv := λ.Calm(ϒvideo, "get", λ.StrLiteral("thumbnail")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Calm(ϒzvideo, "get", λ.StrLiteral("image_url"))
							}
						}(),
						"uploader":    λ.Calm(ϒauthor, "get", λ.StrLiteral("name")),
						"timestamp":   λ.Cal(ϒint_or_none, λ.Calm(ϒzvideo, "get", λ.StrLiteral("published_at"))),
						"uploader_id": λ.Calm(ϒauthor, "get", λ.StrLiteral("id")),
						"uploader_url": func() λ.Object {
							if λ.IsTrue(ϒurl_token) {
								return λ.Add(λ.StrLiteral("https://www.zhihu.com/people/"), ϒurl_token)
							} else {
								return λ.None
							}
						}(),
						"duration":      λ.Cal(ϒfloat_or_none, λ.Calm(ϒvideo, "get", λ.StrLiteral("duration"))),
						"view_count":    λ.Cal(ϒint_or_none, λ.Calm(ϒzvideo, "get", λ.StrLiteral("play_count"))),
						"like_count":    λ.Cal(ϒint_or_none, λ.Calm(ϒzvideo, "get", λ.StrLiteral("liked_count"))),
						"comment_count": λ.Cal(ϒint_or_none, λ.Calm(ϒzvideo, "get", λ.StrLiteral("comment_count"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    ZhihuIE__VALID_URL,
				"_real_extract": ZhihuIE__real_extract,
			})
		}())
	})
}
