// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * iheart/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/iheart.py
 */

package iheart

import (
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	IHeartRadioBaseIE    λ.Object
	IHeartRadioIE        λ.Object
	IHeartRadioPodcastIE λ.Object
	InfoExtractor        λ.Object
	ϒclean_html          λ.Object
	ϒclean_podcast_url   λ.Object
	ϒint_or_none         λ.Object
	ϒstr_or_none         λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒclean_html = Ωutils.ϒclean_html
		ϒclean_podcast_url = Ωutils.ϒclean_podcast_url
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒstr_or_none = Ωutils.ϒstr_or_none
		IHeartRadioBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("IHeartRadioBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				IHeartRadioBaseIE__call_api        λ.Object
				IHeartRadioBaseIE__extract_episode λ.Object
			)
			IHeartRadioBaseIE__call_api = λ.NewFunction("_call_api",
				[]λ.Param{
					{Name: "self"},
					{Name: "path"},
					{Name: "video_id"},
					{Name: "fatal", Def: λ.True},
					{Name: "query", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒfatal    = λargs[3]
						ϒpath     = λargs[1]
						ϒquery    = λargs[4]
						ϒself     = λargs[0]
						ϒvideo_id = λargs[2]
					)
					return λ.Call(λ.GetAttr(ϒself, "_download_json", nil), λ.NewArgs(
						λ.Add(λ.StrLiteral("https://api.iheart.com/api/v3/podcast/"), ϒpath),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "fatal", Value: ϒfatal},
						{Name: "query", Value: ϒquery},
					})
				})
			IHeartRadioBaseIE__extract_episode = λ.NewFunction("_extract_episode",
				[]λ.Param{
					{Name: "self"},
					{Name: "episode"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒepisode = λargs[1]
						ϒself    = λargs[0]
					)
					_ = ϒself
					return λ.DictLiteral(map[string]λ.Object{
						"thumbnail":   λ.Calm(ϒepisode, "get", λ.StrLiteral("imageUrl")),
						"description": λ.Cal(ϒclean_html, λ.Calm(ϒepisode, "get", λ.StrLiteral("description"))),
						"timestamp":   λ.Cal(ϒint_or_none, λ.Calm(ϒepisode, "get", λ.StrLiteral("startDate")), λ.IntLiteral(1000)),
						"duration":    λ.Cal(ϒint_or_none, λ.Calm(ϒepisode, "get", λ.StrLiteral("duration"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_call_api":        IHeartRadioBaseIE__call_api,
				"_extract_episode": IHeartRadioBaseIE__extract_episode,
			})
		}())
		IHeartRadioIE = λ.Cal(λ.TypeType, λ.StrLiteral("IHeartRadioIE"), λ.NewTuple(IHeartRadioBaseIE), func() λ.Dict {
			var (
				IHeartRadioIE__VALID_URL    λ.Object
				IHeartRadioIE__real_extract λ.Object
			)
			IHeartRadioIE__VALID_URL = λ.StrLiteral("(?:https?://(?:www\\.)?iheart\\.com/podcast/[^/]+/episode/(?P<display_id>[^/?&#]+)-|iheartradio:)(?P<id>\\d+)")
			IHeartRadioIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒepisode    λ.Object
						ϒepisode_id λ.Object
						ϒinfo       λ.Object
						ϒself       = λargs[0]
						ϒurl        = λargs[1]
					)
					ϒepisode_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒepisode = λ.GetItem(λ.Calm(ϒself, "_call_api", λ.Add(λ.StrLiteral("episodes/"), ϒepisode_id), ϒepisode_id), λ.StrLiteral("episode"))
					ϒinfo = λ.Calm(ϒself, "_extract_episode", ϒepisode)
					λ.Calm(ϒinfo, "update", λ.DictLiteral(map[string]λ.Object{
						"id":    ϒepisode_id,
						"title": λ.GetItem(ϒepisode, λ.StrLiteral("title")),
						"url":   λ.Cal(ϒclean_podcast_url, λ.GetItem(ϒepisode, λ.StrLiteral("mediaUrl"))),
					}))
					return ϒinfo
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    IHeartRadioIE__VALID_URL,
				"_real_extract": IHeartRadioIE__real_extract,
			})
		}())
		IHeartRadioPodcastIE = λ.Cal(λ.TypeType, λ.StrLiteral("IHeartRadioPodcastIE"), λ.NewTuple(IHeartRadioBaseIE), func() λ.Dict {
			var (
				IHeartRadioPodcastIE__VALID_URL λ.Object
			)
			IHeartRadioPodcastIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?iheart(?:podcastnetwork)?\\.com/podcast/[^/?&#]+-(?P<id>\\d+)/?(?:[?#&]|$)")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": IHeartRadioPodcastIE__VALID_URL,
			})
		}())
	})
}
