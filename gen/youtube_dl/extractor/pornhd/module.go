// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * pornhd/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/pornhd.py
 */

package pornhd

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError λ.Object
	InfoExtractor  λ.Object
	PornHdIE       λ.Object
	ϒdetermine_ext λ.Object
	ϒint_or_none   λ.Object
	ϒjs_to_json    λ.Object
	ϒmerge_dicts   λ.Object
	ϒurljoin       λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒmerge_dicts = Ωutils.ϒmerge_dicts
		ϒurljoin = Ωutils.ϒurljoin
		PornHdIE = λ.Cal(λ.TypeType, λ.StrLiteral("PornHdIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				PornHdIE__VALID_URL    λ.Object
				PornHdIE__real_extract λ.Object
			)
			PornHdIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?pornhd\\.com/(?:[a-z]{2,4}/)?videos/(?P<id>\\d+)(?:/(?P<display_id>.+))?")
			PornHdIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒdescription λ.Object
						ϒdisplay_id  λ.Object
						ϒentries     λ.Object
						ϒformat_id   λ.Object
						ϒformats     λ.Object
						ϒheight      λ.Object
						ϒinfo        λ.Object
						ϒlike_count  λ.Object
						ϒmessage     λ.Object
						ϒmobj        λ.Object
						ϒself        = λargs[0]
						ϒsources     λ.Object
						ϒthumbnail   λ.Object
						ϒtitle       λ.Object
						ϒurl         = λargs[1]
						ϒvideo_id    λ.Object
						ϒvideo_url   λ.Object
						ϒview_count  λ.Object
						ϒwebpage     λ.Object
						τmp0         λ.Object
						τmp1         λ.Object
						τmp2         λ.Object
					)
					ϒmobj = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒvideo_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("id"))
					ϒdisplay_id = λ.Calm(ϒmobj, "group", λ.StrLiteral("display_id"))
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, func() λ.Object {
						if λv := ϒdisplay_id; λ.IsTrue(λv) {
							return λv
						} else {
							return ϒvideo_id
						}
					}())
					ϒtitle = λ.Calm(ϒself, "_html_search_regex", λ.NewList(
						λ.StrLiteral("<span[^>]+class=[\"\\']video-name[\"\\'][^>]*>([^<]+)"),
						λ.StrLiteral("<title>(.+?) - .*?[Pp]ornHD.*?</title>"),
					), ϒwebpage, λ.StrLiteral("title"))
					ϒsources = λ.Calm(ϒself, "_parse_json", λ.Cal(ϒjs_to_json, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(?s)sources'?\\s*[:=]\\s*(\\{.+?\\})"),
						ϒwebpage,
						λ.StrLiteral("sources"),
					), λ.KWArgs{
						{Name: "default", Value: λ.StrLiteral("{}")},
					})), ϒvideo_id)
					ϒinfo = λ.DictLiteral(map[λ.Object]λ.Object{})
					if !λ.IsTrue(ϒsources) {
						ϒentries = λ.Calm(ϒself, "_parse_html5_media_entries", ϒurl, ϒwebpage, ϒvideo_id)
						if λ.IsTrue(ϒentries) {
							ϒinfo = λ.GetItem(ϒentries, λ.IntLiteral(0))
						}
					}
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.IsTrue(ϒsources)); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(!λ.IsTrue(ϒinfo))
						}
					}()) {
						ϒmessage = λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("(?s)<(div|p)[^>]+class=\"no-video\"[^>]*>(?P<value>.+?)</\\1"),
							ϒwebpage,
							λ.StrLiteral("error message"),
						), λ.KWArgs{
							{Name: "group", Value: λ.StrLiteral("value")},
						})
						panic(λ.Raise(λ.Call(ExtractorError, λ.NewArgs(λ.Mod(λ.StrLiteral("%s said: %s"), λ.NewTuple(
							λ.GetAttr(ϒself, "IE_NAME", nil),
							ϒmessage,
						))), λ.KWArgs{
							{Name: "expected", Value: λ.True},
						})))
					}
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒsources, "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = λ.UnpackIterable(τmp1, 2)
						ϒformat_id = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒvideo_url = λ.GetItem(τmp2, λ.IntLiteral(1))
						ϒvideo_url = λ.Cal(ϒurljoin, ϒurl, ϒvideo_url)
						if !λ.IsTrue(ϒvideo_url) {
							continue
						}
						ϒheight = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("^(\\d+)[pP]"),
							ϒformat_id,
							λ.StrLiteral("height"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}))
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url":       ϒvideo_url,
							"ext":       λ.Cal(ϒdetermine_ext, ϒvideo_url, λ.StrLiteral("mp4")),
							"format_id": ϒformat_id,
							"height":    ϒheight,
						}))
					}
					if λ.IsTrue(ϒformats) {
						λ.SetItem(ϒinfo, λ.StrLiteral("formats"), ϒformats)
					}
					λ.Calm(ϒself, "_sort_formats", λ.GetItem(ϒinfo, λ.StrLiteral("formats")))
					ϒdescription = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
							λ.NewTuple(
								λ.StrLiteral("(?s)<section[^>]+class=[\"\\']video-description[^>]+>(?P<value>.+?)</section>"),
								λ.StrLiteral("<(div|p)[^>]+class=\"description\"[^>]*>(?P<value>[^<]+)</\\1"),
							),
							ϒwebpage,
							λ.StrLiteral("description"),
						), λ.KWArgs{
							{Name: "fatal", Value: λ.False},
							{Name: "group", Value: λ.StrLiteral("value")},
						}); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Call(λ.GetAttr(ϒself, "_html_search_meta", nil), λ.NewArgs(
							λ.StrLiteral("description"),
							ϒwebpage,
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒself, "_og_search_description", ϒwebpage)
						}
					}()
					ϒview_count = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_html_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("(\\d+) views\\s*<"),
						ϒwebpage,
						λ.StrLiteral("view count"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					ϒthumbnail = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("poster'?\\s*:\\s*([\\\"'])(?P<url>(?:(?!\\1).)+)\\1"),
						ϒwebpage,
						λ.StrLiteral("thumbnail"),
					), λ.KWArgs{
						{Name: "default", Value: λ.None},
						{Name: "group", Value: λ.StrLiteral("url")},
					})
					ϒlike_count = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.NewTuple(
							λ.StrLiteral("(\\d+)</span>\\s*likes"),
							λ.StrLiteral("(\\d+)\\s*</11[^>]+>(?:&nbsp;|\\s)*\\blikes"),
							λ.StrLiteral("class=[\"\\']save-count[\"\\'][^>]*>\\s*(\\d+)"),
						),
						ϒwebpage,
						λ.StrLiteral("like count"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					return λ.Cal(ϒmerge_dicts, ϒinfo, λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"display_id":  ϒdisplay_id,
						"title":       ϒtitle,
						"description": ϒdescription,
						"thumbnail":   ϒthumbnail,
						"view_count":  ϒview_count,
						"like_count":  ϒlike_count,
						"formats":     ϒformats,
						"age_limit":   λ.IntLiteral(18),
					}))
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    PornHdIE__VALID_URL,
				"_real_extract": PornHdIE__real_extract,
			})
		}())
	})
}
