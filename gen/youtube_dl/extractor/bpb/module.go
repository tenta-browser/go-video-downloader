// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * bpb/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/bpb.py
 */

package bpb

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	BpbIE          λ.Object
	InfoExtractor  λ.Object
	ϒdetermine_ext λ.Object
	ϒjs_to_json    λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		BpbIE = λ.Cal(λ.TypeType, λ.StrLiteral("BpbIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				BpbIE__VALID_URL    λ.Object
				BpbIE__real_extract λ.Object
			)
			BpbIE__VALID_URL = λ.StrLiteral("https?://(?:www\\.)?bpb\\.de/mediathek/(?P<id>[0-9]+)/")
			BpbIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒformats          λ.Object
						ϒquality          λ.Object
						ϒself             = λargs[0]
						ϒtitle            λ.Object
						ϒurl              = λargs[1]
						ϒvideo_id         λ.Object
						ϒvideo_info       λ.Object
						ϒvideo_info_dicts λ.Object
						ϒvideo_url        λ.Object
						ϒwebpage          λ.Object
						τmp0              λ.Object
						τmp1              λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", ϒurl, ϒvideo_id)
					ϒtitle = λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("<h2 class=\"white\">(.*?)</h2>"), ϒwebpage, λ.StrLiteral("title"))
					ϒvideo_info_dicts = λ.Cal(Ωre.ϒfindall, λ.StrLiteral("({\\s*src\\s*:\\s*'https?://film\\.bpb\\.de/[^}]+})"), ϒwebpage)
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, ϒvideo_info_dicts)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒvideo_info = τmp1
						ϒvideo_info = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
							ϒvideo_info,
							ϒvideo_id,
						), λ.KWArgs{
							{Name: "transform_source", Value: ϒjs_to_json},
							{Name: "fatal", Value: λ.False},
						})
						if !λ.IsTrue(ϒvideo_info) {
							continue
						}
						ϒvideo_url = λ.Calm(ϒvideo_info, "get", λ.StrLiteral("src"))
						if !λ.IsTrue(ϒvideo_url) {
							continue
						}
						ϒquality = func() λ.Object {
							if λ.Contains(ϒvideo_url, λ.StrLiteral("_high")) {
								return λ.StrLiteral("high")
							} else {
								return λ.StrLiteral("low")
							}
						}()
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"url": ϒvideo_url,
							"preference": func() λ.Object {
								if λ.IsTrue(λ.Eq(ϒquality, λ.StrLiteral("high"))) {
									return λ.IntLiteral(10)
								} else {
									return λ.IntLiteral(0)
								}
							}(),
							"format_note": ϒquality,
							"format_id": λ.Mod(λ.StrLiteral("%s-%s"), λ.NewTuple(
								ϒquality,
								λ.Cal(ϒdetermine_ext, ϒvideo_url),
							)),
						}))
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒvideo_id,
						"formats":     ϒformats,
						"title":       ϒtitle,
						"description": λ.Calm(ϒself, "_og_search_description", ϒwebpage),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    BpbIE__VALID_URL,
				"_real_extract": BpbIE__real_extract,
			})
		}())
	})
}
