// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * rts/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/rts.py
 */

package rts

import (
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωsrgssr "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/srgssr"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	RTSIE           λ.Object
	SRGSSRIE        λ.Object
	ϒcompat_str     λ.Object
	ϒdetermine_ext  λ.Object
	ϒint_or_none    λ.Object
	ϒparse_duration λ.Object
	ϒparse_iso8601  λ.Object
	ϒunescapeHTML   λ.Object
	ϒurljoin        λ.Object
)

func init() {
	λ.InitModule(func() {
		SRGSSRIE = Ωsrgssr.SRGSSRIE
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒdetermine_ext = Ωutils.ϒdetermine_ext
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_duration = Ωutils.ϒparse_duration
		ϒparse_iso8601 = Ωutils.ϒparse_iso8601
		ϒunescapeHTML = Ωutils.ϒunescapeHTML
		ϒurljoin = Ωutils.ϒurljoin
		RTSIE = λ.Cal(λ.TypeType, λ.StrLiteral("RTSIE"), λ.NewTuple(SRGSSRIE), func() λ.Dict {
			var (
				RTSIE__VALID_URL    λ.Object
				RTSIE__real_extract λ.Object
			)
			RTSIE__VALID_URL = λ.StrLiteral("rts:(?P<rts_id>\\d+)|https?://(?:.+?\\.)?rts\\.ch/(?:[^/]+/){2,}(?P<id>[0-9]+)-(?P<display_id>.+?)\\.html")
			RTSIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒall_info        λ.Object
						ϒdisplay_id      λ.Object
						ϒdownload_base   λ.Object
						ϒdownload_json   λ.Object
						ϒduration        λ.Object
						ϒentries         λ.Object
						ϒext             λ.Object
						ϒextract_bitrate λ.Object
						ϒformat_id       λ.Object
						ϒformat_url      λ.Object
						ϒformats         λ.Object
						ϒinfo            λ.Object
						ϒinternal_id     λ.Object
						ϒitem            λ.Object
						ϒitem_url        λ.Object
						ϒm               λ.Object
						ϒmedia           λ.Object
						ϒmedia_id        λ.Object
						ϒmedia_type      λ.Object
						ϒmedia_url       λ.Object
						ϒpage            λ.Object
						ϒrate            λ.Object
						ϒself            = λargs[0]
						ϒstreams         λ.Object
						ϒtitle           λ.Object
						ϒurl             = λargs[1]
						ϒurlh            λ.Object
						ϒvideos          λ.Object
						τmp0             λ.Object
						τmp1             λ.Object
						τmp2             λ.Object
					)
					ϒm = λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), ϒurl)
					ϒmedia_id = func() λ.Object {
						if λv := λ.Calm(ϒm, "group", λ.StrLiteral("rts_id")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒm, "group", λ.StrLiteral("id"))
						}
					}()
					ϒdisplay_id = func() λ.Object {
						if λv := λ.Calm(ϒm, "group", λ.StrLiteral("display_id")); λ.IsTrue(λv) {
							return λv
						} else {
							return ϒmedia_id
						}
					}()
					ϒdownload_json = λ.NewFunction("download_json",
						[]λ.Param{
							{Name: "internal_id"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒinternal_id = λargs[0]
							)
							return λ.Calm(ϒself, "_download_json", λ.Mod(λ.StrLiteral("http://www.rts.ch/a/%s.html?f=json/article"), ϒinternal_id), ϒdisplay_id)
						})
					ϒall_info = λ.Cal(ϒdownload_json, ϒmedia_id)
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(!λ.Contains(ϒall_info, λ.StrLiteral("video"))); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewBool(!λ.Contains(ϒall_info, λ.StrLiteral("audio")))
						}
					}()) {
						ϒentries = λ.NewList()
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒall_info, "get", λ.StrLiteral("items"), λ.NewList()))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒitem = τmp1
							ϒitem_url = λ.Calm(ϒitem, "get", λ.StrLiteral("url"))
							if !λ.IsTrue(ϒitem_url) {
								continue
							}
							λ.Calm(ϒentries, "append", λ.Calm(ϒself, "url_result", ϒitem_url, λ.StrLiteral("RTS")))
						}
						if !λ.IsTrue(ϒentries) {
							τmp0 = λ.Calm(ϒself, "_download_webpage_handle", ϒurl, ϒdisplay_id)
							ϒpage = λ.GetItem(τmp0, λ.IntLiteral(0))
							ϒurlh = λ.GetItem(τmp0, λ.IntLiteral(1))
							if λ.IsTrue(λ.Ne(λ.Calm(λ.Cal(Ωre.ϒmatch, λ.GetAttr(ϒself, "_VALID_URL", nil), λ.Calm(ϒurlh, "geturl")), "group", λ.StrLiteral("id")), ϒmedia_id)) {
								return λ.Calm(ϒself, "url_result", λ.Calm(ϒurlh, "geturl"), λ.StrLiteral("RTS"))
							}
							ϒvideos = λ.Cal(Ωre.ϒfindall, λ.StrLiteral("<article[^>]+class=\"content-item\"[^>]*>\\s*<a[^>]+data-video-urn=\"urn:([^\"]+)\""), ϒpage)
							if !λ.IsTrue(ϒvideos) {
								ϒvideos = λ.Cal(Ωre.ϒfindall, λ.StrLiteral("(?s)<iframe[^>]+class=\"srg-player\"[^>]+src=\"[^\"]+urn:([^\"]+)\""), ϒpage)
							}
							if λ.IsTrue(ϒvideos) {
								ϒentries = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
									nil,
									0, false, false,
									func(λargs []λ.Object) λ.Object {
										return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
											var (
												ϒvideo_urn λ.Object
												τmp0       λ.Object
												τmp1       λ.Object
											)
											τmp0 = λ.Cal(λ.BuiltinIter, ϒvideos)
											for {
												if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
													break
												}
												ϒvideo_urn = τmp1
												λgy.Yield(λ.Calm(ϒself, "url_result", λ.Mod(λ.StrLiteral("srgssr:%s"), ϒvideo_urn), λ.StrLiteral("SRGSSR")))
											}
											return λ.None
										})
									})))
							}
						}
						if λ.IsTrue(ϒentries) {
							return λ.Calm(ϒself, "playlist_result", ϒentries, ϒmedia_id, λ.Calm(ϒall_info, "get", λ.StrLiteral("title")))
						}
						ϒinternal_id = λ.Calm(ϒself, "_html_search_regex", λ.StrLiteral("<(?:video|audio) data-id=\"([0-9]+)\""), ϒpage, λ.StrLiteral("internal video id"))
						ϒall_info = λ.Cal(ϒdownload_json, ϒinternal_id)
					}
					ϒmedia_type = func() λ.Object {
						if λ.Contains(ϒall_info, λ.StrLiteral("video")) {
							return λ.StrLiteral("video")
						} else {
							return λ.StrLiteral("audio")
						}
					}()
					λ.Calm(ϒself, "_get_media_data", λ.StrLiteral("rts"), ϒmedia_type, ϒmedia_id)
					ϒinfo = func() λ.Object {
						if λ.Contains(ϒall_info, λ.StrLiteral("video")) {
							return λ.GetItem(λ.GetItem(ϒall_info, λ.StrLiteral("video")), λ.StrLiteral("JSONinfo"))
						} else {
							return λ.GetItem(ϒall_info, λ.StrLiteral("audio"))
						}
					}()
					ϒtitle = λ.GetItem(ϒinfo, λ.StrLiteral("title"))
					ϒextract_bitrate = λ.NewFunction("extract_bitrate",
						[]λ.Param{
							{Name: "url"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒurl = λargs[0]
							)
							return λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.StrLiteral("-([0-9]+)k\\."),
								ϒurl,
								λ.StrLiteral("bitrate"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							}))
						})
					ϒformats = λ.NewList()
					ϒstreams = λ.Calm(ϒinfo, "get", λ.StrLiteral("streams"), λ.DictLiteral(map[λ.Object]λ.Object{}))
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒstreams, "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒformat_id = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒformat_url = λ.GetItem(τmp2, λ.IntLiteral(1))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒformat_id, λ.StrLiteral("hds_sd")); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒstreams, λ.StrLiteral("hds")))
							}
						}()) {
							continue
						}
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒformat_id, λ.StrLiteral("hls_sd")); !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(ϒstreams, λ.StrLiteral("hls")))
							}
						}()) {
							continue
						}
						ϒext = λ.Cal(ϒdetermine_ext, ϒformat_url)
						if λ.Contains(λ.NewTuple(
							λ.StrLiteral("m3u8"),
							λ.StrLiteral("f4m"),
						), ϒext) {
							ϒformat_url = λ.Calm(ϒself, "_get_tokenized_src", ϒformat_url, ϒmedia_id, ϒformat_id)
							if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("f4m"))) {
								λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_f4m_formats", nil), λ.NewArgs(
									λ.Add(λ.Add(ϒformat_url, func() λ.Object {
										if !λ.Contains(ϒformat_url, λ.StrLiteral("?")) {
											return λ.StrLiteral("?")
										} else {
											return λ.StrLiteral("&")
										}
									}()), λ.StrLiteral("hdcore=3.4.0")),
									ϒmedia_id,
								), λ.KWArgs{
									{Name: "f4m_id", Value: ϒformat_id},
									{Name: "fatal", Value: λ.False},
								}))
							} else {
								λ.Calm(ϒformats, "extend", λ.Call(λ.GetAttr(ϒself, "_extract_m3u8_formats", nil), λ.NewArgs(
									ϒformat_url,
									ϒmedia_id,
									λ.StrLiteral("mp4"),
									λ.StrLiteral("m3u8_native"),
								), λ.KWArgs{
									{Name: "m3u8_id", Value: ϒformat_id},
									{Name: "fatal", Value: λ.False},
								}))
							}
						} else {
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"format_id": ϒformat_id,
								"url":       ϒformat_url,
								"tbr":       λ.Cal(ϒextract_bitrate, ϒformat_url),
							}))
						}
					}
					ϒdownload_base = λ.Mod(λ.StrLiteral("http://rtsww%s-d.rts.ch/"), func() λ.Object {
						if λ.IsTrue(λ.Eq(ϒmedia_type, λ.StrLiteral("audio"))) {
							return λ.StrLiteral("-a")
						} else {
							return λ.StrLiteral("")
						}
					}())
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒinfo, "get", λ.StrLiteral("media"), λ.NewList()))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒmedia = τmp1
						ϒmedia_url = λ.Calm(ϒmedia, "get", λ.StrLiteral("url"))
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.IsTrue(ϒmedia_url)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(Ωre.ϒmatch, λ.StrLiteral("https?://"), ϒmedia_url)
							}
						}()) {
							continue
						}
						ϒrate = λ.Calm(ϒmedia, "get", λ.StrLiteral("rate"))
						ϒext = func() λ.Object {
							if λv := λ.Calm(ϒmedia, "get", λ.StrLiteral("ext")); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Cal(ϒdetermine_ext, ϒmedia_url, λ.StrLiteral("mp4"))
							}
						}()
						ϒformat_id = ϒext
						if λ.IsTrue(ϒrate) {
							τmp2 = λ.IAdd(ϒformat_id, λ.Mod(λ.StrLiteral("-%dk"), ϒrate))
							ϒformat_id = τmp2
						}
						λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
							"format_id": ϒformat_id,
							"url":       λ.Cal(ϒurljoin, ϒdownload_base, ϒmedia_url),
							"tbr": func() λ.Object {
								if λv := ϒrate; λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Cal(ϒextract_bitrate, ϒmedia_url)
								}
							}(),
						}))
					}
					λ.Calm(ϒself, "_check_formats", ϒformats, ϒmedia_id)
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒduration = func() λ.Object {
						if λv := λ.Calm(ϒinfo, "get", λ.StrLiteral("duration")); λ.IsTrue(λv) {
							return λv
						} else if λv := λ.Calm(ϒinfo, "get", λ.StrLiteral("cutout")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒinfo, "get", λ.StrLiteral("cutduration"))
						}
					}()
					if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒduration, ϒcompat_str)) {
						ϒduration = λ.Cal(ϒparse_duration, ϒduration)
					}
					return λ.DictLiteral(map[string]λ.Object{
						"id":          ϒmedia_id,
						"display_id":  ϒdisplay_id,
						"formats":     ϒformats,
						"title":       ϒtitle,
						"description": λ.Calm(ϒinfo, "get", λ.StrLiteral("intro")),
						"duration":    ϒduration,
						"view_count":  λ.Cal(ϒint_or_none, λ.Calm(ϒinfo, "get", λ.StrLiteral("plays"))),
						"uploader":    λ.Calm(ϒinfo, "get", λ.StrLiteral("programName")),
						"timestamp":   λ.Cal(ϒparse_iso8601, λ.Calm(ϒinfo, "get", λ.StrLiteral("broadcast_date"))),
						"thumbnail":   λ.Cal(ϒunescapeHTML, λ.Calm(ϒinfo, "get", λ.StrLiteral("preview_image_url"))),
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    RTSIE__VALID_URL,
				"_real_extract": RTSIE__real_extract,
			})
		}())
	})
}
