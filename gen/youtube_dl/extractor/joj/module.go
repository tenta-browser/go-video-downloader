// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * joj/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/joj.py
 */

package joj

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	InfoExtractor λ.Object
	JojIE         λ.Object
	ϒcompat_str   λ.Object
	ϒint_or_none  λ.Object
	ϒjs_to_json   λ.Object
	ϒtry_get      λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒjs_to_json = Ωutils.ϒjs_to_json
		ϒtry_get = Ωutils.ϒtry_get
		JojIE = λ.Cal(λ.TypeType, λ.StrLiteral("JojIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				JojIE__VALID_URL    λ.Object
				JojIE__real_extract λ.Object
			)
			JojIE__VALID_URL = λ.StrLiteral("(?x)\n                    (?:\n                        joj:|\n                        https?://media\\.joj\\.sk/embed/\n                    )\n                    (?P<id>[^/?#^]+)\n                ")
			JojIE__real_extract = λ.NewFunction("_real_extract",
				[]λ.Param{
					{Name: "self"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒbitrates   λ.Object
						ϒduration   λ.Object
						ϒfile_el    λ.Object
						ϒformat_id  λ.Object
						ϒformat_url λ.Object
						ϒformats    λ.Object
						ϒheight     λ.Object
						ϒpath       λ.Object
						ϒplaylist   λ.Object
						ϒself       = λargs[0]
						ϒthumbnail  λ.Object
						ϒtitle      λ.Object
						ϒurl        = λargs[1]
						ϒvideo_id   λ.Object
						ϒwebpage    λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
					)
					ϒvideo_id = λ.Calm(ϒself, "_match_id", ϒurl)
					ϒwebpage = λ.Calm(ϒself, "_download_webpage", λ.Mod(λ.StrLiteral("https://media.joj.sk/embed/%s"), ϒvideo_id), ϒvideo_id)
					ϒtitle = func() λ.Object {
						if λv := λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.NewTuple(
								λ.StrLiteral("videoTitle\\s*:\\s*([\"\\'])(?P<title>(?:(?!\\1).)+)\\1"),
								λ.StrLiteral("<title>(?P<title>[^<]+)"),
							),
							ϒwebpage,
							λ.StrLiteral("title"),
						), λ.KWArgs{
							{Name: "default", Value: λ.None},
							{Name: "group", Value: λ.StrLiteral("title")},
						}); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒself, "_og_search_title", ϒwebpage)
						}
					}()
					ϒbitrates = λ.Call(λ.GetAttr(ϒself, "_parse_json", nil), λ.NewArgs(
						λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
							λ.StrLiteral("(?s)(?:src|bitrates)\\s*=\\s*({.+?});"),
							ϒwebpage,
							λ.StrLiteral("bitrates"),
						), λ.KWArgs{
							{Name: "default", Value: λ.StrLiteral("{}")},
						}),
						ϒvideo_id,
					), λ.KWArgs{
						{Name: "transform_source", Value: ϒjs_to_json},
						{Name: "fatal", Value: λ.False},
					})
					ϒformats = λ.NewList()
					τmp0 = λ.Cal(λ.BuiltinIter, func() λ.Object {
						if λv := λ.Cal(ϒtry_get, ϒbitrates, λ.NewFunction("<lambda>",
							[]λ.Param{
								{Name: "x"},
							},
							0, false, false,
							func(λargs []λ.Object) λ.Object {
								var (
									ϒx = λargs[0]
								)
								return λ.GetItem(ϒx, λ.StrLiteral("mp4"))
							}), λ.ListType); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.NewList()
						}
					}())
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒformat_url = τmp1
						if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒformat_url, ϒcompat_str)) {
							ϒheight = λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
								λ.StrLiteral("(\\d+)[pP]\\."),
								ϒformat_url,
								λ.StrLiteral("height"),
							), λ.KWArgs{
								{Name: "default", Value: λ.None},
							})
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"url": ϒformat_url,
								"format_id": func() λ.Object {
									if λ.IsTrue(ϒheight) {
										return λ.Mod(λ.StrLiteral("%sp"), ϒheight)
									} else {
										return λ.None
									}
								}(),
								"height": λ.Cal(λ.IntType, ϒheight),
							}))
						}
					}
					if !λ.IsTrue(ϒformats) {
						ϒplaylist = λ.Calm(ϒself, "_download_xml", λ.Mod(λ.StrLiteral("https://media.joj.sk/services/Video.php?clip=%s"), ϒvideo_id), ϒvideo_id)
						τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒplaylist, "findall", λ.StrLiteral("./files/file")))
						for {
							if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
								break
							}
							ϒfile_el = τmp1
							ϒpath = λ.Calm(ϒfile_el, "get", λ.StrLiteral("path"))
							if !λ.IsTrue(ϒpath) {
								continue
							}
							ϒformat_id = func() λ.Object {
								if λv := λ.Calm(ϒfile_el, "get", λ.StrLiteral("id")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Calm(ϒfile_el, "get", λ.StrLiteral("label"))
								}
							}()
							λ.Calm(ϒformats, "append", λ.DictLiteral(map[string]λ.Object{
								"url":       λ.Mod(λ.StrLiteral("http://n16.joj.sk/storage/%s"), λ.Calm(ϒpath, "replace", λ.StrLiteral("dat/"), λ.StrLiteral(""), λ.IntLiteral(1))),
								"format_id": ϒformat_id,
								"height": λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
									λ.StrLiteral("(\\d+)[pP]"),
									func() λ.Object {
										if λv := ϒformat_id; λ.IsTrue(λv) {
											return λv
										} else {
											return ϒpath
										}
									}(),
									λ.StrLiteral("height"),
								), λ.KWArgs{
									{Name: "default", Value: λ.None},
								})),
							}))
						}
					}
					λ.Calm(ϒself, "_sort_formats", ϒformats)
					ϒthumbnail = λ.Calm(ϒself, "_og_search_thumbnail", ϒwebpage)
					ϒduration = λ.Cal(ϒint_or_none, λ.Call(λ.GetAttr(ϒself, "_search_regex", nil), λ.NewArgs(
						λ.StrLiteral("videoDuration\\s*:\\s*(\\d+)"),
						ϒwebpage,
						λ.StrLiteral("duration"),
					), λ.KWArgs{
						{Name: "fatal", Value: λ.False},
					}))
					return λ.DictLiteral(map[string]λ.Object{
						"id":        ϒvideo_id,
						"title":     ϒtitle,
						"thumbnail": ϒthumbnail,
						"duration":  ϒduration,
						"formats":   ϒformats,
					})
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL":    JojIE__VALID_URL,
				"_real_extract": JojIE__real_extract,
			})
		}())
	})
}
