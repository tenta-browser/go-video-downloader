// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * viewlift/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/extractor/viewlift.py
 */

package viewlift

import (
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωcommon "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/extractor/common"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError    λ.Object
	InfoExtractor     λ.Object
	ViewLiftBaseIE    λ.Object
	ViewLiftEmbedIE   λ.Object
	ViewLiftIE        λ.Object
	ϒcompat_HTTPError λ.Object
	ϒint_or_none      λ.Object
	ϒparse_age_limit  λ.Object
)

func init() {
	λ.InitModule(func() {
		InfoExtractor = Ωcommon.InfoExtractor
		ϒcompat_HTTPError = Ωcompat.ϒcompat_HTTPError
		ExtractorError = Ωutils.ExtractorError
		ϒint_or_none = Ωutils.ϒint_or_none
		ϒparse_age_limit = Ωutils.ϒparse_age_limit
		ViewLiftBaseIE = λ.Cal(λ.TypeType, λ.StrLiteral("ViewLiftBaseIE"), λ.NewTuple(InfoExtractor), func() λ.Dict {
			var (
				ViewLiftBaseIE__DOMAINS_REGEX λ.Object
			)
			ViewLiftBaseIE__DOMAINS_REGEX = λ.StrLiteral("(?:(?:main\\.)?snagfilms|snagxtreme|funnyforfree|kiddovid|winnersview|(?:monumental|lax)sportsnetwork|vayafilm|failarmy|ftfnext|lnppass\\.legapallacanestro|moviespree|app\\.myoutdoortv|neoufitness|pflmma|theidentitytb)\\.com|(?:hoichoi|app\\.horseandcountry|kronon|marquee|supercrosslive)\\.tv")
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_DOMAINS_REGEX": ViewLiftBaseIE__DOMAINS_REGEX,
			})
		}())
		ViewLiftEmbedIE = λ.Cal(λ.TypeType, λ.StrLiteral("ViewLiftEmbedIE"), λ.NewTuple(ViewLiftBaseIE), func() λ.Dict {
			var (
				ViewLiftEmbedIE__VALID_URL λ.Object
			)
			ViewLiftEmbedIE__VALID_URL = λ.Mod(λ.StrLiteral("https?://(?:(?:www|embed)\\.)?(?P<domain>%s)/embed/player\\?.*\\bfilmId=(?P<id>[\\da-f]{8}-(?:[\\da-f]{4}-){3}[\\da-f]{12})"), λ.GetAttr(ViewLiftBaseIE, "_DOMAINS_REGEX", nil))
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": ViewLiftEmbedIE__VALID_URL,
			})
		}())
		ViewLiftIE = λ.Cal(λ.TypeType, λ.StrLiteral("ViewLiftIE"), λ.NewTuple(ViewLiftBaseIE), func() λ.Dict {
			var (
				ViewLiftIE__VALID_URL λ.Object
				ViewLiftIE_suitable   λ.Object
			)
			ViewLiftIE__VALID_URL = λ.Mod(λ.StrLiteral("https?://(?:www\\.)?(?P<domain>%s)(?P<path>(?:/(?:films/title|show|(?:news/)?videos?|watch))?/(?P<id>[^?#]+))"), λ.GetAttr(ViewLiftBaseIE, "_DOMAINS_REGEX", nil))
			ViewLiftIE_suitable = λ.NewFunction("suitable",
				[]λ.Param{
					{Name: "cls"},
					{Name: "url"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls = λargs[0]
						ϒurl = λargs[1]
					)
					return func() λ.Object {
						if λ.IsTrue(λ.Calm(ViewLiftEmbedIE, "suitable", ϒurl)) {
							return λ.False
						} else {
							return λ.Calm(λ.Cal(λ.SuperType, ViewLiftIE, ϒcls), "suitable", ϒurl)
						}
					}()
				})
			ViewLiftIE_suitable = λ.Cal(λ.ClassMethodType, ViewLiftIE_suitable)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_VALID_URL": ViewLiftIE__VALID_URL,
				"suitable":   ViewLiftIE_suitable,
			})
		}())
	})
}
