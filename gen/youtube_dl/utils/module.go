// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * utils/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/utils.py
 */

package utils

import (
	Ωcodecs "github.com/tenta-browser/go-video-downloader/gen/codecs"
	Ωentities "github.com/tenta-browser/go-video-downloader/gen/html/entities"
	Ωjson "github.com/tenta-browser/go-video-downloader/gen/json"
	Ωrandom "github.com/tenta-browser/go-video-downloader/gen/random"
	Ωre "github.com/tenta-browser/go-video-downloader/gen/re"
	Ωsys "github.com/tenta-browser/go-video-downloader/gen/sys"
	Ωerror "github.com/tenta-browser/go-video-downloader/gen/urllib/error"
	Ωparse "github.com/tenta-browser/go-video-downloader/gen/urllib/parse"
	Ωrequest "github.com/tenta-browser/go-video-downloader/gen/urllib/request"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωnet "github.com/tenta-browser/go-video-downloader/lib/net"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	DATE_FORMATS                      λ.Object
	DATE_FORMATS_DAY_FIRST            λ.Object
	DATE_FORMATS_MONTH_FIRST          λ.Object
	DEFAULT_OUTTMPL                   λ.Object
	DownloadError                     λ.Object
	ENGLISH_MONTH_NAMES               λ.Object
	ExtractorError                    λ.Object
	GeoRestrictedError                λ.Object
	GeoUtils                          λ.Object
	HEADRequest                       λ.Object
	HTMLAttributeParser               λ.Object
	ISO3166Utils                      λ.Object
	ISO639Utils                       λ.Object
	JSON_LD_RE                        λ.Object
	KNOWN_EXTENSIONS                  λ.Object
	MONTH_NAMES                       λ.Object
	MaxDownloadsReached               λ.Object
	NO_DEFAULT                        λ.Object
	PagedList                         λ.Object
	PostProcessingError               λ.Object
	RegexNotFoundError                λ.Object
	TV_PARENTAL_GUIDELINES            λ.Object
	US_RATINGS                        λ.Object
	UnavailableVideoError             λ.Object
	YoutubeDLError                    λ.Object
	ϒ_htmlentity_transform            λ.Object
	ϒage_restricted                   λ.Object
	ϒbase_url                         λ.Object
	ϒbool_or_none                     λ.Object
	ϒbug_reports_message              λ.Object
	ϒclean_html                       λ.Object
	ϒclean_podcast_url                λ.Object
	ϒcompat_HTMLParseError            λ.Object
	ϒcompat_HTMLParser                λ.Object
	ϒcompat_basestring                λ.Object
	ϒcompat_chr                       λ.Object
	ϒcompat_etree_fromstring          λ.Object
	ϒcompat_html_entities_html5       λ.Object
	ϒcompat_http_client               λ.Object
	ϒcompat_integer_types             λ.Object
	ϒcompat_kwargs                    λ.Object
	ϒcompat_parse_qs                  λ.Object
	ϒcompat_str                       λ.Object
	ϒcompat_urllib_parse_unquote_plus λ.Object
	ϒcompat_urllib_parse_urlencode    λ.Object
	ϒcompat_urllib_parse_urlparse     λ.Object
	ϒcompat_xpath                     λ.Object
	ϒcompiled_regex_type              λ.Object
	ϒdetermine_ext                    λ.Object
	ϒdetermine_protocol               λ.Object
	ϒdict_get                         λ.Object
	ϒencode_base_n                    λ.Object
	ϒerror_to_compat_str              λ.Object
	ϒexpand_path                      λ.Object
	ϒextract_attributes               λ.Object
	ϒfind_xpath_attr                  λ.Object
	ϒfix_xml_ampersands               λ.Object
	ϒfloat_or_none                    λ.Object
	ϒget_element_by_attribute         λ.Object
	ϒget_element_by_class             λ.Object
	ϒget_element_by_id                λ.Object
	ϒget_elements_by_attribute        λ.Object
	ϒget_elements_by_class            λ.Object
	ϒint_or_none                      λ.Object
	ϒjs_to_json                       λ.Object
	ϒlimit_length                     λ.Object
	ϒlookup_unit_table                λ.Object
	ϒlowercase_escape                 λ.Object
	ϒmerge_dicts                      λ.Object
	ϒmimetype2ext                     λ.Object
	ϒmonth_by_name                    λ.Object
	ϒorderedSet                       λ.Object
	ϒparse_age_limit                  λ.Object
	ϒparse_bitrate                    λ.Object
	ϒparse_codecs                     λ.Object
	ϒparse_count                      λ.Object
	ϒparse_duration                   λ.Object
	ϒparse_filesize                   λ.Object
	ϒparse_iso8601                    λ.Object
	ϒparse_m3u8_attributes            λ.Object
	ϒparse_resolution                 λ.Object
	ϒpreferredencoding                λ.Object
	ϒqualities                        λ.Object
	ϒrandom_birthday                  λ.Object
	ϒrandom_user_agent                λ.Object
	ϒremove_end                       λ.Object
	ϒremove_quotes                    λ.Object
	ϒsanitize_filename                λ.Object
	ϒsanitize_path                    λ.Object
	ϒsanitize_url                     λ.Object
	ϒsanitized_Request                λ.Object
	ϒsmuggle_url                      λ.Object
	ϒstd_headers                      λ.Object
	ϒstr_or_none                      λ.Object
	ϒstr_to_int                       λ.Object
	ϒstrip_jsonp                      λ.Object
	ϒstrip_or_none                    λ.Object
	ϒtry_get                          λ.Object
	ϒunescapeHTML                     λ.Object
	ϒunified_strdate                  λ.Object
	ϒunified_timestamp                λ.Object
	ϒunsmuggle_url                    λ.Object
	ϒupdate_Request                   λ.Object
	ϒupdate_url_query                 λ.Object
	ϒurl_basename                     λ.Object
	ϒurl_or_none                      λ.Object
	ϒurlencode_postdata               λ.Object
	ϒurljoin                          λ.Object
	ϒxpath_attr                       λ.Object
	ϒxpath_element                    λ.Object
	ϒxpath_text                       λ.Object
	ϒxpath_with_ns                    λ.Object
	τmp0                              λ.Object
	τmp1                              λ.Object
)

func init() {
	λ.InitModule(func() {
		ϒcompat_HTMLParseError = Ωcompat.ϒcompat_HTMLParseError
		ϒcompat_HTMLParser = Ωcompat.ϒcompat_HTMLParser
		ϒcompat_basestring = Ωcompat.ϒcompat_basestring
		ϒcompat_chr = Ωcompat.ϒcompat_chr
		ϒcompat_etree_fromstring = Ωcompat.ϒcompat_etree_fromstring
		ϒcompat_html_entities_html5 = Ωcompat.ϒcompat_html_entities_html5
		ϒcompat_http_client = Ωcompat.ϒcompat_http_client
		ϒcompat_integer_types = Ωcompat.ϒcompat_integer_types
		ϒcompat_kwargs = Ωcompat.ϒcompat_kwargs
		ϒcompat_parse_qs = Ωcompat.ϒcompat_parse_qs
		ϒcompat_str = Ωcompat.ϒcompat_str
		ϒcompat_urllib_parse_urlencode = Ωcompat.ϒcompat_urllib_parse_urlencode
		ϒcompat_urllib_parse_urlparse = Ωcompat.ϒcompat_urllib_parse_urlparse
		ϒcompat_urllib_parse_unquote_plus = Ωcompat.ϒcompat_urllib_parse_unquote_plus
		ϒcompat_xpath = Ωcompat.ϒcompat_xpath
		ϒcompiled_regex_type = λ.Cal(λ.TypeType, λ.Cal(Ωre.ϒcompile, λ.StrLiteral("")))
		ϒrandom_user_agent = λ.NewFunction("random_user_agent",
			nil,
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒ_CHROME_VERSIONS λ.Object
					ϒ_USER_AGENT_TPL  λ.Object
				)
				ϒ_USER_AGENT_TPL = λ.StrLiteral("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/%s Safari/537.36")
				ϒ_CHROME_VERSIONS = λ.NewTuple(
					λ.StrLiteral("74.0.3729.129"),
					λ.StrLiteral("76.0.3780.3"),
					λ.StrLiteral("76.0.3780.2"),
					λ.StrLiteral("74.0.3729.128"),
					λ.StrLiteral("76.0.3780.1"),
					λ.StrLiteral("76.0.3780.0"),
					λ.StrLiteral("75.0.3770.15"),
					λ.StrLiteral("74.0.3729.127"),
					λ.StrLiteral("74.0.3729.126"),
					λ.StrLiteral("76.0.3779.1"),
					λ.StrLiteral("76.0.3779.0"),
					λ.StrLiteral("75.0.3770.14"),
					λ.StrLiteral("74.0.3729.125"),
					λ.StrLiteral("76.0.3778.1"),
					λ.StrLiteral("76.0.3778.0"),
					λ.StrLiteral("75.0.3770.13"),
					λ.StrLiteral("74.0.3729.124"),
					λ.StrLiteral("74.0.3729.123"),
					λ.StrLiteral("73.0.3683.121"),
					λ.StrLiteral("76.0.3777.1"),
					λ.StrLiteral("76.0.3777.0"),
					λ.StrLiteral("75.0.3770.12"),
					λ.StrLiteral("74.0.3729.122"),
					λ.StrLiteral("76.0.3776.4"),
					λ.StrLiteral("75.0.3770.11"),
					λ.StrLiteral("74.0.3729.121"),
					λ.StrLiteral("76.0.3776.3"),
					λ.StrLiteral("76.0.3776.2"),
					λ.StrLiteral("73.0.3683.120"),
					λ.StrLiteral("74.0.3729.120"),
					λ.StrLiteral("74.0.3729.119"),
					λ.StrLiteral("74.0.3729.118"),
					λ.StrLiteral("76.0.3776.1"),
					λ.StrLiteral("76.0.3776.0"),
					λ.StrLiteral("76.0.3775.5"),
					λ.StrLiteral("75.0.3770.10"),
					λ.StrLiteral("74.0.3729.117"),
					λ.StrLiteral("76.0.3775.4"),
					λ.StrLiteral("76.0.3775.3"),
					λ.StrLiteral("74.0.3729.116"),
					λ.StrLiteral("75.0.3770.9"),
					λ.StrLiteral("76.0.3775.2"),
					λ.StrLiteral("76.0.3775.1"),
					λ.StrLiteral("76.0.3775.0"),
					λ.StrLiteral("75.0.3770.8"),
					λ.StrLiteral("74.0.3729.115"),
					λ.StrLiteral("74.0.3729.114"),
					λ.StrLiteral("76.0.3774.1"),
					λ.StrLiteral("76.0.3774.0"),
					λ.StrLiteral("75.0.3770.7"),
					λ.StrLiteral("74.0.3729.113"),
					λ.StrLiteral("74.0.3729.112"),
					λ.StrLiteral("74.0.3729.111"),
					λ.StrLiteral("76.0.3773.1"),
					λ.StrLiteral("76.0.3773.0"),
					λ.StrLiteral("75.0.3770.6"),
					λ.StrLiteral("74.0.3729.110"),
					λ.StrLiteral("74.0.3729.109"),
					λ.StrLiteral("76.0.3772.1"),
					λ.StrLiteral("76.0.3772.0"),
					λ.StrLiteral("75.0.3770.5"),
					λ.StrLiteral("74.0.3729.108"),
					λ.StrLiteral("74.0.3729.107"),
					λ.StrLiteral("76.0.3771.1"),
					λ.StrLiteral("76.0.3771.0"),
					λ.StrLiteral("75.0.3770.4"),
					λ.StrLiteral("74.0.3729.106"),
					λ.StrLiteral("74.0.3729.105"),
					λ.StrLiteral("75.0.3770.3"),
					λ.StrLiteral("74.0.3729.104"),
					λ.StrLiteral("74.0.3729.103"),
					λ.StrLiteral("74.0.3729.102"),
					λ.StrLiteral("75.0.3770.2"),
					λ.StrLiteral("74.0.3729.101"),
					λ.StrLiteral("75.0.3770.1"),
					λ.StrLiteral("75.0.3770.0"),
					λ.StrLiteral("74.0.3729.100"),
					λ.StrLiteral("75.0.3769.5"),
					λ.StrLiteral("75.0.3769.4"),
					λ.StrLiteral("74.0.3729.99"),
					λ.StrLiteral("75.0.3769.3"),
					λ.StrLiteral("75.0.3769.2"),
					λ.StrLiteral("75.0.3768.6"),
					λ.StrLiteral("74.0.3729.98"),
					λ.StrLiteral("75.0.3769.1"),
					λ.StrLiteral("75.0.3769.0"),
					λ.StrLiteral("74.0.3729.97"),
					λ.StrLiteral("73.0.3683.119"),
					λ.StrLiteral("73.0.3683.118"),
					λ.StrLiteral("74.0.3729.96"),
					λ.StrLiteral("75.0.3768.5"),
					λ.StrLiteral("75.0.3768.4"),
					λ.StrLiteral("75.0.3768.3"),
					λ.StrLiteral("75.0.3768.2"),
					λ.StrLiteral("74.0.3729.95"),
					λ.StrLiteral("74.0.3729.94"),
					λ.StrLiteral("75.0.3768.1"),
					λ.StrLiteral("75.0.3768.0"),
					λ.StrLiteral("74.0.3729.93"),
					λ.StrLiteral("74.0.3729.92"),
					λ.StrLiteral("73.0.3683.117"),
					λ.StrLiteral("74.0.3729.91"),
					λ.StrLiteral("75.0.3766.3"),
					λ.StrLiteral("74.0.3729.90"),
					λ.StrLiteral("75.0.3767.2"),
					λ.StrLiteral("75.0.3767.1"),
					λ.StrLiteral("75.0.3767.0"),
					λ.StrLiteral("74.0.3729.89"),
					λ.StrLiteral("73.0.3683.116"),
					λ.StrLiteral("75.0.3766.2"),
					λ.StrLiteral("74.0.3729.88"),
					λ.StrLiteral("75.0.3766.1"),
					λ.StrLiteral("75.0.3766.0"),
					λ.StrLiteral("74.0.3729.87"),
					λ.StrLiteral("73.0.3683.115"),
					λ.StrLiteral("74.0.3729.86"),
					λ.StrLiteral("75.0.3765.1"),
					λ.StrLiteral("75.0.3765.0"),
					λ.StrLiteral("74.0.3729.85"),
					λ.StrLiteral("73.0.3683.114"),
					λ.StrLiteral("74.0.3729.84"),
					λ.StrLiteral("75.0.3764.1"),
					λ.StrLiteral("75.0.3764.0"),
					λ.StrLiteral("74.0.3729.83"),
					λ.StrLiteral("73.0.3683.113"),
					λ.StrLiteral("75.0.3763.2"),
					λ.StrLiteral("75.0.3761.4"),
					λ.StrLiteral("74.0.3729.82"),
					λ.StrLiteral("75.0.3763.1"),
					λ.StrLiteral("75.0.3763.0"),
					λ.StrLiteral("74.0.3729.81"),
					λ.StrLiteral("73.0.3683.112"),
					λ.StrLiteral("75.0.3762.1"),
					λ.StrLiteral("75.0.3762.0"),
					λ.StrLiteral("74.0.3729.80"),
					λ.StrLiteral("75.0.3761.3"),
					λ.StrLiteral("74.0.3729.79"),
					λ.StrLiteral("73.0.3683.111"),
					λ.StrLiteral("75.0.3761.2"),
					λ.StrLiteral("74.0.3729.78"),
					λ.StrLiteral("74.0.3729.77"),
					λ.StrLiteral("75.0.3761.1"),
					λ.StrLiteral("75.0.3761.0"),
					λ.StrLiteral("73.0.3683.110"),
					λ.StrLiteral("74.0.3729.76"),
					λ.StrLiteral("74.0.3729.75"),
					λ.StrLiteral("75.0.3760.0"),
					λ.StrLiteral("74.0.3729.74"),
					λ.StrLiteral("75.0.3759.8"),
					λ.StrLiteral("75.0.3759.7"),
					λ.StrLiteral("75.0.3759.6"),
					λ.StrLiteral("74.0.3729.73"),
					λ.StrLiteral("75.0.3759.5"),
					λ.StrLiteral("74.0.3729.72"),
					λ.StrLiteral("73.0.3683.109"),
					λ.StrLiteral("75.0.3759.4"),
					λ.StrLiteral("75.0.3759.3"),
					λ.StrLiteral("74.0.3729.71"),
					λ.StrLiteral("75.0.3759.2"),
					λ.StrLiteral("74.0.3729.70"),
					λ.StrLiteral("73.0.3683.108"),
					λ.StrLiteral("74.0.3729.69"),
					λ.StrLiteral("75.0.3759.1"),
					λ.StrLiteral("75.0.3759.0"),
					λ.StrLiteral("74.0.3729.68"),
					λ.StrLiteral("73.0.3683.107"),
					λ.StrLiteral("74.0.3729.67"),
					λ.StrLiteral("75.0.3758.1"),
					λ.StrLiteral("75.0.3758.0"),
					λ.StrLiteral("74.0.3729.66"),
					λ.StrLiteral("73.0.3683.106"),
					λ.StrLiteral("74.0.3729.65"),
					λ.StrLiteral("75.0.3757.1"),
					λ.StrLiteral("75.0.3757.0"),
					λ.StrLiteral("74.0.3729.64"),
					λ.StrLiteral("73.0.3683.105"),
					λ.StrLiteral("74.0.3729.63"),
					λ.StrLiteral("75.0.3756.1"),
					λ.StrLiteral("75.0.3756.0"),
					λ.StrLiteral("74.0.3729.62"),
					λ.StrLiteral("73.0.3683.104"),
					λ.StrLiteral("75.0.3755.3"),
					λ.StrLiteral("75.0.3755.2"),
					λ.StrLiteral("73.0.3683.103"),
					λ.StrLiteral("75.0.3755.1"),
					λ.StrLiteral("75.0.3755.0"),
					λ.StrLiteral("74.0.3729.61"),
					λ.StrLiteral("73.0.3683.102"),
					λ.StrLiteral("74.0.3729.60"),
					λ.StrLiteral("75.0.3754.2"),
					λ.StrLiteral("74.0.3729.59"),
					λ.StrLiteral("75.0.3753.4"),
					λ.StrLiteral("74.0.3729.58"),
					λ.StrLiteral("75.0.3754.1"),
					λ.StrLiteral("75.0.3754.0"),
					λ.StrLiteral("74.0.3729.57"),
					λ.StrLiteral("73.0.3683.101"),
					λ.StrLiteral("75.0.3753.3"),
					λ.StrLiteral("75.0.3752.2"),
					λ.StrLiteral("75.0.3753.2"),
					λ.StrLiteral("74.0.3729.56"),
					λ.StrLiteral("75.0.3753.1"),
					λ.StrLiteral("75.0.3753.0"),
					λ.StrLiteral("74.0.3729.55"),
					λ.StrLiteral("73.0.3683.100"),
					λ.StrLiteral("74.0.3729.54"),
					λ.StrLiteral("75.0.3752.1"),
					λ.StrLiteral("75.0.3752.0"),
					λ.StrLiteral("74.0.3729.53"),
					λ.StrLiteral("73.0.3683.99"),
					λ.StrLiteral("74.0.3729.52"),
					λ.StrLiteral("75.0.3751.1"),
					λ.StrLiteral("75.0.3751.0"),
					λ.StrLiteral("74.0.3729.51"),
					λ.StrLiteral("73.0.3683.98"),
					λ.StrLiteral("74.0.3729.50"),
					λ.StrLiteral("75.0.3750.0"),
					λ.StrLiteral("74.0.3729.49"),
					λ.StrLiteral("74.0.3729.48"),
					λ.StrLiteral("74.0.3729.47"),
					λ.StrLiteral("75.0.3749.3"),
					λ.StrLiteral("74.0.3729.46"),
					λ.StrLiteral("73.0.3683.97"),
					λ.StrLiteral("75.0.3749.2"),
					λ.StrLiteral("74.0.3729.45"),
					λ.StrLiteral("75.0.3749.1"),
					λ.StrLiteral("75.0.3749.0"),
					λ.StrLiteral("74.0.3729.44"),
					λ.StrLiteral("73.0.3683.96"),
					λ.StrLiteral("74.0.3729.43"),
					λ.StrLiteral("74.0.3729.42"),
					λ.StrLiteral("75.0.3748.1"),
					λ.StrLiteral("75.0.3748.0"),
					λ.StrLiteral("74.0.3729.41"),
					λ.StrLiteral("75.0.3747.1"),
					λ.StrLiteral("73.0.3683.95"),
					λ.StrLiteral("75.0.3746.4"),
					λ.StrLiteral("74.0.3729.40"),
					λ.StrLiteral("74.0.3729.39"),
					λ.StrLiteral("75.0.3747.0"),
					λ.StrLiteral("75.0.3746.3"),
					λ.StrLiteral("75.0.3746.2"),
					λ.StrLiteral("74.0.3729.38"),
					λ.StrLiteral("75.0.3746.1"),
					λ.StrLiteral("75.0.3746.0"),
					λ.StrLiteral("74.0.3729.37"),
					λ.StrLiteral("73.0.3683.94"),
					λ.StrLiteral("75.0.3745.5"),
					λ.StrLiteral("75.0.3745.4"),
					λ.StrLiteral("75.0.3745.3"),
					λ.StrLiteral("75.0.3745.2"),
					λ.StrLiteral("74.0.3729.36"),
					λ.StrLiteral("75.0.3745.1"),
					λ.StrLiteral("75.0.3745.0"),
					λ.StrLiteral("75.0.3744.2"),
					λ.StrLiteral("74.0.3729.35"),
					λ.StrLiteral("73.0.3683.93"),
					λ.StrLiteral("74.0.3729.34"),
					λ.StrLiteral("75.0.3744.1"),
					λ.StrLiteral("75.0.3744.0"),
					λ.StrLiteral("74.0.3729.33"),
					λ.StrLiteral("73.0.3683.92"),
					λ.StrLiteral("74.0.3729.32"),
					λ.StrLiteral("74.0.3729.31"),
					λ.StrLiteral("73.0.3683.91"),
					λ.StrLiteral("75.0.3741.2"),
					λ.StrLiteral("75.0.3740.5"),
					λ.StrLiteral("74.0.3729.30"),
					λ.StrLiteral("75.0.3741.1"),
					λ.StrLiteral("75.0.3741.0"),
					λ.StrLiteral("74.0.3729.29"),
					λ.StrLiteral("75.0.3740.4"),
					λ.StrLiteral("73.0.3683.90"),
					λ.StrLiteral("74.0.3729.28"),
					λ.StrLiteral("75.0.3740.3"),
					λ.StrLiteral("73.0.3683.89"),
					λ.StrLiteral("75.0.3740.2"),
					λ.StrLiteral("74.0.3729.27"),
					λ.StrLiteral("75.0.3740.1"),
					λ.StrLiteral("75.0.3740.0"),
					λ.StrLiteral("74.0.3729.26"),
					λ.StrLiteral("73.0.3683.88"),
					λ.StrLiteral("73.0.3683.87"),
					λ.StrLiteral("74.0.3729.25"),
					λ.StrLiteral("75.0.3739.1"),
					λ.StrLiteral("75.0.3739.0"),
					λ.StrLiteral("73.0.3683.86"),
					λ.StrLiteral("74.0.3729.24"),
					λ.StrLiteral("73.0.3683.85"),
					λ.StrLiteral("75.0.3738.4"),
					λ.StrLiteral("75.0.3738.3"),
					λ.StrLiteral("75.0.3738.2"),
					λ.StrLiteral("75.0.3738.1"),
					λ.StrLiteral("75.0.3738.0"),
					λ.StrLiteral("74.0.3729.23"),
					λ.StrLiteral("73.0.3683.84"),
					λ.StrLiteral("74.0.3729.22"),
					λ.StrLiteral("74.0.3729.21"),
					λ.StrLiteral("75.0.3737.1"),
					λ.StrLiteral("75.0.3737.0"),
					λ.StrLiteral("74.0.3729.20"),
					λ.StrLiteral("73.0.3683.83"),
					λ.StrLiteral("74.0.3729.19"),
					λ.StrLiteral("75.0.3736.1"),
					λ.StrLiteral("75.0.3736.0"),
					λ.StrLiteral("74.0.3729.18"),
					λ.StrLiteral("73.0.3683.82"),
					λ.StrLiteral("74.0.3729.17"),
					λ.StrLiteral("75.0.3735.1"),
					λ.StrLiteral("75.0.3735.0"),
					λ.StrLiteral("74.0.3729.16"),
					λ.StrLiteral("73.0.3683.81"),
					λ.StrLiteral("75.0.3734.1"),
					λ.StrLiteral("75.0.3734.0"),
					λ.StrLiteral("74.0.3729.15"),
					λ.StrLiteral("73.0.3683.80"),
					λ.StrLiteral("74.0.3729.14"),
					λ.StrLiteral("75.0.3733.1"),
					λ.StrLiteral("75.0.3733.0"),
					λ.StrLiteral("75.0.3732.1"),
					λ.StrLiteral("74.0.3729.13"),
					λ.StrLiteral("74.0.3729.12"),
					λ.StrLiteral("73.0.3683.79"),
					λ.StrLiteral("74.0.3729.11"),
					λ.StrLiteral("75.0.3732.0"),
					λ.StrLiteral("74.0.3729.10"),
					λ.StrLiteral("73.0.3683.78"),
					λ.StrLiteral("74.0.3729.9"),
					λ.StrLiteral("74.0.3729.8"),
					λ.StrLiteral("74.0.3729.7"),
					λ.StrLiteral("75.0.3731.3"),
					λ.StrLiteral("75.0.3731.2"),
					λ.StrLiteral("75.0.3731.0"),
					λ.StrLiteral("74.0.3729.6"),
					λ.StrLiteral("73.0.3683.77"),
					λ.StrLiteral("73.0.3683.76"),
					λ.StrLiteral("75.0.3730.5"),
					λ.StrLiteral("75.0.3730.4"),
					λ.StrLiteral("73.0.3683.75"),
					λ.StrLiteral("74.0.3729.5"),
					λ.StrLiteral("73.0.3683.74"),
					λ.StrLiteral("75.0.3730.3"),
					λ.StrLiteral("75.0.3730.2"),
					λ.StrLiteral("74.0.3729.4"),
					λ.StrLiteral("73.0.3683.73"),
					λ.StrLiteral("73.0.3683.72"),
					λ.StrLiteral("75.0.3730.1"),
					λ.StrLiteral("75.0.3730.0"),
					λ.StrLiteral("74.0.3729.3"),
					λ.StrLiteral("73.0.3683.71"),
					λ.StrLiteral("74.0.3729.2"),
					λ.StrLiteral("73.0.3683.70"),
					λ.StrLiteral("74.0.3729.1"),
					λ.StrLiteral("74.0.3729.0"),
					λ.StrLiteral("74.0.3726.4"),
					λ.StrLiteral("73.0.3683.69"),
					λ.StrLiteral("74.0.3726.3"),
					λ.StrLiteral("74.0.3728.0"),
					λ.StrLiteral("74.0.3726.2"),
					λ.StrLiteral("73.0.3683.68"),
					λ.StrLiteral("74.0.3726.1"),
					λ.StrLiteral("74.0.3726.0"),
					λ.StrLiteral("74.0.3725.4"),
					λ.StrLiteral("73.0.3683.67"),
					λ.StrLiteral("73.0.3683.66"),
					λ.StrLiteral("74.0.3725.3"),
					λ.StrLiteral("74.0.3725.2"),
					λ.StrLiteral("74.0.3725.1"),
					λ.StrLiteral("74.0.3724.8"),
					λ.StrLiteral("74.0.3725.0"),
					λ.StrLiteral("73.0.3683.65"),
					λ.StrLiteral("74.0.3724.7"),
					λ.StrLiteral("74.0.3724.6"),
					λ.StrLiteral("74.0.3724.5"),
					λ.StrLiteral("74.0.3724.4"),
					λ.StrLiteral("74.0.3724.3"),
					λ.StrLiteral("74.0.3724.2"),
					λ.StrLiteral("74.0.3724.1"),
					λ.StrLiteral("74.0.3724.0"),
					λ.StrLiteral("73.0.3683.64"),
					λ.StrLiteral("74.0.3723.1"),
					λ.StrLiteral("74.0.3723.0"),
					λ.StrLiteral("73.0.3683.63"),
					λ.StrLiteral("74.0.3722.1"),
					λ.StrLiteral("74.0.3722.0"),
					λ.StrLiteral("73.0.3683.62"),
					λ.StrLiteral("74.0.3718.9"),
					λ.StrLiteral("74.0.3702.3"),
					λ.StrLiteral("74.0.3721.3"),
					λ.StrLiteral("74.0.3721.2"),
					λ.StrLiteral("74.0.3721.1"),
					λ.StrLiteral("74.0.3721.0"),
					λ.StrLiteral("74.0.3720.6"),
					λ.StrLiteral("73.0.3683.61"),
					λ.StrLiteral("72.0.3626.122"),
					λ.StrLiteral("73.0.3683.60"),
					λ.StrLiteral("74.0.3720.5"),
					λ.StrLiteral("72.0.3626.121"),
					λ.StrLiteral("74.0.3718.8"),
					λ.StrLiteral("74.0.3720.4"),
					λ.StrLiteral("74.0.3720.3"),
					λ.StrLiteral("74.0.3718.7"),
					λ.StrLiteral("74.0.3720.2"),
					λ.StrLiteral("74.0.3720.1"),
					λ.StrLiteral("74.0.3720.0"),
					λ.StrLiteral("74.0.3718.6"),
					λ.StrLiteral("74.0.3719.5"),
					λ.StrLiteral("73.0.3683.59"),
					λ.StrLiteral("74.0.3718.5"),
					λ.StrLiteral("74.0.3718.4"),
					λ.StrLiteral("74.0.3719.4"),
					λ.StrLiteral("74.0.3719.3"),
					λ.StrLiteral("74.0.3719.2"),
					λ.StrLiteral("74.0.3719.1"),
					λ.StrLiteral("73.0.3683.58"),
					λ.StrLiteral("74.0.3719.0"),
					λ.StrLiteral("73.0.3683.57"),
					λ.StrLiteral("73.0.3683.56"),
					λ.StrLiteral("74.0.3718.3"),
					λ.StrLiteral("73.0.3683.55"),
					λ.StrLiteral("74.0.3718.2"),
					λ.StrLiteral("74.0.3718.1"),
					λ.StrLiteral("74.0.3718.0"),
					λ.StrLiteral("73.0.3683.54"),
					λ.StrLiteral("74.0.3717.2"),
					λ.StrLiteral("73.0.3683.53"),
					λ.StrLiteral("74.0.3717.1"),
					λ.StrLiteral("74.0.3717.0"),
					λ.StrLiteral("73.0.3683.52"),
					λ.StrLiteral("74.0.3716.1"),
					λ.StrLiteral("74.0.3716.0"),
					λ.StrLiteral("73.0.3683.51"),
					λ.StrLiteral("74.0.3715.1"),
					λ.StrLiteral("74.0.3715.0"),
					λ.StrLiteral("73.0.3683.50"),
					λ.StrLiteral("74.0.3711.2"),
					λ.StrLiteral("74.0.3714.2"),
					λ.StrLiteral("74.0.3713.3"),
					λ.StrLiteral("74.0.3714.1"),
					λ.StrLiteral("74.0.3714.0"),
					λ.StrLiteral("73.0.3683.49"),
					λ.StrLiteral("74.0.3713.1"),
					λ.StrLiteral("74.0.3713.0"),
					λ.StrLiteral("72.0.3626.120"),
					λ.StrLiteral("73.0.3683.48"),
					λ.StrLiteral("74.0.3712.2"),
					λ.StrLiteral("74.0.3712.1"),
					λ.StrLiteral("74.0.3712.0"),
					λ.StrLiteral("73.0.3683.47"),
					λ.StrLiteral("72.0.3626.119"),
					λ.StrLiteral("73.0.3683.46"),
					λ.StrLiteral("74.0.3710.2"),
					λ.StrLiteral("72.0.3626.118"),
					λ.StrLiteral("74.0.3711.1"),
					λ.StrLiteral("74.0.3711.0"),
					λ.StrLiteral("73.0.3683.45"),
					λ.StrLiteral("72.0.3626.117"),
					λ.StrLiteral("74.0.3710.1"),
					λ.StrLiteral("74.0.3710.0"),
					λ.StrLiteral("73.0.3683.44"),
					λ.StrLiteral("72.0.3626.116"),
					λ.StrLiteral("74.0.3709.1"),
					λ.StrLiteral("74.0.3709.0"),
					λ.StrLiteral("74.0.3704.9"),
					λ.StrLiteral("73.0.3683.43"),
					λ.StrLiteral("72.0.3626.115"),
					λ.StrLiteral("74.0.3704.8"),
					λ.StrLiteral("74.0.3704.7"),
					λ.StrLiteral("74.0.3708.0"),
					λ.StrLiteral("74.0.3706.7"),
					λ.StrLiteral("74.0.3704.6"),
					λ.StrLiteral("73.0.3683.42"),
					λ.StrLiteral("72.0.3626.114"),
					λ.StrLiteral("74.0.3706.6"),
					λ.StrLiteral("72.0.3626.113"),
					λ.StrLiteral("74.0.3704.5"),
					λ.StrLiteral("74.0.3706.5"),
					λ.StrLiteral("74.0.3706.4"),
					λ.StrLiteral("74.0.3706.3"),
					λ.StrLiteral("74.0.3706.2"),
					λ.StrLiteral("74.0.3706.1"),
					λ.StrLiteral("74.0.3706.0"),
					λ.StrLiteral("73.0.3683.41"),
					λ.StrLiteral("72.0.3626.112"),
					λ.StrLiteral("74.0.3705.1"),
					λ.StrLiteral("74.0.3705.0"),
					λ.StrLiteral("73.0.3683.40"),
					λ.StrLiteral("72.0.3626.111"),
					λ.StrLiteral("73.0.3683.39"),
					λ.StrLiteral("74.0.3704.4"),
					λ.StrLiteral("73.0.3683.38"),
					λ.StrLiteral("74.0.3704.3"),
					λ.StrLiteral("74.0.3704.2"),
					λ.StrLiteral("74.0.3704.1"),
					λ.StrLiteral("74.0.3704.0"),
					λ.StrLiteral("73.0.3683.37"),
					λ.StrLiteral("72.0.3626.110"),
					λ.StrLiteral("72.0.3626.109"),
					λ.StrLiteral("74.0.3703.3"),
					λ.StrLiteral("74.0.3703.2"),
					λ.StrLiteral("73.0.3683.36"),
					λ.StrLiteral("74.0.3703.1"),
					λ.StrLiteral("74.0.3703.0"),
					λ.StrLiteral("73.0.3683.35"),
					λ.StrLiteral("72.0.3626.108"),
					λ.StrLiteral("74.0.3702.2"),
					λ.StrLiteral("74.0.3699.3"),
					λ.StrLiteral("74.0.3702.1"),
					λ.StrLiteral("74.0.3702.0"),
					λ.StrLiteral("73.0.3683.34"),
					λ.StrLiteral("72.0.3626.107"),
					λ.StrLiteral("73.0.3683.33"),
					λ.StrLiteral("74.0.3701.1"),
					λ.StrLiteral("74.0.3701.0"),
					λ.StrLiteral("73.0.3683.32"),
					λ.StrLiteral("73.0.3683.31"),
					λ.StrLiteral("72.0.3626.105"),
					λ.StrLiteral("74.0.3700.1"),
					λ.StrLiteral("74.0.3700.0"),
					λ.StrLiteral("73.0.3683.29"),
					λ.StrLiteral("72.0.3626.103"),
					λ.StrLiteral("74.0.3699.2"),
					λ.StrLiteral("74.0.3699.1"),
					λ.StrLiteral("74.0.3699.0"),
					λ.StrLiteral("73.0.3683.28"),
					λ.StrLiteral("72.0.3626.102"),
					λ.StrLiteral("73.0.3683.27"),
					λ.StrLiteral("73.0.3683.26"),
					λ.StrLiteral("74.0.3698.0"),
					λ.StrLiteral("74.0.3696.2"),
					λ.StrLiteral("72.0.3626.101"),
					λ.StrLiteral("73.0.3683.25"),
					λ.StrLiteral("74.0.3696.1"),
					λ.StrLiteral("74.0.3696.0"),
					λ.StrLiteral("74.0.3694.8"),
					λ.StrLiteral("72.0.3626.100"),
					λ.StrLiteral("74.0.3694.7"),
					λ.StrLiteral("74.0.3694.6"),
					λ.StrLiteral("74.0.3694.5"),
					λ.StrLiteral("74.0.3694.4"),
					λ.StrLiteral("72.0.3626.99"),
					λ.StrLiteral("72.0.3626.98"),
					λ.StrLiteral("74.0.3694.3"),
					λ.StrLiteral("73.0.3683.24"),
					λ.StrLiteral("72.0.3626.97"),
					λ.StrLiteral("72.0.3626.96"),
					λ.StrLiteral("72.0.3626.95"),
					λ.StrLiteral("73.0.3683.23"),
					λ.StrLiteral("72.0.3626.94"),
					λ.StrLiteral("73.0.3683.22"),
					λ.StrLiteral("73.0.3683.21"),
					λ.StrLiteral("72.0.3626.93"),
					λ.StrLiteral("74.0.3694.2"),
					λ.StrLiteral("72.0.3626.92"),
					λ.StrLiteral("74.0.3694.1"),
					λ.StrLiteral("74.0.3694.0"),
					λ.StrLiteral("74.0.3693.6"),
					λ.StrLiteral("73.0.3683.20"),
					λ.StrLiteral("72.0.3626.91"),
					λ.StrLiteral("74.0.3693.5"),
					λ.StrLiteral("74.0.3693.4"),
					λ.StrLiteral("74.0.3693.3"),
					λ.StrLiteral("74.0.3693.2"),
					λ.StrLiteral("73.0.3683.19"),
					λ.StrLiteral("74.0.3693.1"),
					λ.StrLiteral("74.0.3693.0"),
					λ.StrLiteral("73.0.3683.18"),
					λ.StrLiteral("72.0.3626.90"),
					λ.StrLiteral("74.0.3692.1"),
					λ.StrLiteral("74.0.3692.0"),
					λ.StrLiteral("73.0.3683.17"),
					λ.StrLiteral("72.0.3626.89"),
					λ.StrLiteral("74.0.3687.3"),
					λ.StrLiteral("74.0.3691.1"),
					λ.StrLiteral("74.0.3691.0"),
					λ.StrLiteral("73.0.3683.16"),
					λ.StrLiteral("72.0.3626.88"),
					λ.StrLiteral("72.0.3626.87"),
					λ.StrLiteral("73.0.3683.15"),
					λ.StrLiteral("74.0.3690.1"),
					λ.StrLiteral("74.0.3690.0"),
					λ.StrLiteral("73.0.3683.14"),
					λ.StrLiteral("72.0.3626.86"),
					λ.StrLiteral("73.0.3683.13"),
					λ.StrLiteral("73.0.3683.12"),
					λ.StrLiteral("74.0.3689.1"),
					λ.StrLiteral("74.0.3689.0"),
					λ.StrLiteral("73.0.3683.11"),
					λ.StrLiteral("72.0.3626.85"),
					λ.StrLiteral("73.0.3683.10"),
					λ.StrLiteral("72.0.3626.84"),
					λ.StrLiteral("73.0.3683.9"),
					λ.StrLiteral("74.0.3688.1"),
					λ.StrLiteral("74.0.3688.0"),
					λ.StrLiteral("73.0.3683.8"),
					λ.StrLiteral("72.0.3626.83"),
					λ.StrLiteral("74.0.3687.2"),
					λ.StrLiteral("74.0.3687.1"),
					λ.StrLiteral("74.0.3687.0"),
					λ.StrLiteral("73.0.3683.7"),
					λ.StrLiteral("72.0.3626.82"),
					λ.StrLiteral("74.0.3686.4"),
					λ.StrLiteral("72.0.3626.81"),
					λ.StrLiteral("74.0.3686.3"),
					λ.StrLiteral("74.0.3686.2"),
					λ.StrLiteral("74.0.3686.1"),
					λ.StrLiteral("74.0.3686.0"),
					λ.StrLiteral("73.0.3683.6"),
					λ.StrLiteral("72.0.3626.80"),
					λ.StrLiteral("74.0.3685.1"),
					λ.StrLiteral("74.0.3685.0"),
					λ.StrLiteral("73.0.3683.5"),
					λ.StrLiteral("72.0.3626.79"),
					λ.StrLiteral("74.0.3684.1"),
					λ.StrLiteral("74.0.3684.0"),
					λ.StrLiteral("73.0.3683.4"),
					λ.StrLiteral("72.0.3626.78"),
					λ.StrLiteral("72.0.3626.77"),
					λ.StrLiteral("73.0.3683.3"),
					λ.StrLiteral("73.0.3683.2"),
					λ.StrLiteral("72.0.3626.76"),
					λ.StrLiteral("73.0.3683.1"),
					λ.StrLiteral("73.0.3683.0"),
					λ.StrLiteral("72.0.3626.75"),
					λ.StrLiteral("71.0.3578.141"),
					λ.StrLiteral("73.0.3682.1"),
					λ.StrLiteral("73.0.3682.0"),
					λ.StrLiteral("72.0.3626.74"),
					λ.StrLiteral("71.0.3578.140"),
					λ.StrLiteral("73.0.3681.4"),
					λ.StrLiteral("73.0.3681.3"),
					λ.StrLiteral("73.0.3681.2"),
					λ.StrLiteral("73.0.3681.1"),
					λ.StrLiteral("73.0.3681.0"),
					λ.StrLiteral("72.0.3626.73"),
					λ.StrLiteral("71.0.3578.139"),
					λ.StrLiteral("72.0.3626.72"),
					λ.StrLiteral("72.0.3626.71"),
					λ.StrLiteral("73.0.3680.1"),
					λ.StrLiteral("73.0.3680.0"),
					λ.StrLiteral("72.0.3626.70"),
					λ.StrLiteral("71.0.3578.138"),
					λ.StrLiteral("73.0.3678.2"),
					λ.StrLiteral("73.0.3679.1"),
					λ.StrLiteral("73.0.3679.0"),
					λ.StrLiteral("72.0.3626.69"),
					λ.StrLiteral("71.0.3578.137"),
					λ.StrLiteral("73.0.3678.1"),
					λ.StrLiteral("73.0.3678.0"),
					λ.StrLiteral("71.0.3578.136"),
					λ.StrLiteral("73.0.3677.1"),
					λ.StrLiteral("73.0.3677.0"),
					λ.StrLiteral("72.0.3626.68"),
					λ.StrLiteral("72.0.3626.67"),
					λ.StrLiteral("71.0.3578.135"),
					λ.StrLiteral("73.0.3676.1"),
					λ.StrLiteral("73.0.3676.0"),
					λ.StrLiteral("73.0.3674.2"),
					λ.StrLiteral("72.0.3626.66"),
					λ.StrLiteral("71.0.3578.134"),
					λ.StrLiteral("73.0.3674.1"),
					λ.StrLiteral("73.0.3674.0"),
					λ.StrLiteral("72.0.3626.65"),
					λ.StrLiteral("71.0.3578.133"),
					λ.StrLiteral("73.0.3673.2"),
					λ.StrLiteral("73.0.3673.1"),
					λ.StrLiteral("73.0.3673.0"),
					λ.StrLiteral("72.0.3626.64"),
					λ.StrLiteral("71.0.3578.132"),
					λ.StrLiteral("72.0.3626.63"),
					λ.StrLiteral("72.0.3626.62"),
					λ.StrLiteral("72.0.3626.61"),
					λ.StrLiteral("72.0.3626.60"),
					λ.StrLiteral("73.0.3672.1"),
					λ.StrLiteral("73.0.3672.0"),
					λ.StrLiteral("72.0.3626.59"),
					λ.StrLiteral("71.0.3578.131"),
					λ.StrLiteral("73.0.3671.3"),
					λ.StrLiteral("73.0.3671.2"),
					λ.StrLiteral("73.0.3671.1"),
					λ.StrLiteral("73.0.3671.0"),
					λ.StrLiteral("72.0.3626.58"),
					λ.StrLiteral("71.0.3578.130"),
					λ.StrLiteral("73.0.3670.1"),
					λ.StrLiteral("73.0.3670.0"),
					λ.StrLiteral("72.0.3626.57"),
					λ.StrLiteral("71.0.3578.129"),
					λ.StrLiteral("73.0.3669.1"),
					λ.StrLiteral("73.0.3669.0"),
					λ.StrLiteral("72.0.3626.56"),
					λ.StrLiteral("71.0.3578.128"),
					λ.StrLiteral("73.0.3668.2"),
					λ.StrLiteral("73.0.3668.1"),
					λ.StrLiteral("73.0.3668.0"),
					λ.StrLiteral("72.0.3626.55"),
					λ.StrLiteral("71.0.3578.127"),
					λ.StrLiteral("73.0.3667.2"),
					λ.StrLiteral("73.0.3667.1"),
					λ.StrLiteral("73.0.3667.0"),
					λ.StrLiteral("72.0.3626.54"),
					λ.StrLiteral("71.0.3578.126"),
					λ.StrLiteral("73.0.3666.1"),
					λ.StrLiteral("73.0.3666.0"),
					λ.StrLiteral("72.0.3626.53"),
					λ.StrLiteral("71.0.3578.125"),
					λ.StrLiteral("73.0.3665.4"),
					λ.StrLiteral("73.0.3665.3"),
					λ.StrLiteral("72.0.3626.52"),
					λ.StrLiteral("73.0.3665.2"),
					λ.StrLiteral("73.0.3664.4"),
					λ.StrLiteral("73.0.3665.1"),
					λ.StrLiteral("73.0.3665.0"),
					λ.StrLiteral("72.0.3626.51"),
					λ.StrLiteral("71.0.3578.124"),
					λ.StrLiteral("72.0.3626.50"),
					λ.StrLiteral("73.0.3664.3"),
					λ.StrLiteral("73.0.3664.2"),
					λ.StrLiteral("73.0.3664.1"),
					λ.StrLiteral("73.0.3664.0"),
					λ.StrLiteral("73.0.3663.2"),
					λ.StrLiteral("72.0.3626.49"),
					λ.StrLiteral("71.0.3578.123"),
					λ.StrLiteral("73.0.3663.1"),
					λ.StrLiteral("73.0.3663.0"),
					λ.StrLiteral("72.0.3626.48"),
					λ.StrLiteral("71.0.3578.122"),
					λ.StrLiteral("73.0.3662.1"),
					λ.StrLiteral("73.0.3662.0"),
					λ.StrLiteral("72.0.3626.47"),
					λ.StrLiteral("71.0.3578.121"),
					λ.StrLiteral("73.0.3661.1"),
					λ.StrLiteral("72.0.3626.46"),
					λ.StrLiteral("73.0.3661.0"),
					λ.StrLiteral("72.0.3626.45"),
					λ.StrLiteral("71.0.3578.120"),
					λ.StrLiteral("73.0.3660.2"),
					λ.StrLiteral("73.0.3660.1"),
					λ.StrLiteral("73.0.3660.0"),
					λ.StrLiteral("72.0.3626.44"),
					λ.StrLiteral("71.0.3578.119"),
					λ.StrLiteral("73.0.3659.1"),
					λ.StrLiteral("73.0.3659.0"),
					λ.StrLiteral("72.0.3626.43"),
					λ.StrLiteral("71.0.3578.118"),
					λ.StrLiteral("73.0.3658.1"),
					λ.StrLiteral("73.0.3658.0"),
					λ.StrLiteral("72.0.3626.42"),
					λ.StrLiteral("71.0.3578.117"),
					λ.StrLiteral("73.0.3657.1"),
					λ.StrLiteral("73.0.3657.0"),
					λ.StrLiteral("72.0.3626.41"),
					λ.StrLiteral("71.0.3578.116"),
					λ.StrLiteral("73.0.3656.1"),
					λ.StrLiteral("73.0.3656.0"),
					λ.StrLiteral("72.0.3626.40"),
					λ.StrLiteral("71.0.3578.115"),
					λ.StrLiteral("73.0.3655.1"),
					λ.StrLiteral("73.0.3655.0"),
					λ.StrLiteral("72.0.3626.39"),
					λ.StrLiteral("71.0.3578.114"),
					λ.StrLiteral("73.0.3654.1"),
					λ.StrLiteral("73.0.3654.0"),
					λ.StrLiteral("72.0.3626.38"),
					λ.StrLiteral("71.0.3578.113"),
					λ.StrLiteral("73.0.3653.1"),
					λ.StrLiteral("73.0.3653.0"),
					λ.StrLiteral("72.0.3626.37"),
					λ.StrLiteral("71.0.3578.112"),
					λ.StrLiteral("73.0.3652.1"),
					λ.StrLiteral("73.0.3652.0"),
					λ.StrLiteral("72.0.3626.36"),
					λ.StrLiteral("71.0.3578.111"),
					λ.StrLiteral("73.0.3651.1"),
					λ.StrLiteral("73.0.3651.0"),
					λ.StrLiteral("72.0.3626.35"),
					λ.StrLiteral("71.0.3578.110"),
					λ.StrLiteral("73.0.3650.1"),
					λ.StrLiteral("73.0.3650.0"),
					λ.StrLiteral("72.0.3626.34"),
					λ.StrLiteral("71.0.3578.109"),
					λ.StrLiteral("73.0.3649.1"),
					λ.StrLiteral("73.0.3649.0"),
					λ.StrLiteral("72.0.3626.33"),
					λ.StrLiteral("71.0.3578.108"),
					λ.StrLiteral("73.0.3648.2"),
					λ.StrLiteral("73.0.3648.1"),
					λ.StrLiteral("73.0.3648.0"),
					λ.StrLiteral("72.0.3626.32"),
					λ.StrLiteral("71.0.3578.107"),
					λ.StrLiteral("73.0.3647.2"),
					λ.StrLiteral("73.0.3647.1"),
					λ.StrLiteral("73.0.3647.0"),
					λ.StrLiteral("72.0.3626.31"),
					λ.StrLiteral("71.0.3578.106"),
					λ.StrLiteral("73.0.3635.3"),
					λ.StrLiteral("73.0.3646.2"),
					λ.StrLiteral("73.0.3646.1"),
					λ.StrLiteral("73.0.3646.0"),
					λ.StrLiteral("72.0.3626.30"),
					λ.StrLiteral("71.0.3578.105"),
					λ.StrLiteral("72.0.3626.29"),
					λ.StrLiteral("73.0.3645.2"),
					λ.StrLiteral("73.0.3645.1"),
					λ.StrLiteral("73.0.3645.0"),
					λ.StrLiteral("72.0.3626.28"),
					λ.StrLiteral("71.0.3578.104"),
					λ.StrLiteral("72.0.3626.27"),
					λ.StrLiteral("72.0.3626.26"),
					λ.StrLiteral("72.0.3626.25"),
					λ.StrLiteral("72.0.3626.24"),
					λ.StrLiteral("73.0.3644.0"),
					λ.StrLiteral("73.0.3643.2"),
					λ.StrLiteral("72.0.3626.23"),
					λ.StrLiteral("71.0.3578.103"),
					λ.StrLiteral("73.0.3643.1"),
					λ.StrLiteral("73.0.3643.0"),
					λ.StrLiteral("72.0.3626.22"),
					λ.StrLiteral("71.0.3578.102"),
					λ.StrLiteral("73.0.3642.1"),
					λ.StrLiteral("73.0.3642.0"),
					λ.StrLiteral("72.0.3626.21"),
					λ.StrLiteral("71.0.3578.101"),
					λ.StrLiteral("73.0.3641.1"),
					λ.StrLiteral("73.0.3641.0"),
					λ.StrLiteral("72.0.3626.20"),
					λ.StrLiteral("71.0.3578.100"),
					λ.StrLiteral("72.0.3626.19"),
					λ.StrLiteral("73.0.3640.1"),
					λ.StrLiteral("73.0.3640.0"),
					λ.StrLiteral("72.0.3626.18"),
					λ.StrLiteral("73.0.3639.1"),
					λ.StrLiteral("71.0.3578.99"),
					λ.StrLiteral("73.0.3639.0"),
					λ.StrLiteral("72.0.3626.17"),
					λ.StrLiteral("73.0.3638.2"),
					λ.StrLiteral("72.0.3626.16"),
					λ.StrLiteral("73.0.3638.1"),
					λ.StrLiteral("73.0.3638.0"),
					λ.StrLiteral("72.0.3626.15"),
					λ.StrLiteral("71.0.3578.98"),
					λ.StrLiteral("73.0.3635.2"),
					λ.StrLiteral("71.0.3578.97"),
					λ.StrLiteral("73.0.3637.1"),
					λ.StrLiteral("73.0.3637.0"),
					λ.StrLiteral("72.0.3626.14"),
					λ.StrLiteral("71.0.3578.96"),
					λ.StrLiteral("71.0.3578.95"),
					λ.StrLiteral("72.0.3626.13"),
					λ.StrLiteral("71.0.3578.94"),
					λ.StrLiteral("73.0.3636.2"),
					λ.StrLiteral("71.0.3578.93"),
					λ.StrLiteral("73.0.3636.1"),
					λ.StrLiteral("73.0.3636.0"),
					λ.StrLiteral("72.0.3626.12"),
					λ.StrLiteral("71.0.3578.92"),
					λ.StrLiteral("73.0.3635.1"),
					λ.StrLiteral("73.0.3635.0"),
					λ.StrLiteral("72.0.3626.11"),
					λ.StrLiteral("71.0.3578.91"),
					λ.StrLiteral("73.0.3634.2"),
					λ.StrLiteral("73.0.3634.1"),
					λ.StrLiteral("73.0.3634.0"),
					λ.StrLiteral("72.0.3626.10"),
					λ.StrLiteral("71.0.3578.90"),
					λ.StrLiteral("71.0.3578.89"),
					λ.StrLiteral("73.0.3633.2"),
					λ.StrLiteral("73.0.3633.1"),
					λ.StrLiteral("73.0.3633.0"),
					λ.StrLiteral("72.0.3610.4"),
					λ.StrLiteral("72.0.3626.9"),
					λ.StrLiteral("71.0.3578.88"),
					λ.StrLiteral("73.0.3632.5"),
					λ.StrLiteral("73.0.3632.4"),
					λ.StrLiteral("73.0.3632.3"),
					λ.StrLiteral("73.0.3632.2"),
					λ.StrLiteral("73.0.3632.1"),
					λ.StrLiteral("73.0.3632.0"),
					λ.StrLiteral("72.0.3626.8"),
					λ.StrLiteral("71.0.3578.87"),
					λ.StrLiteral("73.0.3631.2"),
					λ.StrLiteral("73.0.3631.1"),
					λ.StrLiteral("73.0.3631.0"),
					λ.StrLiteral("72.0.3626.7"),
					λ.StrLiteral("71.0.3578.86"),
					λ.StrLiteral("72.0.3626.6"),
					λ.StrLiteral("73.0.3630.1"),
					λ.StrLiteral("73.0.3630.0"),
					λ.StrLiteral("72.0.3626.5"),
					λ.StrLiteral("71.0.3578.85"),
					λ.StrLiteral("72.0.3626.4"),
					λ.StrLiteral("73.0.3628.3"),
					λ.StrLiteral("73.0.3628.2"),
					λ.StrLiteral("73.0.3629.1"),
					λ.StrLiteral("73.0.3629.0"),
					λ.StrLiteral("72.0.3626.3"),
					λ.StrLiteral("71.0.3578.84"),
					λ.StrLiteral("73.0.3628.1"),
					λ.StrLiteral("73.0.3628.0"),
					λ.StrLiteral("71.0.3578.83"),
					λ.StrLiteral("73.0.3627.1"),
					λ.StrLiteral("73.0.3627.0"),
					λ.StrLiteral("72.0.3626.2"),
					λ.StrLiteral("71.0.3578.82"),
					λ.StrLiteral("71.0.3578.81"),
					λ.StrLiteral("71.0.3578.80"),
					λ.StrLiteral("72.0.3626.1"),
					λ.StrLiteral("72.0.3626.0"),
					λ.StrLiteral("71.0.3578.79"),
					λ.StrLiteral("70.0.3538.124"),
					λ.StrLiteral("71.0.3578.78"),
					λ.StrLiteral("72.0.3623.4"),
					λ.StrLiteral("72.0.3625.2"),
					λ.StrLiteral("72.0.3625.1"),
					λ.StrLiteral("72.0.3625.0"),
					λ.StrLiteral("71.0.3578.77"),
					λ.StrLiteral("70.0.3538.123"),
					λ.StrLiteral("72.0.3624.4"),
					λ.StrLiteral("72.0.3624.3"),
					λ.StrLiteral("72.0.3624.2"),
					λ.StrLiteral("71.0.3578.76"),
					λ.StrLiteral("72.0.3624.1"),
					λ.StrLiteral("72.0.3624.0"),
					λ.StrLiteral("72.0.3623.3"),
					λ.StrLiteral("71.0.3578.75"),
					λ.StrLiteral("70.0.3538.122"),
					λ.StrLiteral("71.0.3578.74"),
					λ.StrLiteral("72.0.3623.2"),
					λ.StrLiteral("72.0.3610.3"),
					λ.StrLiteral("72.0.3623.1"),
					λ.StrLiteral("72.0.3623.0"),
					λ.StrLiteral("72.0.3622.3"),
					λ.StrLiteral("72.0.3622.2"),
					λ.StrLiteral("71.0.3578.73"),
					λ.StrLiteral("70.0.3538.121"),
					λ.StrLiteral("72.0.3622.1"),
					λ.StrLiteral("72.0.3622.0"),
					λ.StrLiteral("71.0.3578.72"),
					λ.StrLiteral("70.0.3538.120"),
					λ.StrLiteral("72.0.3621.1"),
					λ.StrLiteral("72.0.3621.0"),
					λ.StrLiteral("71.0.3578.71"),
					λ.StrLiteral("70.0.3538.119"),
					λ.StrLiteral("72.0.3620.1"),
					λ.StrLiteral("72.0.3620.0"),
					λ.StrLiteral("71.0.3578.70"),
					λ.StrLiteral("70.0.3538.118"),
					λ.StrLiteral("71.0.3578.69"),
					λ.StrLiteral("72.0.3619.1"),
					λ.StrLiteral("72.0.3619.0"),
					λ.StrLiteral("71.0.3578.68"),
					λ.StrLiteral("70.0.3538.117"),
					λ.StrLiteral("71.0.3578.67"),
					λ.StrLiteral("72.0.3618.1"),
					λ.StrLiteral("72.0.3618.0"),
					λ.StrLiteral("71.0.3578.66"),
					λ.StrLiteral("70.0.3538.116"),
					λ.StrLiteral("72.0.3617.1"),
					λ.StrLiteral("72.0.3617.0"),
					λ.StrLiteral("71.0.3578.65"),
					λ.StrLiteral("70.0.3538.115"),
					λ.StrLiteral("72.0.3602.3"),
					λ.StrLiteral("71.0.3578.64"),
					λ.StrLiteral("72.0.3616.1"),
					λ.StrLiteral("72.0.3616.0"),
					λ.StrLiteral("71.0.3578.63"),
					λ.StrLiteral("70.0.3538.114"),
					λ.StrLiteral("71.0.3578.62"),
					λ.StrLiteral("72.0.3615.1"),
					λ.StrLiteral("72.0.3615.0"),
					λ.StrLiteral("71.0.3578.61"),
					λ.StrLiteral("70.0.3538.113"),
					λ.StrLiteral("72.0.3614.1"),
					λ.StrLiteral("72.0.3614.0"),
					λ.StrLiteral("71.0.3578.60"),
					λ.StrLiteral("70.0.3538.112"),
					λ.StrLiteral("72.0.3613.1"),
					λ.StrLiteral("72.0.3613.0"),
					λ.StrLiteral("71.0.3578.59"),
					λ.StrLiteral("70.0.3538.111"),
					λ.StrLiteral("72.0.3612.2"),
					λ.StrLiteral("72.0.3612.1"),
					λ.StrLiteral("72.0.3612.0"),
					λ.StrLiteral("70.0.3538.110"),
					λ.StrLiteral("71.0.3578.58"),
					λ.StrLiteral("70.0.3538.109"),
					λ.StrLiteral("72.0.3611.2"),
					λ.StrLiteral("72.0.3611.1"),
					λ.StrLiteral("72.0.3611.0"),
					λ.StrLiteral("71.0.3578.57"),
					λ.StrLiteral("70.0.3538.108"),
					λ.StrLiteral("72.0.3610.2"),
					λ.StrLiteral("71.0.3578.56"),
					λ.StrLiteral("71.0.3578.55"),
					λ.StrLiteral("72.0.3610.1"),
					λ.StrLiteral("72.0.3610.0"),
					λ.StrLiteral("71.0.3578.54"),
					λ.StrLiteral("70.0.3538.107"),
					λ.StrLiteral("71.0.3578.53"),
					λ.StrLiteral("72.0.3609.3"),
					λ.StrLiteral("71.0.3578.52"),
					λ.StrLiteral("72.0.3609.2"),
					λ.StrLiteral("71.0.3578.51"),
					λ.StrLiteral("72.0.3608.5"),
					λ.StrLiteral("72.0.3609.1"),
					λ.StrLiteral("72.0.3609.0"),
					λ.StrLiteral("71.0.3578.50"),
					λ.StrLiteral("70.0.3538.106"),
					λ.StrLiteral("72.0.3608.4"),
					λ.StrLiteral("72.0.3608.3"),
					λ.StrLiteral("72.0.3608.2"),
					λ.StrLiteral("71.0.3578.49"),
					λ.StrLiteral("72.0.3608.1"),
					λ.StrLiteral("72.0.3608.0"),
					λ.StrLiteral("70.0.3538.105"),
					λ.StrLiteral("71.0.3578.48"),
					λ.StrLiteral("72.0.3607.1"),
					λ.StrLiteral("72.0.3607.0"),
					λ.StrLiteral("71.0.3578.47"),
					λ.StrLiteral("70.0.3538.104"),
					λ.StrLiteral("72.0.3606.2"),
					λ.StrLiteral("72.0.3606.1"),
					λ.StrLiteral("72.0.3606.0"),
					λ.StrLiteral("71.0.3578.46"),
					λ.StrLiteral("70.0.3538.103"),
					λ.StrLiteral("70.0.3538.102"),
					λ.StrLiteral("72.0.3605.3"),
					λ.StrLiteral("72.0.3605.2"),
					λ.StrLiteral("72.0.3605.1"),
					λ.StrLiteral("72.0.3605.0"),
					λ.StrLiteral("71.0.3578.45"),
					λ.StrLiteral("70.0.3538.101"),
					λ.StrLiteral("71.0.3578.44"),
					λ.StrLiteral("71.0.3578.43"),
					λ.StrLiteral("70.0.3538.100"),
					λ.StrLiteral("70.0.3538.99"),
					λ.StrLiteral("71.0.3578.42"),
					λ.StrLiteral("72.0.3604.1"),
					λ.StrLiteral("72.0.3604.0"),
					λ.StrLiteral("71.0.3578.41"),
					λ.StrLiteral("70.0.3538.98"),
					λ.StrLiteral("71.0.3578.40"),
					λ.StrLiteral("72.0.3603.2"),
					λ.StrLiteral("72.0.3603.1"),
					λ.StrLiteral("72.0.3603.0"),
					λ.StrLiteral("71.0.3578.39"),
					λ.StrLiteral("70.0.3538.97"),
					λ.StrLiteral("72.0.3602.2"),
					λ.StrLiteral("71.0.3578.38"),
					λ.StrLiteral("71.0.3578.37"),
					λ.StrLiteral("72.0.3602.1"),
					λ.StrLiteral("72.0.3602.0"),
					λ.StrLiteral("71.0.3578.36"),
					λ.StrLiteral("70.0.3538.96"),
					λ.StrLiteral("72.0.3601.1"),
					λ.StrLiteral("72.0.3601.0"),
					λ.StrLiteral("71.0.3578.35"),
					λ.StrLiteral("70.0.3538.95"),
					λ.StrLiteral("72.0.3600.1"),
					λ.StrLiteral("72.0.3600.0"),
					λ.StrLiteral("71.0.3578.34"),
					λ.StrLiteral("70.0.3538.94"),
					λ.StrLiteral("72.0.3599.3"),
					λ.StrLiteral("72.0.3599.2"),
					λ.StrLiteral("72.0.3599.1"),
					λ.StrLiteral("72.0.3599.0"),
					λ.StrLiteral("71.0.3578.33"),
					λ.StrLiteral("70.0.3538.93"),
					λ.StrLiteral("72.0.3598.1"),
					λ.StrLiteral("72.0.3598.0"),
					λ.StrLiteral("71.0.3578.32"),
					λ.StrLiteral("70.0.3538.87"),
					λ.StrLiteral("72.0.3597.1"),
					λ.StrLiteral("72.0.3597.0"),
					λ.StrLiteral("72.0.3596.2"),
					λ.StrLiteral("71.0.3578.31"),
					λ.StrLiteral("70.0.3538.86"),
					λ.StrLiteral("71.0.3578.30"),
					λ.StrLiteral("71.0.3578.29"),
					λ.StrLiteral("72.0.3596.1"),
					λ.StrLiteral("72.0.3596.0"),
					λ.StrLiteral("71.0.3578.28"),
					λ.StrLiteral("70.0.3538.85"),
					λ.StrLiteral("72.0.3595.2"),
					λ.StrLiteral("72.0.3591.3"),
					λ.StrLiteral("72.0.3595.1"),
					λ.StrLiteral("72.0.3595.0"),
					λ.StrLiteral("71.0.3578.27"),
					λ.StrLiteral("70.0.3538.84"),
					λ.StrLiteral("72.0.3594.1"),
					λ.StrLiteral("72.0.3594.0"),
					λ.StrLiteral("71.0.3578.26"),
					λ.StrLiteral("70.0.3538.83"),
					λ.StrLiteral("72.0.3593.2"),
					λ.StrLiteral("72.0.3593.1"),
					λ.StrLiteral("72.0.3593.0"),
					λ.StrLiteral("71.0.3578.25"),
					λ.StrLiteral("70.0.3538.82"),
					λ.StrLiteral("72.0.3589.3"),
					λ.StrLiteral("72.0.3592.2"),
					λ.StrLiteral("72.0.3592.1"),
					λ.StrLiteral("72.0.3592.0"),
					λ.StrLiteral("71.0.3578.24"),
					λ.StrLiteral("72.0.3589.2"),
					λ.StrLiteral("70.0.3538.81"),
					λ.StrLiteral("70.0.3538.80"),
					λ.StrLiteral("72.0.3591.2"),
					λ.StrLiteral("72.0.3591.1"),
					λ.StrLiteral("72.0.3591.0"),
					λ.StrLiteral("71.0.3578.23"),
					λ.StrLiteral("70.0.3538.79"),
					λ.StrLiteral("71.0.3578.22"),
					λ.StrLiteral("72.0.3590.1"),
					λ.StrLiteral("72.0.3590.0"),
					λ.StrLiteral("71.0.3578.21"),
					λ.StrLiteral("70.0.3538.78"),
					λ.StrLiteral("70.0.3538.77"),
					λ.StrLiteral("72.0.3589.1"),
					λ.StrLiteral("72.0.3589.0"),
					λ.StrLiteral("71.0.3578.20"),
					λ.StrLiteral("70.0.3538.76"),
					λ.StrLiteral("71.0.3578.19"),
					λ.StrLiteral("70.0.3538.75"),
					λ.StrLiteral("72.0.3588.1"),
					λ.StrLiteral("72.0.3588.0"),
					λ.StrLiteral("71.0.3578.18"),
					λ.StrLiteral("70.0.3538.74"),
					λ.StrLiteral("72.0.3586.2"),
					λ.StrLiteral("72.0.3587.0"),
					λ.StrLiteral("71.0.3578.17"),
					λ.StrLiteral("70.0.3538.73"),
					λ.StrLiteral("72.0.3586.1"),
					λ.StrLiteral("72.0.3586.0"),
					λ.StrLiteral("71.0.3578.16"),
					λ.StrLiteral("70.0.3538.72"),
					λ.StrLiteral("72.0.3585.1"),
					λ.StrLiteral("72.0.3585.0"),
					λ.StrLiteral("71.0.3578.15"),
					λ.StrLiteral("70.0.3538.71"),
					λ.StrLiteral("71.0.3578.14"),
					λ.StrLiteral("72.0.3584.1"),
					λ.StrLiteral("72.0.3584.0"),
					λ.StrLiteral("71.0.3578.13"),
					λ.StrLiteral("70.0.3538.70"),
					λ.StrLiteral("72.0.3583.2"),
					λ.StrLiteral("71.0.3578.12"),
					λ.StrLiteral("72.0.3583.1"),
					λ.StrLiteral("72.0.3583.0"),
					λ.StrLiteral("71.0.3578.11"),
					λ.StrLiteral("70.0.3538.69"),
					λ.StrLiteral("71.0.3578.10"),
					λ.StrLiteral("72.0.3582.0"),
					λ.StrLiteral("72.0.3581.4"),
					λ.StrLiteral("71.0.3578.9"),
					λ.StrLiteral("70.0.3538.67"),
					λ.StrLiteral("72.0.3581.3"),
					λ.StrLiteral("72.0.3581.2"),
					λ.StrLiteral("72.0.3581.1"),
					λ.StrLiteral("72.0.3581.0"),
					λ.StrLiteral("71.0.3578.8"),
					λ.StrLiteral("70.0.3538.66"),
					λ.StrLiteral("72.0.3580.1"),
					λ.StrLiteral("72.0.3580.0"),
					λ.StrLiteral("71.0.3578.7"),
					λ.StrLiteral("70.0.3538.65"),
					λ.StrLiteral("71.0.3578.6"),
					λ.StrLiteral("72.0.3579.1"),
					λ.StrLiteral("72.0.3579.0"),
					λ.StrLiteral("71.0.3578.5"),
					λ.StrLiteral("70.0.3538.64"),
					λ.StrLiteral("71.0.3578.4"),
					λ.StrLiteral("71.0.3578.3"),
					λ.StrLiteral("71.0.3578.2"),
					λ.StrLiteral("71.0.3578.1"),
					λ.StrLiteral("71.0.3578.0"),
					λ.StrLiteral("70.0.3538.63"),
					λ.StrLiteral("69.0.3497.128"),
					λ.StrLiteral("70.0.3538.62"),
					λ.StrLiteral("70.0.3538.61"),
					λ.StrLiteral("70.0.3538.60"),
					λ.StrLiteral("70.0.3538.59"),
					λ.StrLiteral("71.0.3577.1"),
					λ.StrLiteral("71.0.3577.0"),
					λ.StrLiteral("70.0.3538.58"),
					λ.StrLiteral("69.0.3497.127"),
					λ.StrLiteral("71.0.3576.2"),
					λ.StrLiteral("71.0.3576.1"),
					λ.StrLiteral("71.0.3576.0"),
					λ.StrLiteral("70.0.3538.57"),
					λ.StrLiteral("70.0.3538.56"),
					λ.StrLiteral("71.0.3575.2"),
					λ.StrLiteral("70.0.3538.55"),
					λ.StrLiteral("69.0.3497.126"),
					λ.StrLiteral("70.0.3538.54"),
					λ.StrLiteral("71.0.3575.1"),
					λ.StrLiteral("71.0.3575.0"),
					λ.StrLiteral("71.0.3574.1"),
					λ.StrLiteral("71.0.3574.0"),
					λ.StrLiteral("70.0.3538.53"),
					λ.StrLiteral("69.0.3497.125"),
					λ.StrLiteral("70.0.3538.52"),
					λ.StrLiteral("71.0.3573.1"),
					λ.StrLiteral("71.0.3573.0"),
					λ.StrLiteral("70.0.3538.51"),
					λ.StrLiteral("69.0.3497.124"),
					λ.StrLiteral("71.0.3572.1"),
					λ.StrLiteral("71.0.3572.0"),
					λ.StrLiteral("70.0.3538.50"),
					λ.StrLiteral("69.0.3497.123"),
					λ.StrLiteral("71.0.3571.2"),
					λ.StrLiteral("70.0.3538.49"),
					λ.StrLiteral("69.0.3497.122"),
					λ.StrLiteral("71.0.3571.1"),
					λ.StrLiteral("71.0.3571.0"),
					λ.StrLiteral("70.0.3538.48"),
					λ.StrLiteral("69.0.3497.121"),
					λ.StrLiteral("71.0.3570.1"),
					λ.StrLiteral("71.0.3570.0"),
					λ.StrLiteral("70.0.3538.47"),
					λ.StrLiteral("69.0.3497.120"),
					λ.StrLiteral("71.0.3568.2"),
					λ.StrLiteral("71.0.3569.1"),
					λ.StrLiteral("71.0.3569.0"),
					λ.StrLiteral("70.0.3538.46"),
					λ.StrLiteral("69.0.3497.119"),
					λ.StrLiteral("70.0.3538.45"),
					λ.StrLiteral("71.0.3568.1"),
					λ.StrLiteral("71.0.3568.0"),
					λ.StrLiteral("70.0.3538.44"),
					λ.StrLiteral("69.0.3497.118"),
					λ.StrLiteral("70.0.3538.43"),
					λ.StrLiteral("70.0.3538.42"),
					λ.StrLiteral("71.0.3567.1"),
					λ.StrLiteral("71.0.3567.0"),
					λ.StrLiteral("70.0.3538.41"),
					λ.StrLiteral("69.0.3497.117"),
					λ.StrLiteral("71.0.3566.1"),
					λ.StrLiteral("71.0.3566.0"),
					λ.StrLiteral("70.0.3538.40"),
					λ.StrLiteral("69.0.3497.116"),
					λ.StrLiteral("71.0.3565.1"),
					λ.StrLiteral("71.0.3565.0"),
					λ.StrLiteral("70.0.3538.39"),
					λ.StrLiteral("69.0.3497.115"),
					λ.StrLiteral("71.0.3564.1"),
					λ.StrLiteral("71.0.3564.0"),
					λ.StrLiteral("70.0.3538.38"),
					λ.StrLiteral("69.0.3497.114"),
					λ.StrLiteral("71.0.3563.0"),
					λ.StrLiteral("71.0.3562.2"),
					λ.StrLiteral("70.0.3538.37"),
					λ.StrLiteral("69.0.3497.113"),
					λ.StrLiteral("70.0.3538.36"),
					λ.StrLiteral("70.0.3538.35"),
					λ.StrLiteral("71.0.3562.1"),
					λ.StrLiteral("71.0.3562.0"),
					λ.StrLiteral("70.0.3538.34"),
					λ.StrLiteral("69.0.3497.112"),
					λ.StrLiteral("70.0.3538.33"),
					λ.StrLiteral("71.0.3561.1"),
					λ.StrLiteral("71.0.3561.0"),
					λ.StrLiteral("70.0.3538.32"),
					λ.StrLiteral("69.0.3497.111"),
					λ.StrLiteral("71.0.3559.6"),
					λ.StrLiteral("71.0.3560.1"),
					λ.StrLiteral("71.0.3560.0"),
					λ.StrLiteral("71.0.3559.5"),
					λ.StrLiteral("71.0.3559.4"),
					λ.StrLiteral("70.0.3538.31"),
					λ.StrLiteral("69.0.3497.110"),
					λ.StrLiteral("71.0.3559.3"),
					λ.StrLiteral("70.0.3538.30"),
					λ.StrLiteral("69.0.3497.109"),
					λ.StrLiteral("71.0.3559.2"),
					λ.StrLiteral("71.0.3559.1"),
					λ.StrLiteral("71.0.3559.0"),
					λ.StrLiteral("70.0.3538.29"),
					λ.StrLiteral("69.0.3497.108"),
					λ.StrLiteral("71.0.3558.2"),
					λ.StrLiteral("71.0.3558.1"),
					λ.StrLiteral("71.0.3558.0"),
					λ.StrLiteral("70.0.3538.28"),
					λ.StrLiteral("69.0.3497.107"),
					λ.StrLiteral("71.0.3557.2"),
					λ.StrLiteral("71.0.3557.1"),
					λ.StrLiteral("71.0.3557.0"),
					λ.StrLiteral("70.0.3538.27"),
					λ.StrLiteral("69.0.3497.106"),
					λ.StrLiteral("71.0.3554.4"),
					λ.StrLiteral("70.0.3538.26"),
					λ.StrLiteral("71.0.3556.1"),
					λ.StrLiteral("71.0.3556.0"),
					λ.StrLiteral("70.0.3538.25"),
					λ.StrLiteral("71.0.3554.3"),
					λ.StrLiteral("69.0.3497.105"),
					λ.StrLiteral("71.0.3554.2"),
					λ.StrLiteral("70.0.3538.24"),
					λ.StrLiteral("69.0.3497.104"),
					λ.StrLiteral("71.0.3555.2"),
					λ.StrLiteral("70.0.3538.23"),
					λ.StrLiteral("71.0.3555.1"),
					λ.StrLiteral("71.0.3555.0"),
					λ.StrLiteral("70.0.3538.22"),
					λ.StrLiteral("69.0.3497.103"),
					λ.StrLiteral("71.0.3554.1"),
					λ.StrLiteral("71.0.3554.0"),
					λ.StrLiteral("70.0.3538.21"),
					λ.StrLiteral("69.0.3497.102"),
					λ.StrLiteral("71.0.3553.3"),
					λ.StrLiteral("70.0.3538.20"),
					λ.StrLiteral("69.0.3497.101"),
					λ.StrLiteral("71.0.3553.2"),
					λ.StrLiteral("69.0.3497.100"),
					λ.StrLiteral("71.0.3553.1"),
					λ.StrLiteral("71.0.3553.0"),
					λ.StrLiteral("70.0.3538.19"),
					λ.StrLiteral("69.0.3497.99"),
					λ.StrLiteral("69.0.3497.98"),
					λ.StrLiteral("69.0.3497.97"),
					λ.StrLiteral("71.0.3552.6"),
					λ.StrLiteral("71.0.3552.5"),
					λ.StrLiteral("71.0.3552.4"),
					λ.StrLiteral("71.0.3552.3"),
					λ.StrLiteral("71.0.3552.2"),
					λ.StrLiteral("71.0.3552.1"),
					λ.StrLiteral("71.0.3552.0"),
					λ.StrLiteral("70.0.3538.18"),
					λ.StrLiteral("69.0.3497.96"),
					λ.StrLiteral("71.0.3551.3"),
					λ.StrLiteral("71.0.3551.2"),
					λ.StrLiteral("71.0.3551.1"),
					λ.StrLiteral("71.0.3551.0"),
					λ.StrLiteral("70.0.3538.17"),
					λ.StrLiteral("69.0.3497.95"),
					λ.StrLiteral("71.0.3550.3"),
					λ.StrLiteral("71.0.3550.2"),
					λ.StrLiteral("71.0.3550.1"),
					λ.StrLiteral("71.0.3550.0"),
					λ.StrLiteral("70.0.3538.16"),
					λ.StrLiteral("69.0.3497.94"),
					λ.StrLiteral("71.0.3549.1"),
					λ.StrLiteral("71.0.3549.0"),
					λ.StrLiteral("70.0.3538.15"),
					λ.StrLiteral("69.0.3497.93"),
					λ.StrLiteral("69.0.3497.92"),
					λ.StrLiteral("71.0.3548.1"),
					λ.StrLiteral("71.0.3548.0"),
					λ.StrLiteral("70.0.3538.14"),
					λ.StrLiteral("69.0.3497.91"),
					λ.StrLiteral("71.0.3547.1"),
					λ.StrLiteral("71.0.3547.0"),
					λ.StrLiteral("70.0.3538.13"),
					λ.StrLiteral("69.0.3497.90"),
					λ.StrLiteral("71.0.3546.2"),
					λ.StrLiteral("69.0.3497.89"),
					λ.StrLiteral("71.0.3546.1"),
					λ.StrLiteral("71.0.3546.0"),
					λ.StrLiteral("70.0.3538.12"),
					λ.StrLiteral("69.0.3497.88"),
					λ.StrLiteral("71.0.3545.4"),
					λ.StrLiteral("71.0.3545.3"),
					λ.StrLiteral("71.0.3545.2"),
					λ.StrLiteral("71.0.3545.1"),
					λ.StrLiteral("71.0.3545.0"),
					λ.StrLiteral("70.0.3538.11"),
					λ.StrLiteral("69.0.3497.87"),
					λ.StrLiteral("71.0.3544.5"),
					λ.StrLiteral("71.0.3544.4"),
					λ.StrLiteral("71.0.3544.3"),
					λ.StrLiteral("71.0.3544.2"),
					λ.StrLiteral("71.0.3544.1"),
					λ.StrLiteral("71.0.3544.0"),
					λ.StrLiteral("69.0.3497.86"),
					λ.StrLiteral("70.0.3538.10"),
					λ.StrLiteral("69.0.3497.85"),
					λ.StrLiteral("70.0.3538.9"),
					λ.StrLiteral("69.0.3497.84"),
					λ.StrLiteral("71.0.3543.4"),
					λ.StrLiteral("70.0.3538.8"),
					λ.StrLiteral("71.0.3543.3"),
					λ.StrLiteral("71.0.3543.2"),
					λ.StrLiteral("71.0.3543.1"),
					λ.StrLiteral("71.0.3543.0"),
					λ.StrLiteral("70.0.3538.7"),
					λ.StrLiteral("69.0.3497.83"),
					λ.StrLiteral("71.0.3542.2"),
					λ.StrLiteral("71.0.3542.1"),
					λ.StrLiteral("71.0.3542.0"),
					λ.StrLiteral("70.0.3538.6"),
					λ.StrLiteral("69.0.3497.82"),
					λ.StrLiteral("69.0.3497.81"),
					λ.StrLiteral("71.0.3541.1"),
					λ.StrLiteral("71.0.3541.0"),
					λ.StrLiteral("70.0.3538.5"),
					λ.StrLiteral("69.0.3497.80"),
					λ.StrLiteral("71.0.3540.1"),
					λ.StrLiteral("71.0.3540.0"),
					λ.StrLiteral("70.0.3538.4"),
					λ.StrLiteral("69.0.3497.79"),
					λ.StrLiteral("70.0.3538.3"),
					λ.StrLiteral("71.0.3539.1"),
					λ.StrLiteral("71.0.3539.0"),
					λ.StrLiteral("69.0.3497.78"),
					λ.StrLiteral("68.0.3440.134"),
					λ.StrLiteral("69.0.3497.77"),
					λ.StrLiteral("70.0.3538.2"),
					λ.StrLiteral("70.0.3538.1"),
					λ.StrLiteral("70.0.3538.0"),
					λ.StrLiteral("69.0.3497.76"),
					λ.StrLiteral("68.0.3440.133"),
					λ.StrLiteral("69.0.3497.75"),
					λ.StrLiteral("70.0.3537.2"),
					λ.StrLiteral("70.0.3537.1"),
					λ.StrLiteral("70.0.3537.0"),
					λ.StrLiteral("69.0.3497.74"),
					λ.StrLiteral("68.0.3440.132"),
					λ.StrLiteral("70.0.3536.0"),
					λ.StrLiteral("70.0.3535.5"),
					λ.StrLiteral("70.0.3535.4"),
					λ.StrLiteral("70.0.3535.3"),
					λ.StrLiteral("69.0.3497.73"),
					λ.StrLiteral("68.0.3440.131"),
					λ.StrLiteral("70.0.3532.8"),
					λ.StrLiteral("70.0.3532.7"),
					λ.StrLiteral("69.0.3497.72"),
					λ.StrLiteral("69.0.3497.71"),
					λ.StrLiteral("70.0.3535.2"),
					λ.StrLiteral("70.0.3535.1"),
					λ.StrLiteral("70.0.3535.0"),
					λ.StrLiteral("69.0.3497.70"),
					λ.StrLiteral("68.0.3440.130"),
					λ.StrLiteral("69.0.3497.69"),
					λ.StrLiteral("68.0.3440.129"),
					λ.StrLiteral("70.0.3534.4"),
					λ.StrLiteral("70.0.3534.3"),
					λ.StrLiteral("70.0.3534.2"),
					λ.StrLiteral("70.0.3534.1"),
					λ.StrLiteral("70.0.3534.0"),
					λ.StrLiteral("69.0.3497.68"),
					λ.StrLiteral("68.0.3440.128"),
					λ.StrLiteral("70.0.3533.2"),
					λ.StrLiteral("70.0.3533.1"),
					λ.StrLiteral("70.0.3533.0"),
					λ.StrLiteral("69.0.3497.67"),
					λ.StrLiteral("68.0.3440.127"),
					λ.StrLiteral("70.0.3532.6"),
					λ.StrLiteral("70.0.3532.5"),
					λ.StrLiteral("70.0.3532.4"),
					λ.StrLiteral("69.0.3497.66"),
					λ.StrLiteral("68.0.3440.126"),
					λ.StrLiteral("70.0.3532.3"),
					λ.StrLiteral("70.0.3532.2"),
					λ.StrLiteral("70.0.3532.1"),
					λ.StrLiteral("69.0.3497.60"),
					λ.StrLiteral("69.0.3497.65"),
					λ.StrLiteral("69.0.3497.64"),
					λ.StrLiteral("70.0.3532.0"),
					λ.StrLiteral("70.0.3531.0"),
					λ.StrLiteral("70.0.3530.4"),
					λ.StrLiteral("70.0.3530.3"),
					λ.StrLiteral("70.0.3530.2"),
					λ.StrLiteral("69.0.3497.58"),
					λ.StrLiteral("68.0.3440.125"),
					λ.StrLiteral("69.0.3497.57"),
					λ.StrLiteral("69.0.3497.56"),
					λ.StrLiteral("69.0.3497.55"),
					λ.StrLiteral("69.0.3497.54"),
					λ.StrLiteral("70.0.3530.1"),
					λ.StrLiteral("70.0.3530.0"),
					λ.StrLiteral("69.0.3497.53"),
					λ.StrLiteral("68.0.3440.124"),
					λ.StrLiteral("69.0.3497.52"),
					λ.StrLiteral("70.0.3529.3"),
					λ.StrLiteral("70.0.3529.2"),
					λ.StrLiteral("70.0.3529.1"),
					λ.StrLiteral("70.0.3529.0"),
					λ.StrLiteral("69.0.3497.51"),
					λ.StrLiteral("70.0.3528.4"),
					λ.StrLiteral("68.0.3440.123"),
					λ.StrLiteral("70.0.3528.3"),
					λ.StrLiteral("70.0.3528.2"),
					λ.StrLiteral("70.0.3528.1"),
					λ.StrLiteral("70.0.3528.0"),
					λ.StrLiteral("69.0.3497.50"),
					λ.StrLiteral("68.0.3440.122"),
					λ.StrLiteral("70.0.3527.1"),
					λ.StrLiteral("70.0.3527.0"),
					λ.StrLiteral("69.0.3497.49"),
					λ.StrLiteral("68.0.3440.121"),
					λ.StrLiteral("70.0.3526.1"),
					λ.StrLiteral("70.0.3526.0"),
					λ.StrLiteral("68.0.3440.120"),
					λ.StrLiteral("69.0.3497.48"),
					λ.StrLiteral("69.0.3497.47"),
					λ.StrLiteral("68.0.3440.119"),
					λ.StrLiteral("68.0.3440.118"),
					λ.StrLiteral("70.0.3525.5"),
					λ.StrLiteral("70.0.3525.4"),
					λ.StrLiteral("70.0.3525.3"),
					λ.StrLiteral("68.0.3440.117"),
					λ.StrLiteral("69.0.3497.46"),
					λ.StrLiteral("70.0.3525.2"),
					λ.StrLiteral("70.0.3525.1"),
					λ.StrLiteral("70.0.3525.0"),
					λ.StrLiteral("69.0.3497.45"),
					λ.StrLiteral("68.0.3440.116"),
					λ.StrLiteral("70.0.3524.4"),
					λ.StrLiteral("70.0.3524.3"),
					λ.StrLiteral("69.0.3497.44"),
					λ.StrLiteral("70.0.3524.2"),
					λ.StrLiteral("70.0.3524.1"),
					λ.StrLiteral("70.0.3524.0"),
					λ.StrLiteral("70.0.3523.2"),
					λ.StrLiteral("69.0.3497.43"),
					λ.StrLiteral("68.0.3440.115"),
					λ.StrLiteral("70.0.3505.9"),
					λ.StrLiteral("69.0.3497.42"),
					λ.StrLiteral("70.0.3505.8"),
					λ.StrLiteral("70.0.3523.1"),
					λ.StrLiteral("70.0.3523.0"),
					λ.StrLiteral("69.0.3497.41"),
					λ.StrLiteral("68.0.3440.114"),
					λ.StrLiteral("70.0.3505.7"),
					λ.StrLiteral("69.0.3497.40"),
					λ.StrLiteral("70.0.3522.1"),
					λ.StrLiteral("70.0.3522.0"),
					λ.StrLiteral("70.0.3521.2"),
					λ.StrLiteral("69.0.3497.39"),
					λ.StrLiteral("68.0.3440.113"),
					λ.StrLiteral("70.0.3505.6"),
					λ.StrLiteral("70.0.3521.1"),
					λ.StrLiteral("70.0.3521.0"),
					λ.StrLiteral("69.0.3497.38"),
					λ.StrLiteral("68.0.3440.112"),
					λ.StrLiteral("70.0.3520.1"),
					λ.StrLiteral("70.0.3520.0"),
					λ.StrLiteral("69.0.3497.37"),
					λ.StrLiteral("68.0.3440.111"),
					λ.StrLiteral("70.0.3519.3"),
					λ.StrLiteral("70.0.3519.2"),
					λ.StrLiteral("70.0.3519.1"),
					λ.StrLiteral("70.0.3519.0"),
					λ.StrLiteral("69.0.3497.36"),
					λ.StrLiteral("68.0.3440.110"),
					λ.StrLiteral("70.0.3518.1"),
					λ.StrLiteral("70.0.3518.0"),
					λ.StrLiteral("69.0.3497.35"),
					λ.StrLiteral("69.0.3497.34"),
					λ.StrLiteral("68.0.3440.109"),
					λ.StrLiteral("70.0.3517.1"),
					λ.StrLiteral("70.0.3517.0"),
					λ.StrLiteral("69.0.3497.33"),
					λ.StrLiteral("68.0.3440.108"),
					λ.StrLiteral("69.0.3497.32"),
					λ.StrLiteral("70.0.3516.3"),
					λ.StrLiteral("70.0.3516.2"),
					λ.StrLiteral("70.0.3516.1"),
					λ.StrLiteral("70.0.3516.0"),
					λ.StrLiteral("69.0.3497.31"),
					λ.StrLiteral("68.0.3440.107"),
					λ.StrLiteral("70.0.3515.4"),
					λ.StrLiteral("68.0.3440.106"),
					λ.StrLiteral("70.0.3515.3"),
					λ.StrLiteral("70.0.3515.2"),
					λ.StrLiteral("70.0.3515.1"),
					λ.StrLiteral("70.0.3515.0"),
					λ.StrLiteral("69.0.3497.30"),
					λ.StrLiteral("68.0.3440.105"),
					λ.StrLiteral("68.0.3440.104"),
					λ.StrLiteral("70.0.3514.2"),
					λ.StrLiteral("70.0.3514.1"),
					λ.StrLiteral("70.0.3514.0"),
					λ.StrLiteral("69.0.3497.29"),
					λ.StrLiteral("68.0.3440.103"),
					λ.StrLiteral("70.0.3513.1"),
					λ.StrLiteral("70.0.3513.0"),
					λ.StrLiteral("69.0.3497.28"),
				)
				return λ.Mod(ϒ_USER_AGENT_TPL, λ.Cal(Ωrandom.ϒchoice, ϒ_CHROME_VERSIONS))
			})
		ϒstd_headers = λ.DictLiteral(map[string]λ.Object{
			"User-Agent":      λ.Cal(ϒrandom_user_agent),
			"Accept-Charset":  λ.StrLiteral("ISO-8859-1,utf-8;q=0.7,*;q=0.7"),
			"Accept":          λ.StrLiteral("text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"),
			"Accept-Encoding": λ.StrLiteral("gzip, deflate"),
			"Accept-Language": λ.StrLiteral("en-us,en;q=0.5"),
		})
		NO_DEFAULT = λ.Cal(λ.ObjectType)
		ENGLISH_MONTH_NAMES = λ.NewList(
			λ.StrLiteral("January"),
			λ.StrLiteral("February"),
			λ.StrLiteral("March"),
			λ.StrLiteral("April"),
			λ.StrLiteral("May"),
			λ.StrLiteral("June"),
			λ.StrLiteral("July"),
			λ.StrLiteral("August"),
			λ.StrLiteral("September"),
			λ.StrLiteral("October"),
			λ.StrLiteral("November"),
			λ.StrLiteral("December"),
		)
		MONTH_NAMES = λ.DictLiteral(map[string]λ.Object{
			"en": ENGLISH_MONTH_NAMES,
			"fr": λ.NewList(
				λ.StrLiteral("janvier"),
				λ.StrLiteral("février"),
				λ.StrLiteral("mars"),
				λ.StrLiteral("avril"),
				λ.StrLiteral("mai"),
				λ.StrLiteral("juin"),
				λ.StrLiteral("juillet"),
				λ.StrLiteral("août"),
				λ.StrLiteral("septembre"),
				λ.StrLiteral("octobre"),
				λ.StrLiteral("novembre"),
				λ.StrLiteral("décembre"),
			),
		})
		KNOWN_EXTENSIONS = λ.NewTuple(
			λ.StrLiteral("mp4"),
			λ.StrLiteral("m4a"),
			λ.StrLiteral("m4p"),
			λ.StrLiteral("m4b"),
			λ.StrLiteral("m4r"),
			λ.StrLiteral("m4v"),
			λ.StrLiteral("aac"),
			λ.StrLiteral("flv"),
			λ.StrLiteral("f4v"),
			λ.StrLiteral("f4a"),
			λ.StrLiteral("f4b"),
			λ.StrLiteral("webm"),
			λ.StrLiteral("ogg"),
			λ.StrLiteral("ogv"),
			λ.StrLiteral("oga"),
			λ.StrLiteral("ogx"),
			λ.StrLiteral("spx"),
			λ.StrLiteral("opus"),
			λ.StrLiteral("mkv"),
			λ.StrLiteral("mka"),
			λ.StrLiteral("mk3d"),
			λ.StrLiteral("avi"),
			λ.StrLiteral("divx"),
			λ.StrLiteral("mov"),
			λ.StrLiteral("asf"),
			λ.StrLiteral("wmv"),
			λ.StrLiteral("wma"),
			λ.StrLiteral("3gp"),
			λ.StrLiteral("3g2"),
			λ.StrLiteral("mp3"),
			λ.StrLiteral("flac"),
			λ.StrLiteral("ape"),
			λ.StrLiteral("wav"),
			λ.StrLiteral("f4f"),
			λ.StrLiteral("f4m"),
			λ.StrLiteral("m3u8"),
			λ.StrLiteral("smil"),
		)
		DATE_FORMATS = λ.NewTuple(
			λ.StrLiteral("%d %B %Y"),
			λ.StrLiteral("%d %b %Y"),
			λ.StrLiteral("%B %d %Y"),
			λ.StrLiteral("%B %dst %Y"),
			λ.StrLiteral("%B %dnd %Y"),
			λ.StrLiteral("%B %drd %Y"),
			λ.StrLiteral("%B %dth %Y"),
			λ.StrLiteral("%b %d %Y"),
			λ.StrLiteral("%b %dst %Y"),
			λ.StrLiteral("%b %dnd %Y"),
			λ.StrLiteral("%b %drd %Y"),
			λ.StrLiteral("%b %dth %Y"),
			λ.StrLiteral("%b %dst %Y %I:%M"),
			λ.StrLiteral("%b %dnd %Y %I:%M"),
			λ.StrLiteral("%b %drd %Y %I:%M"),
			λ.StrLiteral("%b %dth %Y %I:%M"),
			λ.StrLiteral("%Y %m %d"),
			λ.StrLiteral("%Y-%m-%d"),
			λ.StrLiteral("%Y/%m/%d"),
			λ.StrLiteral("%Y/%m/%d %H:%M"),
			λ.StrLiteral("%Y/%m/%d %H:%M:%S"),
			λ.StrLiteral("%Y-%m-%d %H:%M"),
			λ.StrLiteral("%Y-%m-%d %H:%M:%S"),
			λ.StrLiteral("%Y-%m-%d %H:%M:%S.%f"),
			λ.StrLiteral("%d.%m.%Y %H:%M"),
			λ.StrLiteral("%d.%m.%Y %H.%M"),
			λ.StrLiteral("%Y-%m-%dT%H:%M:%SZ"),
			λ.StrLiteral("%Y-%m-%dT%H:%M:%S.%fZ"),
			λ.StrLiteral("%Y-%m-%dT%H:%M:%S.%f0Z"),
			λ.StrLiteral("%Y-%m-%dT%H:%M:%S"),
			λ.StrLiteral("%Y-%m-%dT%H:%M:%S.%f"),
			λ.StrLiteral("%Y-%m-%dT%H:%M"),
			λ.StrLiteral("%b %d %Y at %H:%M"),
			λ.StrLiteral("%b %d %Y at %H:%M:%S"),
			λ.StrLiteral("%B %d %Y at %H:%M"),
			λ.StrLiteral("%B %d %Y at %H:%M:%S"),
		)
		DATE_FORMATS_DAY_FIRST = λ.Cal(λ.ListType, DATE_FORMATS)
		λ.Calm(DATE_FORMATS_DAY_FIRST, "extend", λ.NewList(
			λ.StrLiteral("%d-%m-%Y"),
			λ.StrLiteral("%d.%m.%Y"),
			λ.StrLiteral("%d.%m.%y"),
			λ.StrLiteral("%d/%m/%Y"),
			λ.StrLiteral("%d/%m/%y"),
			λ.StrLiteral("%d/%m/%Y %H:%M:%S"),
		))
		DATE_FORMATS_MONTH_FIRST = λ.Cal(λ.ListType, DATE_FORMATS)
		λ.Calm(DATE_FORMATS_MONTH_FIRST, "extend", λ.NewList(
			λ.StrLiteral("%m-%d-%Y"),
			λ.StrLiteral("%m.%d.%Y"),
			λ.StrLiteral("%m/%d/%Y"),
			λ.StrLiteral("%m/%d/%y"),
			λ.StrLiteral("%m/%d/%Y %H:%M:%S"),
		))
		JSON_LD_RE = λ.StrLiteral("(?is)<script[^>]+type=([\"\\']?)application/ld\\+json\\1[^>]*>(?P<json_ld>.+?)</script>")
		ϒpreferredencoding = λ.NewFunction("preferredencoding",
			nil,
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒpref λ.Object
					τmp0  λ.Object
					τmp1  λ.Object
				)
				_ = τmp0
				_ = τmp1
				τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
					defer λ.CatchMulti(
						nil,
						&λ.Catcher{λ.ExceptionType, func(λex λ.BaseException) {
							ϒpref = λ.StrLiteral("UTF-8")
						}},
					)
					ϒpref = λ.Calm(λ.None, "getpreferredencoding")
					λ.Calm(λ.StrLiteral("TEST"), "encode", ϒpref)
					return λ.BlockExitNormally, nil
				}()
				return ϒpref
			})
		if λ.IsTrue(λ.Ge(Ωsys.ϒversion_info, λ.NewTuple(
			λ.IntLiteral(2),
			λ.IntLiteral(7),
		))) {
			ϒfind_xpath_attr = λ.NewFunction("find_xpath_attr",
				[]λ.Param{
					{Name: "node"},
					{Name: "xpath"},
					{Name: "key"},
					{Name: "val", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒexpr  λ.Object
						ϒkey   = λargs[2]
						ϒnode  = λargs[0]
						ϒval   = λargs[3]
						ϒxpath = λargs[1]
					)
					if !λ.IsTrue(λ.Cal(Ωre.ϒmatch, λ.StrLiteral("^[a-zA-Z_-]+$"), ϒkey)) {
						panic(λ.Raise(λ.Cal(λ.AssertionErrorType)))
					}
					ϒexpr = λ.Add(ϒxpath, func() λ.Object {
						if ϒval == λ.None {
							return λ.Mod(λ.StrLiteral("[@%s]"), ϒkey)
						} else {
							return λ.Mod(λ.StrLiteral("[@%s='%s']"), λ.NewTuple(
								ϒkey,
								ϒval,
							))
						}
					}())
					return λ.Calm(ϒnode, "find", ϒexpr)
				})
		} else {
			ϒfind_xpath_attr = λ.NewFunction("find_xpath_attr",
				[]λ.Param{
					{Name: "node"},
					{Name: "xpath"},
					{Name: "key"},
					{Name: "val", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒf     λ.Object
						ϒkey   = λargs[2]
						ϒnode  = λargs[0]
						ϒval   = λargs[3]
						ϒxpath = λargs[1]
						τmp0   λ.Object
						τmp1   λ.Object
					)
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒnode, "findall", λ.Cal(ϒcompat_xpath, ϒxpath)))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒf = τmp1
						if !λ.Contains(λ.GetAttr(ϒf, "attrib", nil), ϒkey) {
							continue
						}
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(ϒval == λ.None); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Eq(λ.Calm(λ.GetAttr(ϒf, "attrib", nil), "get", ϒkey), ϒval)
							}
						}()) {
							return ϒf
						}
					}
					return λ.None
				})
		}
		ϒxpath_with_ns = λ.NewFunction("xpath_with_ns",
			[]λ.Param{
				{Name: "path"},
				{Name: "ns_map"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒc          λ.Object
					ϒcomponents λ.Object
					ϒns         λ.Object
					ϒns_map     = λargs[1]
					ϒpath       = λargs[0]
					ϒreplaced   λ.Object
					ϒtag        λ.Object
					τmp0        λ.Object
					τmp1        λ.Object
					τmp2        λ.Object
				)
				ϒcomponents = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
					nil,
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
							var (
								ϒc   λ.Object
								τmp0 λ.Object
								τmp1 λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒpath, "split", λ.StrLiteral("/")))
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒc = τmp1
								λgy.Yield(λ.Calm(ϒc, "split", λ.StrLiteral(":")))
							}
							return λ.None
						})
					})))
				ϒreplaced = λ.NewList()
				τmp0 = λ.Cal(λ.BuiltinIter, ϒcomponents)
				for {
					if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
						break
					}
					ϒc = τmp1
					if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒc), λ.IntLiteral(1))) {
						λ.Calm(ϒreplaced, "append", λ.GetItem(ϒc, λ.IntLiteral(0)))
					} else {
						τmp2 = ϒc
						ϒns = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒtag = λ.GetItem(τmp2, λ.IntLiteral(1))
						λ.Calm(ϒreplaced, "append", λ.Mod(λ.StrLiteral("{%s}%s"), λ.NewTuple(
							λ.GetItem(ϒns_map, ϒns),
							ϒtag,
						)))
					}
				}
				return λ.Calm(λ.StrLiteral("/"), "join", ϒreplaced)
			})
		ϒxpath_element = λ.NewFunction("xpath_element",
			[]λ.Param{
				{Name: "node"},
				{Name: "xpath"},
				{Name: "name", Def: λ.None},
				{Name: "fatal", Def: λ.False},
				{Name: "default", Def: NO_DEFAULT},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒ_find_xpath λ.Object
					ϒdefault     = λargs[4]
					ϒfatal       = λargs[3]
					ϒn           λ.Object
					ϒname        = λargs[2]
					ϒnode        = λargs[0]
					ϒxp          λ.Object
					ϒxpath       = λargs[1]
					τmp0         λ.Object
					τmp1         λ.Object
				)
				ϒ_find_xpath = λ.NewFunction("_find_xpath",
					[]λ.Param{
						{Name: "xpath"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒxpath = λargs[0]
						)
						return λ.Calm(ϒnode, "find", λ.Cal(ϒcompat_xpath, ϒxpath))
					})
				if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒxpath, λ.NewTuple(
					λ.StrType,
					ϒcompat_str,
				))) {
					ϒn = λ.Cal(ϒ_find_xpath, ϒxpath)
				} else {
					τmp0 = λ.Cal(λ.BuiltinIter, ϒxpath)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒxp = τmp1
						ϒn = λ.Cal(ϒ_find_xpath, ϒxp)
						if ϒn != λ.None {
							break
						}
					}
				}
				if ϒn == λ.None {
					if ϒdefault != NO_DEFAULT {
						return ϒdefault
					} else {
						if λ.IsTrue(ϒfatal) {
							ϒname = func() λ.Object {
								if ϒname == λ.None {
									return ϒxpath
								} else {
									return ϒname
								}
							}()
							panic(λ.Raise(λ.Cal(ExtractorError, λ.Mod(λ.StrLiteral("Could not find XML element %s"), ϒname))))
						} else {
							return λ.None
						}
					}
				}
				return ϒn
			})
		ϒxpath_text = λ.NewFunction("xpath_text",
			[]λ.Param{
				{Name: "node"},
				{Name: "xpath"},
				{Name: "name", Def: λ.None},
				{Name: "fatal", Def: λ.False},
				{Name: "default", Def: NO_DEFAULT},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdefault = λargs[4]
					ϒfatal   = λargs[3]
					ϒn       λ.Object
					ϒname    = λargs[2]
					ϒnode    = λargs[0]
					ϒxpath   = λargs[1]
				)
				ϒn = λ.Call(ϒxpath_element, λ.NewArgs(
					ϒnode,
					ϒxpath,
					ϒname,
				), λ.KWArgs{
					{Name: "fatal", Value: ϒfatal},
					{Name: "default", Value: ϒdefault},
				})
				if λ.IsTrue(func() λ.Object {
					if λv := λ.NewBool(ϒn == λ.None); λ.IsTrue(λv) {
						return λv
					} else {
						return λ.Eq(ϒn, ϒdefault)
					}
				}()) {
					return ϒn
				}
				if λ.GetAttr(ϒn, "text", nil) == λ.None {
					if ϒdefault != NO_DEFAULT {
						return ϒdefault
					} else {
						if λ.IsTrue(ϒfatal) {
							ϒname = func() λ.Object {
								if ϒname == λ.None {
									return ϒxpath
								} else {
									return ϒname
								}
							}()
							panic(λ.Raise(λ.Cal(ExtractorError, λ.Mod(λ.StrLiteral("Could not find XML element's text %s"), ϒname))))
						} else {
							return λ.None
						}
					}
				}
				return λ.GetAttr(ϒn, "text", nil)
			})
		ϒxpath_attr = λ.NewFunction("xpath_attr",
			[]λ.Param{
				{Name: "node"},
				{Name: "xpath"},
				{Name: "key"},
				{Name: "name", Def: λ.None},
				{Name: "fatal", Def: λ.False},
				{Name: "default", Def: NO_DEFAULT},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdefault = λargs[5]
					ϒfatal   = λargs[4]
					ϒkey     = λargs[2]
					ϒn       λ.Object
					ϒname    = λargs[3]
					ϒnode    = λargs[0]
					ϒxpath   = λargs[1]
				)
				ϒn = λ.Cal(ϒfind_xpath_attr, ϒnode, ϒxpath, ϒkey)
				if ϒn == λ.None {
					if ϒdefault != NO_DEFAULT {
						return ϒdefault
					} else {
						if λ.IsTrue(ϒfatal) {
							ϒname = func() λ.Object {
								if ϒname == λ.None {
									return λ.Mod(λ.StrLiteral("%s[@%s]"), λ.NewTuple(
										ϒxpath,
										ϒkey,
									))
								} else {
									return ϒname
								}
							}()
							panic(λ.Raise(λ.Cal(ExtractorError, λ.Mod(λ.StrLiteral("Could not find XML attribute %s"), ϒname))))
						} else {
							return λ.None
						}
					}
				}
				return λ.GetItem(λ.GetAttr(ϒn, "attrib", nil), ϒkey)
			})
		ϒget_element_by_id = λ.NewFunction("get_element_by_id",
			[]λ.Param{
				{Name: "id"},
				{Name: "html"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒhtml = λargs[1]
					ϒid   = λargs[0]
				)
				return λ.Cal(ϒget_element_by_attribute, λ.StrLiteral("id"), ϒid, ϒhtml)
			})
		ϒget_element_by_class = λ.NewFunction("get_element_by_class",
			[]λ.Param{
				{Name: "class_name"},
				{Name: "html"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒclass_name = λargs[0]
					ϒhtml       = λargs[1]
					ϒretval     λ.Object
				)
				ϒretval = λ.Cal(ϒget_elements_by_class, ϒclass_name, ϒhtml)
				return func() λ.Object {
					if λ.IsTrue(ϒretval) {
						return λ.GetItem(ϒretval, λ.IntLiteral(0))
					} else {
						return λ.None
					}
				}()
			})
		ϒget_element_by_attribute = λ.NewFunction("get_element_by_attribute",
			[]λ.Param{
				{Name: "attribute"},
				{Name: "value"},
				{Name: "html"},
				{Name: "escape_value", Def: λ.True},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒattribute    = λargs[0]
					ϒescape_value = λargs[3]
					ϒhtml         = λargs[2]
					ϒretval       λ.Object
					ϒvalue        = λargs[1]
				)
				ϒretval = λ.Cal(ϒget_elements_by_attribute, ϒattribute, ϒvalue, ϒhtml, ϒescape_value)
				return func() λ.Object {
					if λ.IsTrue(ϒretval) {
						return λ.GetItem(ϒretval, λ.IntLiteral(0))
					} else {
						return λ.None
					}
				}()
			})
		ϒget_elements_by_class = λ.NewFunction("get_elements_by_class",
			[]λ.Param{
				{Name: "class_name"},
				{Name: "html"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒclass_name = λargs[0]
					ϒhtml       = λargs[1]
				)
				return λ.Call(ϒget_elements_by_attribute, λ.NewArgs(
					λ.StrLiteral("class"),
					λ.Mod(λ.StrLiteral("[^\\'\"]*\\b%s\\b[^\\'\"]*"), λ.Cal(Ωre.ϒescape, ϒclass_name)),
					ϒhtml,
				), λ.KWArgs{
					{Name: "escape_value", Value: λ.False},
				})
			})
		ϒget_elements_by_attribute = λ.NewFunction("get_elements_by_attribute",
			[]λ.Param{
				{Name: "attribute"},
				{Name: "value"},
				{Name: "html"},
				{Name: "escape_value", Def: λ.True},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒattribute    = λargs[0]
					ϒescape_value = λargs[3]
					ϒhtml         = λargs[2]
					ϒm            λ.Object
					ϒres          λ.Object
					ϒretlist      λ.Object
					ϒvalue        = λargs[1]
					τmp0          λ.Object
					τmp1          λ.Object
				)
				ϒvalue = func() λ.Object {
					if λ.IsTrue(ϒescape_value) {
						return λ.Cal(Ωre.ϒescape, ϒvalue)
					} else {
						return ϒvalue
					}
				}()
				ϒretlist = λ.NewList()
				τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfinditer, λ.Mod(λ.StrLiteral("(?xs)\n        <([a-zA-Z0-9:._-]+)\n         (?:\\s+[a-zA-Z0-9:._-]+(?:=[a-zA-Z0-9:._-]*|=\"[^\"]*\"|='[^']*'|))*?\n         \\s+%s=['\"]?%s['\"]?\n         (?:\\s+[a-zA-Z0-9:._-]+(?:=[a-zA-Z0-9:._-]*|=\"[^\"]*\"|='[^']*'|))*?\n        \\s*>\n        (?P<content>.*?)\n        </\\1>\n    "), λ.NewTuple(
					λ.Cal(Ωre.ϒescape, ϒattribute),
					ϒvalue,
				)), ϒhtml))
				for {
					if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
						break
					}
					ϒm = τmp1
					ϒres = λ.Calm(ϒm, "group", λ.StrLiteral("content"))
					if λ.IsTrue(func() λ.Object {
						if λv := λ.Calm(ϒres, "startswith", λ.StrLiteral("\"")); λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒres, "startswith", λ.StrLiteral("'"))
						}
					}()) {
						ϒres = λ.GetItem(ϒres, λ.NewSlice(λ.IntLiteral(1), λ.Neg(λ.IntLiteral(1)), λ.None))
					}
					λ.Calm(ϒretlist, "append", λ.Cal(ϒunescapeHTML, ϒres))
				}
				return ϒretlist
			})
		HTMLAttributeParser = λ.Cal(λ.TypeType, λ.StrLiteral("HTMLAttributeParser"), λ.NewTuple(ϒcompat_HTMLParser), func() λ.Dict {
			var (
				HTMLAttributeParser___init__        λ.Object
				HTMLAttributeParser_handle_starttag λ.Object
			)
			HTMLAttributeParser___init__ = λ.NewFunction("__init__",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					λ.SetAttr(ϒself, "attrs", λ.DictLiteral(map[λ.Object]λ.Object{}))
					λ.Calm(ϒcompat_HTMLParser, "__init__", ϒself)
					return λ.None
				})
			HTMLAttributeParser_handle_starttag = λ.NewFunction("handle_starttag",
				[]λ.Param{
					{Name: "self"},
					{Name: "tag"},
					{Name: "attrs"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒattrs = λargs[2]
						ϒself  = λargs[0]
						ϒtag   = λargs[1]
					)
					_ = ϒtag
					λ.SetAttr(ϒself, "attrs", λ.Cal(λ.DictType, ϒattrs))
					return λ.None
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"__init__":        HTMLAttributeParser___init__,
				"handle_starttag": HTMLAttributeParser_handle_starttag,
			})
		}())
		ϒextract_attributes = λ.NewFunction("extract_attributes",
			[]λ.Param{
				{Name: "html_element"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒhtml_element = λargs[0]
					ϒparser       λ.Object
					τmp0          λ.Object
					τmp1          λ.Object
				)
				_ = τmp0
				_ = τmp1
				ϒparser = λ.Cal(HTMLAttributeParser)
				τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
					defer λ.CatchMulti(
						nil,
						&λ.Catcher{ϒcompat_HTMLParseError, func(λex λ.BaseException) {
							// pass
						}},
					)
					λ.Calm(ϒparser, "feed", ϒhtml_element)
					λ.Calm(ϒparser, "close")
					return λ.BlockExitNormally, nil
				}()
				return λ.GetAttr(ϒparser, "attrs", nil)
			})
		ϒclean_html = λ.NewFunction("clean_html",
			[]λ.Param{
				{Name: "html"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒhtml = λargs[0]
				)
				if ϒhtml == λ.None {
					return ϒhtml
				}
				ϒhtml = λ.Calm(ϒhtml, "replace", λ.StrLiteral("\n"), λ.StrLiteral(" "))
				ϒhtml = λ.Cal(Ωre.ϒsub, λ.StrLiteral("(?u)\\s*<\\s*br\\s*/?\\s*>\\s*"), λ.StrLiteral("\n"), ϒhtml)
				ϒhtml = λ.Cal(Ωre.ϒsub, λ.StrLiteral("(?u)<\\s*/\\s*p\\s*>\\s*<\\s*p[^>]*>"), λ.StrLiteral("\n"), ϒhtml)
				ϒhtml = λ.Cal(Ωre.ϒsub, λ.StrLiteral("<.*?>"), λ.StrLiteral(""), ϒhtml)
				ϒhtml = λ.Cal(ϒunescapeHTML, ϒhtml)
				return λ.Calm(ϒhtml, "strip")
			})
		ϒsanitize_filename = λ.NewFunction("sanitize_filename",
			[]λ.Param{
				{Name: "s"},
				{Name: "restricted", Def: λ.False},
				{Name: "is_id", Def: λ.False},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒis_id          = λargs[2]
					ϒreplace_insane λ.Object
					ϒrestricted     = λargs[1]
					ϒresult         λ.Object
					ϒs              = λargs[0]
				)
				ϒreplace_insane = λ.NewFunction("replace_insane",
					[]λ.Param{
						{Name: "char"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒchar = λargs[0]
						)
						if λ.IsTrue(func() λ.Object {
							if λv := ϒrestricted; !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.NewBool(λ.Contains(λ.None, ϒchar))
							}
						}()) {
							return λ.GetItem(λ.None, ϒchar)
						}
						if λ.IsTrue(func() λ.Object {
							if λv := λ.Eq(ϒchar, λ.StrLiteral("?")); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.Lt(λ.Cal(λ.BuiltinOrd, ϒchar), λ.IntLiteral(32)); λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Eq(λ.Cal(λ.BuiltinOrd, ϒchar), λ.IntLiteral(127))
							}
						}()) {
							return λ.StrLiteral("")
						} else {
							if λ.IsTrue(λ.Eq(ϒchar, λ.StrLiteral("\""))) {
								return func() λ.Object {
									if λ.IsTrue(ϒrestricted) {
										return λ.StrLiteral("")
									} else {
										return λ.StrLiteral("'")
									}
								}()
							} else {
								if λ.IsTrue(λ.Eq(ϒchar, λ.StrLiteral(":"))) {
									return func() λ.Object {
										if λ.IsTrue(ϒrestricted) {
											return λ.StrLiteral("_-")
										} else {
											return λ.StrLiteral(" -")
										}
									}()
								} else {
									if λ.Contains(λ.StrLiteral("\\/|*<>"), ϒchar) {
										return λ.StrLiteral("_")
									}
								}
							}
						}
						if λ.IsTrue(func() λ.Object {
							if λv := ϒrestricted; !λ.IsTrue(λv) {
								return λv
							} else {
								return func() λ.Object {
									if λv := λ.NewBool(λ.Contains(λ.StrLiteral("!&'()[]{}$;`^,#"), ϒchar)); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Calm(ϒchar, "isspace")
									}
								}()
							}
						}()) {
							return λ.StrLiteral("_")
						}
						if λ.IsTrue(func() λ.Object {
							if λv := ϒrestricted; !λ.IsTrue(λv) {
								return λv
							} else {
								return λ.Gt(λ.Cal(λ.BuiltinOrd, ϒchar), λ.IntLiteral(127))
							}
						}()) {
							return λ.StrLiteral("_")
						}
						return ϒchar
					})
				ϒs = λ.Cal(Ωre.ϒsub, λ.StrLiteral("[0-9]+(?::[0-9]+)+"), λ.NewFunction("<lambda>",
					[]λ.Param{
						{Name: "m"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒm = λargs[0]
						)
						return λ.Calm(λ.Calm(ϒm, "group", λ.IntLiteral(0)), "replace", λ.StrLiteral(":"), λ.StrLiteral("_"))
					}), ϒs)
				ϒresult = λ.Calm(λ.StrLiteral(""), "join", λ.Cal(λ.MapIteratorType, ϒreplace_insane, ϒs))
				if !λ.IsTrue(ϒis_id) {
					for λ.Contains(ϒresult, λ.StrLiteral("__")) {
						ϒresult = λ.Calm(ϒresult, "replace", λ.StrLiteral("__"), λ.StrLiteral("_"))
					}
					ϒresult = λ.Calm(ϒresult, "strip", λ.StrLiteral("_"))
					if λ.IsTrue(func() λ.Object {
						if λv := ϒrestricted; !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒresult, "startswith", λ.StrLiteral("-_"))
						}
					}()) {
						ϒresult = λ.GetItem(ϒresult, λ.NewSlice(λ.IntLiteral(2), λ.None, λ.None))
					}
					if λ.IsTrue(λ.Calm(ϒresult, "startswith", λ.StrLiteral("-"))) {
						ϒresult = λ.Add(λ.StrLiteral("_"), λ.GetItem(ϒresult, λ.NewSlice(λ.Cal(λ.BuiltinLen, λ.StrLiteral("-")), λ.None, λ.None)))
					}
					ϒresult = λ.Calm(ϒresult, "lstrip", λ.StrLiteral("."))
					if !λ.IsTrue(ϒresult) {
						ϒresult = λ.StrLiteral("_")
					}
				}
				return ϒresult
			})
		ϒsanitize_path = λ.NewFunction("sanitize_path",
			[]λ.Param{
				{Name: "s"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdrive_or_unc   λ.Object
					ϒnorm_path      λ.Object
					ϒs              = λargs[0]
					ϒsanitized_path λ.Object
					τmp0            λ.Object
				)
				if λ.IsTrue(λ.Ne(Ωsys.ϒplatform, λ.StrLiteral("win32"))) {
					return ϒs
				}
				τmp0 = λ.Cal(λ.None, ϒs)
				ϒdrive_or_unc = λ.GetItem(τmp0, λ.IntLiteral(0))
				_ = λ.GetItem(τmp0, λ.IntLiteral(1))
				if λ.IsTrue(func() λ.Object {
					if λv := λ.Lt(Ωsys.ϒversion_info, λ.NewTuple(
						λ.IntLiteral(2),
						λ.IntLiteral(7),
					)); !λ.IsTrue(λv) {
						return λv
					} else {
						return λ.NewBool(!λ.IsTrue(ϒdrive_or_unc))
					}
				}()) {
					τmp0 = λ.Cal(λ.None, ϒs)
					ϒdrive_or_unc = λ.GetItem(τmp0, λ.IntLiteral(0))
					_ = λ.GetItem(τmp0, λ.IntLiteral(1))
				}
				ϒnorm_path = λ.Calm(λ.Cal(λ.None, λ.Cal(λ.None, ϒs, ϒdrive_or_unc)), "split", λ.None)
				if λ.IsTrue(ϒdrive_or_unc) {
					λ.Calm(ϒnorm_path, "pop", λ.IntLiteral(0))
				}
				ϒsanitized_path = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
					nil,
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
							var (
								ϒpath_part λ.Object
								τmp0       λ.Object
								τmp1       λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, ϒnorm_path)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒpath_part = τmp1
								λgy.Yield(func() λ.Object {
									if λ.Contains(λ.NewList(
										λ.StrLiteral("."),
										λ.StrLiteral(".."),
									), ϒpath_part) {
										return ϒpath_part
									} else {
										return λ.Cal(Ωre.ϒsub, λ.StrLiteral("(?:[/<>:\"\\|\\\\?\\*]|[\\s.]$)"), λ.StrLiteral("#"), ϒpath_part)
									}
								}())
							}
							return λ.None
						})
					})))
				if λ.IsTrue(ϒdrive_or_unc) {
					λ.Calm(ϒsanitized_path, "insert", λ.IntLiteral(0), λ.Add(ϒdrive_or_unc, λ.None))
				}
				return λ.Cal(λ.None, λ.Unpack(λ.AsStarred(ϒsanitized_path))...)
			})
		ϒsanitize_url = λ.NewFunction("sanitize_url",
			[]λ.Param{
				{Name: "url"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					COMMON_TYPOS λ.Object
					ϒfixup       λ.Object
					ϒmistake     λ.Object
					ϒurl         = λargs[0]
					τmp0         λ.Object
					τmp1         λ.Object
					τmp2         λ.Object
				)
				if λ.IsTrue(λ.Calm(ϒurl, "startswith", λ.StrLiteral("//"))) {
					return λ.Mod(λ.StrLiteral("http:%s"), ϒurl)
				}
				COMMON_TYPOS = λ.NewTuple(
					λ.NewTuple(
						λ.StrLiteral("^httpss://"),
						λ.StrLiteral("https://"),
					),
					λ.NewTuple(
						λ.StrLiteral("^rmtp([es]?)://"),
						λ.StrLiteral("rtmp\\1://"),
					),
				)
				τmp0 = λ.Cal(λ.BuiltinIter, COMMON_TYPOS)
				for {
					if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
						break
					}
					τmp2 = τmp1
					ϒmistake = λ.GetItem(τmp2, λ.IntLiteral(0))
					ϒfixup = λ.GetItem(τmp2, λ.IntLiteral(1))
					if λ.IsTrue(λ.Cal(Ωre.ϒmatch, ϒmistake, ϒurl)) {
						return λ.Cal(Ωre.ϒsub, ϒmistake, ϒfixup, ϒurl)
					}
				}
				return ϒurl
			})
		ϒsanitized_Request = λ.NewFunction("sanitized_Request",
			[]λ.Param{
				{Name: "url"},
			},
			0, true, true,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒargs   = λargs[1]
					ϒkwargs = λargs[2]
					ϒurl    = λargs[0]
				)
				return λ.Call(Ωrequest.Request, λ.NewArgs(λ.Unpack(
					λ.Cal(ϒsanitize_url, ϒurl),
					λ.AsStarred(ϒargs),
				)...), λ.KWArgs{
					{Name: "", Value: ϒkwargs},
				})
			})
		ϒexpand_path = λ.NewFunction("expand_path",
			[]λ.Param{
				{Name: "s"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒs = λargs[0]
				)
				return ϒs
			})
		ϒorderedSet = λ.NewFunction("orderedSet",
			[]λ.Param{
				{Name: "iterable"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒel       λ.Object
					ϒiterable = λargs[0]
					ϒres      λ.Object
					τmp0      λ.Object
					τmp1      λ.Object
				)
				ϒres = λ.NewList()
				τmp0 = λ.Cal(λ.BuiltinIter, ϒiterable)
				for {
					if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
						break
					}
					ϒel = τmp1
					if !λ.Contains(ϒres, ϒel) {
						λ.Calm(ϒres, "append", ϒel)
					}
				}
				return ϒres
			})
		ϒ_htmlentity_transform = λ.NewFunction("_htmlentity_transform",
			[]λ.Param{
				{Name: "entity_with_semicolon"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒbase                  λ.Object
					ϒentity                λ.Object
					ϒentity_with_semicolon = λargs[0]
					ϒmobj                  λ.Object
					ϒnumstr                λ.Object
					τmp0                   λ.Object
					τmp1                   λ.Object
				)
				ϒentity = λ.GetItem(ϒentity_with_semicolon, λ.NewSlice(λ.None, λ.Neg(λ.IntLiteral(1)), λ.None))
				if λ.Contains(Ωentities.ϒname2codepoint, ϒentity) {
					return λ.Cal(ϒcompat_chr, λ.GetItem(Ωentities.ϒname2codepoint, ϒentity))
				}
				if λ.Contains(ϒcompat_html_entities_html5, ϒentity_with_semicolon) {
					return λ.GetItem(ϒcompat_html_entities_html5, ϒentity_with_semicolon)
				}
				ϒmobj = λ.Cal(Ωre.ϒmatch, λ.StrLiteral("#(x[0-9a-fA-F]+|[0-9]+)"), ϒentity)
				if ϒmobj != λ.None {
					ϒnumstr = λ.Calm(ϒmobj, "group", λ.IntLiteral(1))
					if λ.IsTrue(λ.Calm(ϒnumstr, "startswith", λ.StrLiteral("x"))) {
						ϒbase = λ.IntLiteral(16)
						ϒnumstr = λ.Mod(λ.StrLiteral("0%s"), ϒnumstr)
					} else {
						ϒbase = λ.IntLiteral(10)
					}
					τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							nil,
							&λ.Catcher{λ.ValueErrorType, func(λex λ.BaseException) {
								// pass
							}},
						)
						λexit, λret = λ.BlockExitReturn, λ.Cal(ϒcompat_chr, λ.Cal(λ.IntType, ϒnumstr, ϒbase))
						return
						return λ.BlockExitNormally, nil
					}()
					if τmp0 == λ.BlockExitReturn {
						return τmp1
					}
				}
				return λ.Mod(λ.StrLiteral("&%s;"), ϒentity)
			})
		ϒunescapeHTML = λ.NewFunction("unescapeHTML",
			[]λ.Param{
				{Name: "s"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒs = λargs[0]
				)
				if ϒs == λ.None {
					return λ.None
				}
				if !λ.IsTrue(λ.Eq(λ.Cal(λ.TypeType, ϒs), ϒcompat_str)) {
					panic(λ.Raise(λ.Cal(λ.AssertionErrorType)))
				}
				return λ.Cal(Ωre.ϒsub, λ.StrLiteral("&([^&;]+;)"), λ.NewFunction("<lambda>",
					[]λ.Param{
						{Name: "m"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒm = λargs[0]
						)
						return λ.Cal(ϒ_htmlentity_transform, λ.Calm(ϒm, "group", λ.IntLiteral(1)))
					}), ϒs)
			})
		ϒbug_reports_message = λ.NewFunction("bug_reports_message",
			nil,
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				return λ.StrLiteral("")
			})
		YoutubeDLError = λ.Cal(λ.TypeType, λ.StrLiteral("YoutubeDLError"), λ.NewTuple(λ.ExceptionType), func() λ.Dict {
			// pass
			return λ.ClassDictLiteral(map[λ.Object]λ.Object{})
		}())
		ExtractorError = λ.Cal(λ.TypeType, λ.StrLiteral("ExtractorError"), λ.NewTuple(YoutubeDLError), func() λ.Dict {
			var (
				ExtractorError___init__         λ.Object
				ExtractorError_format_traceback λ.Object
			)
			ExtractorError___init__ = λ.NewFunction("__init__",
				[]λ.Param{
					{Name: "self"},
					{Name: "msg"},
					{Name: "tb", Def: λ.None},
					{Name: "expected", Def: λ.False},
					{Name: "cause", Def: λ.None},
					{Name: "video_id", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcause    = λargs[4]
						ϒexpected = λargs[3]
						ϒmsg      = λargs[1]
						ϒself     = λargs[0]
						ϒtb       = λargs[2]
						ϒvideo_id = λargs[5]
						τmp0      λ.Object
					)
					if λ.Contains(λ.NewTuple(
						Ωerror.URLError,
						λ.None,
						UnavailableVideoError,
					), λ.GetItem(λ.Cal(Ωsys.ϒexc_info), λ.IntLiteral(0))) {
						ϒexpected = λ.True
					}
					if ϒvideo_id != λ.None {
						ϒmsg = λ.Add(λ.Add(ϒvideo_id, λ.StrLiteral(": ")), ϒmsg)
					}
					if λ.IsTrue(ϒcause) {
						τmp0 = λ.IAdd(ϒmsg, λ.Mod(λ.StrLiteral(" (caused by %r)"), ϒcause))
						ϒmsg = τmp0
					}
					if !λ.IsTrue(ϒexpected) {
						τmp0 = λ.IAdd(ϒmsg, λ.Cal(ϒbug_reports_message))
						ϒmsg = τmp0
					}
					λ.Calm(λ.Cal(λ.SuperType, ExtractorError, ϒself), "__init__", ϒmsg)
					λ.SetAttr(ϒself, "traceback", ϒtb)
					λ.SetAttr(ϒself, "exc_info", λ.Cal(Ωsys.ϒexc_info))
					λ.SetAttr(ϒself, "cause", ϒcause)
					λ.SetAttr(ϒself, "video_id", ϒvideo_id)
					return λ.None
				})
			ExtractorError_format_traceback = λ.NewFunction("format_traceback",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					if λ.GetAttr(ϒself, "traceback", nil) == λ.None {
						return λ.None
					}
					return λ.Calm(λ.StrLiteral(""), "join", λ.Calm(λ.None, "format_tb", λ.GetAttr(ϒself, "traceback", nil)))
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"__init__":         ExtractorError___init__,
				"format_traceback": ExtractorError_format_traceback,
			})
		}())
		RegexNotFoundError = λ.Cal(λ.TypeType, λ.StrLiteral("RegexNotFoundError"), λ.NewTuple(ExtractorError), func() λ.Dict {
			// pass
			return λ.ClassDictLiteral(map[λ.Object]λ.Object{})
		}())
		GeoRestrictedError = λ.Cal(λ.TypeType, λ.StrLiteral("GeoRestrictedError"), λ.NewTuple(ExtractorError), func() λ.Dict {
			var (
				GeoRestrictedError___init__ λ.Object
			)
			GeoRestrictedError___init__ = λ.NewFunction("__init__",
				[]λ.Param{
					{Name: "self"},
					{Name: "msg"},
					{Name: "countries", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcountries = λargs[2]
						ϒmsg       = λargs[1]
						ϒself      = λargs[0]
					)
					λ.Call(λ.GetAttr(λ.Cal(λ.SuperType, GeoRestrictedError, ϒself), "__init__", nil), λ.NewArgs(ϒmsg), λ.KWArgs{
						{Name: "expected", Value: λ.True},
					})
					λ.SetAttr(ϒself, "msg", ϒmsg)
					λ.SetAttr(ϒself, "countries", ϒcountries)
					return λ.None
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"__init__": GeoRestrictedError___init__,
			})
		}())
		DownloadError = λ.Cal(λ.TypeType, λ.StrLiteral("DownloadError"), λ.NewTuple(YoutubeDLError), func() λ.Dict {
			var (
				DownloadError___init__ λ.Object
			)
			DownloadError___init__ = λ.NewFunction("__init__",
				[]λ.Param{
					{Name: "self"},
					{Name: "msg"},
					{Name: "exc_info", Def: λ.None},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒexc_info = λargs[2]
						ϒmsg      = λargs[1]
						ϒself     = λargs[0]
					)
					λ.Calm(λ.Cal(λ.SuperType, DownloadError, ϒself), "__init__", ϒmsg)
					λ.SetAttr(ϒself, "exc_info", ϒexc_info)
					return λ.None
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"__init__": DownloadError___init__,
			})
		}())
		PostProcessingError = λ.Cal(λ.TypeType, λ.StrLiteral("PostProcessingError"), λ.NewTuple(YoutubeDLError), func() λ.Dict {

			return λ.ClassDictLiteral(map[λ.Object]λ.Object{})
		}())
		MaxDownloadsReached = λ.Cal(λ.TypeType, λ.StrLiteral("MaxDownloadsReached"), λ.NewTuple(YoutubeDLError), func() λ.Dict {
			// pass
			return λ.ClassDictLiteral(map[λ.Object]λ.Object{})
		}())
		UnavailableVideoError = λ.Cal(λ.TypeType, λ.StrLiteral("UnavailableVideoError"), λ.NewTuple(YoutubeDLError), func() λ.Dict {
			// pass
			return λ.ClassDictLiteral(map[λ.Object]λ.Object{})
		}())
		ϒparse_iso8601 = λ.NewFunction("parse_iso8601",
			[]λ.Param{
				{Name: "date_str"},
				{Name: "delimiter", Def: λ.StrLiteral("T")},
				{Name: "timezone", Def: λ.None},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdate_str  = λargs[0]
					ϒdelimiter = λargs[1]
					ϒtimezone  = λargs[2]
				)
				_ = ϒdate_str
				_ = ϒdelimiter
				_ = ϒtimezone
				return λ.IntLiteral(0)
			})
		ϒunified_strdate = λ.NewFunction("unified_strdate",
			[]λ.Param{
				{Name: "date_str"},
				{Name: "day_first", Def: λ.True},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdate_str  = λargs[0]
					ϒday_first = λargs[1]
				)
				_ = ϒdate_str
				_ = ϒday_first
				return λ.StrLiteral("20000101")
			})
		ϒunified_timestamp = λ.NewFunction("unified_timestamp",
			[]λ.Param{
				{Name: "date_str"},
				{Name: "day_first", Def: λ.True},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdate_str  = λargs[0]
					ϒday_first = λargs[1]
				)
				_ = ϒdate_str
				_ = ϒday_first
				return λ.IntLiteral(0)
			})
		ϒdetermine_ext = λ.NewFunction("determine_ext",
			[]λ.Param{
				{Name: "url"},
				{Name: "default_ext", Def: λ.StrLiteral("unknown_video")},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdefault_ext = λargs[1]
					ϒguess       λ.Object
					ϒurl         = λargs[0]
				)
				if λ.IsTrue(func() λ.Object {
					if λv := λ.NewBool(ϒurl == λ.None); λ.IsTrue(λv) {
						return λv
					} else {
						return λ.NewBool(!λ.Contains(ϒurl, λ.StrLiteral(".")))
					}
				}()) {
					return ϒdefault_ext
				}
				ϒguess = λ.GetItem(λ.Calm(λ.GetItem(λ.Calm(ϒurl, "partition", λ.StrLiteral("?")), λ.IntLiteral(0)), "rpartition", λ.StrLiteral(".")), λ.IntLiteral(2))
				if λ.IsTrue(λ.Cal(Ωre.ϒmatch, λ.StrLiteral("^[A-Za-z0-9]+$"), ϒguess)) {
					return ϒguess
				} else {
					if λ.Contains(KNOWN_EXTENSIONS, λ.Calm(ϒguess, "rstrip", λ.StrLiteral("/"))) {
						return λ.Calm(ϒguess, "rstrip", λ.StrLiteral("/"))
					} else {
						return ϒdefault_ext
					}
				}
				return λ.None
			})
		if λ.IsTrue(λ.Eq(Ωsys.ϒplatform, λ.StrLiteral("win32"))) {
			λ.SetAttr(λ.None, "argtypes", λ.NewList(
				λ.GetAttr(λ.GetAttr(λ.None, "wintypes", nil), "HANDLE", nil),
				λ.GetAttr(λ.GetAttr(λ.None, "wintypes", nil), "DWORD", nil),
				λ.GetAttr(λ.GetAttr(λ.None, "wintypes", nil), "DWORD", nil),
				λ.GetAttr(λ.GetAttr(λ.None, "wintypes", nil), "DWORD", nil),
				λ.GetAttr(λ.GetAttr(λ.None, "wintypes", nil), "DWORD", nil),
				λ.Calm(λ.None, "POINTER", λ.None),
			))
			λ.SetAttr(λ.None, "restype", λ.GetAttr(λ.GetAttr(λ.None, "wintypes", nil), "BOOL", nil))
			λ.SetAttr(λ.None, "argtypes", λ.NewList(
				λ.GetAttr(λ.GetAttr(λ.None, "wintypes", nil), "HANDLE", nil),
				λ.GetAttr(λ.GetAttr(λ.None, "wintypes", nil), "DWORD", nil),
				λ.GetAttr(λ.GetAttr(λ.None, "wintypes", nil), "DWORD", nil),
				λ.GetAttr(λ.GetAttr(λ.None, "wintypes", nil), "DWORD", nil),
				λ.Calm(λ.None, "POINTER", λ.None),
			))
			λ.SetAttr(λ.None, "restype", λ.GetAttr(λ.GetAttr(λ.None, "wintypes", nil), "BOOL", nil))
		} else {
			τmp1, τmp0 = func() (λexit λ.Object, λret λ.Object) {
				defer λ.CatchMulti(
					nil,
					&λ.Catcher{λ.ImportErrorType, func(λex λ.BaseException) {

					}},
				)

				return λ.BlockExitNormally, nil
			}()
		}
		ϒsmuggle_url = λ.NewFunction("smuggle_url",
			[]λ.Param{
				{Name: "url"},
				{Name: "data"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdata  = λargs[1]
					ϒidata λ.Object
					ϒsdata λ.Object
					ϒurl   = λargs[0]
					τmp0   λ.Object
				)
				τmp0 = λ.Cal(ϒunsmuggle_url, ϒurl, λ.DictLiteral(map[λ.Object]λ.Object{}))
				ϒurl = λ.GetItem(τmp0, λ.IntLiteral(0))
				ϒidata = λ.GetItem(τmp0, λ.IntLiteral(1))
				λ.Calm(ϒdata, "update", ϒidata)
				ϒsdata = λ.Cal(ϒcompat_urllib_parse_urlencode, λ.DictLiteral(map[string]λ.Object{
					"__youtubedl_smuggle": λ.Cal(Ωjson.ϒdumps, ϒdata),
				}))
				return λ.Add(λ.Add(ϒurl, λ.StrLiteral("#")), ϒsdata)
			})
		ϒunsmuggle_url = λ.NewFunction("unsmuggle_url",
			[]λ.Param{
				{Name: "smug_url"},
				{Name: "default", Def: λ.None},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdata     λ.Object
					ϒdefault  = λargs[1]
					ϒjsond    λ.Object
					ϒsdata    λ.Object
					ϒsmug_url = λargs[0]
					ϒurl      λ.Object
					τmp0      λ.Object
				)
				if !λ.Contains(ϒsmug_url, λ.StrLiteral("#__youtubedl_smuggle")) {
					return λ.NewTuple(
						ϒsmug_url,
						ϒdefault,
					)
				}
				τmp0 = λ.Calm(ϒsmug_url, "rpartition", λ.StrLiteral("#"))
				ϒurl = λ.GetItem(τmp0, λ.IntLiteral(0))
				_ = λ.GetItem(τmp0, λ.IntLiteral(1))
				ϒsdata = λ.GetItem(τmp0, λ.IntLiteral(2))
				ϒjsond = λ.GetItem(λ.GetItem(λ.Cal(ϒcompat_parse_qs, ϒsdata), λ.StrLiteral("__youtubedl_smuggle")), λ.IntLiteral(0))
				ϒdata = λ.Cal(Ωjson.ϒloads, ϒjsond)
				return λ.NewTuple(
					ϒurl,
					ϒdata,
				)
			})
		ϒlookup_unit_table = λ.NewFunction("lookup_unit_table",
			[]λ.Param{
				{Name: "unit_table"},
				{Name: "s"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒm          λ.Object
					ϒmult       λ.Object
					ϒnum_str    λ.Object
					ϒs          = λargs[1]
					ϒunit_table = λargs[0]
					ϒunits_re   λ.Object
				)
				ϒunits_re = λ.Calm(λ.StrLiteral("|"), "join", λ.Cal(λ.NewFunction("<generator>",
					nil,
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
							var (
								ϒu   λ.Object
								τmp0 λ.Object
								τmp1 λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, ϒunit_table)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒu = τmp1
								λgy.Yield(λ.Cal(Ωre.ϒescape, ϒu))
							}
							return λ.None
						})
					})))
				ϒm = λ.Cal(Ωre.ϒmatch, λ.Mod(λ.StrLiteral("(?P<num>[0-9]+(?:[,.][0-9]*)?)\\s*(?P<unit>%s)\\b"), ϒunits_re), ϒs)
				if !λ.IsTrue(ϒm) {
					return λ.None
				}
				ϒnum_str = λ.Calm(λ.Calm(ϒm, "group", λ.StrLiteral("num")), "replace", λ.StrLiteral(","), λ.StrLiteral("."))
				ϒmult = λ.GetItem(ϒunit_table, λ.Calm(ϒm, "group", λ.StrLiteral("unit")))
				return λ.Cal(λ.IntType, λ.Mul(λ.Cal(λ.FloatType, ϒnum_str), ϒmult))
			})
		ϒparse_filesize = λ.NewFunction("parse_filesize",
			[]λ.Param{
				{Name: "s"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒ_UNIT_TABLE λ.Object
					ϒs           = λargs[0]
				)
				if ϒs == λ.None {
					return λ.None
				}
				ϒ_UNIT_TABLE = λ.DictLiteral(map[string]λ.Object{
					"B":          λ.IntLiteral(1),
					"b":          λ.IntLiteral(1),
					"bytes":      λ.IntLiteral(1),
					"KiB":        λ.IntLiteral(1024),
					"KB":         λ.IntLiteral(1000),
					"kB":         λ.IntLiteral(1024),
					"Kb":         λ.IntLiteral(1000),
					"kb":         λ.IntLiteral(1000),
					"kilobytes":  λ.IntLiteral(1000),
					"kibibytes":  λ.IntLiteral(1024),
					"MiB":        λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(2)),
					"MB":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(2)),
					"mB":         λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(2)),
					"Mb":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(2)),
					"mb":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(2)),
					"megabytes":  λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(2)),
					"mebibytes":  λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(2)),
					"GiB":        λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(3)),
					"GB":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(3)),
					"gB":         λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(3)),
					"Gb":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(3)),
					"gb":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(3)),
					"gigabytes":  λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(3)),
					"gibibytes":  λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(3)),
					"TiB":        λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(4)),
					"TB":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(4)),
					"tB":         λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(4)),
					"Tb":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(4)),
					"tb":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(4)),
					"terabytes":  λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(4)),
					"tebibytes":  λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(4)),
					"PiB":        λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(5)),
					"PB":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(5)),
					"pB":         λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(5)),
					"Pb":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(5)),
					"pb":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(5)),
					"petabytes":  λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(5)),
					"pebibytes":  λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(5)),
					"EiB":        λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(6)),
					"EB":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(6)),
					"eB":         λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(6)),
					"Eb":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(6)),
					"eb":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(6)),
					"exabytes":   λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(6)),
					"exbibytes":  λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(6)),
					"ZiB":        λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(7)),
					"ZB":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(7)),
					"zB":         λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(7)),
					"Zb":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(7)),
					"zb":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(7)),
					"zettabytes": λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(7)),
					"zebibytes":  λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(7)),
					"YiB":        λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(8)),
					"YB":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(8)),
					"yB":         λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(8)),
					"Yb":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(8)),
					"yb":         λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(8)),
					"yottabytes": λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(8)),
					"yobibytes":  λ.Pow(λ.IntLiteral(1024), λ.IntLiteral(8)),
				})
				return λ.Cal(ϒlookup_unit_table, ϒ_UNIT_TABLE, ϒs)
			})
		ϒparse_count = λ.NewFunction("parse_count",
			[]λ.Param{
				{Name: "s"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒ_UNIT_TABLE λ.Object
					ϒs           = λargs[0]
				)
				if ϒs == λ.None {
					return λ.None
				}
				ϒs = λ.Calm(ϒs, "strip")
				if λ.IsTrue(λ.Cal(Ωre.ϒmatch, λ.StrLiteral("^[\\d,.]+$"), ϒs)) {
					return λ.Cal(ϒstr_to_int, ϒs)
				}
				ϒ_UNIT_TABLE = λ.DictLiteral(map[string]λ.Object{
					"k":  λ.IntLiteral(1000),
					"K":  λ.IntLiteral(1000),
					"m":  λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(2)),
					"M":  λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(2)),
					"kk": λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(2)),
					"KK": λ.Pow(λ.IntLiteral(1000), λ.IntLiteral(2)),
				})
				return λ.Cal(ϒlookup_unit_table, ϒ_UNIT_TABLE, ϒs)
			})
		ϒparse_resolution = λ.NewFunction("parse_resolution",
			[]λ.Param{
				{Name: "s"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒmobj λ.Object
					ϒs    = λargs[0]
				)
				if ϒs == λ.None {
					return λ.DictLiteral(map[λ.Object]λ.Object{})
				}
				ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("\\b(?P<w>\\d+)\\s*[xX×]\\s*(?P<h>\\d+)\\b"), ϒs)
				if λ.IsTrue(ϒmobj) {
					return λ.DictLiteral(map[string]λ.Object{
						"width":  λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.StrLiteral("w"))),
						"height": λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.StrLiteral("h"))),
					})
				}
				ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("\\b(\\d+)[pPiI]\\b"), ϒs)
				if λ.IsTrue(ϒmobj) {
					return λ.DictLiteral(map[string]λ.Object{
						"height": λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(1))),
					})
				}
				ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("\\b([48])[kK]\\b"), ϒs)
				if λ.IsTrue(ϒmobj) {
					return λ.DictLiteral(map[string]λ.Object{
						"height": λ.Mul(λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(1))), λ.IntLiteral(540)),
					})
				}
				return λ.DictLiteral(map[λ.Object]λ.Object{})
			})
		ϒparse_bitrate = λ.NewFunction("parse_bitrate",
			[]λ.Param{
				{Name: "s"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒmobj λ.Object
					ϒs    = λargs[0]
				)
				if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒs, ϒcompat_str)) {
					return λ.None
				}
				ϒmobj = λ.Cal(Ωre.ϒsearch, λ.StrLiteral("\\b(\\d+)\\s*kbps"), ϒs)
				if λ.IsTrue(ϒmobj) {
					return λ.Cal(λ.IntType, λ.Calm(ϒmobj, "group", λ.IntLiteral(1)))
				}
				return λ.None
			})
		ϒmonth_by_name = λ.NewFunction("month_by_name",
			[]λ.Param{
				{Name: "name"},
				{Name: "lang", Def: λ.StrLiteral("en")},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒlang        = λargs[1]
					ϒmonth_names λ.Object
					ϒname        = λargs[0]
					τmp0         λ.Object
					τmp1         λ.Object
				)
				ϒmonth_names = λ.Calm(MONTH_NAMES, "get", ϒlang, λ.GetItem(MONTH_NAMES, λ.StrLiteral("en")))
				τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
					defer λ.CatchMulti(
						nil,
						&λ.Catcher{λ.ValueErrorType, func(λex λ.BaseException) {
							λexit, λret = λ.BlockExitReturn, λ.None
							return
						}},
					)
					λexit, λret = λ.BlockExitReturn, λ.Add(λ.Calm(ϒmonth_names, "index", ϒname), λ.IntLiteral(1))
					return
					return λ.BlockExitNormally, nil
				}()
				if τmp0 == λ.BlockExitReturn {
					return τmp1
				}
				return λ.None
			})
		ϒfix_xml_ampersands = λ.NewFunction("fix_xml_ampersands",
			[]λ.Param{
				{Name: "xml_str"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒxml_str = λargs[0]
				)
				return λ.Cal(Ωre.ϒsub, λ.StrLiteral("&(?!amp;|lt;|gt;|apos;|quot;|#x[0-9a-fA-F]{,4};|#[0-9]{,4};)"), λ.StrLiteral("&amp;"), ϒxml_str)
			})
		ϒremove_end = λ.NewFunction("remove_end",
			[]λ.Param{
				{Name: "s"},
				{Name: "end"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒend = λargs[1]
					ϒs   = λargs[0]
				)
				return func() λ.Object {
					if λ.IsTrue(func() λ.Object {
						if λv := λ.NewBool(ϒs != λ.None); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Calm(ϒs, "endswith", ϒend)
						}
					}()) {
						return λ.GetItem(ϒs, λ.NewSlice(λ.None, λ.Neg(λ.Cal(λ.BuiltinLen, ϒend)), λ.None))
					} else {
						return ϒs
					}
				}()
			})
		ϒremove_quotes = λ.NewFunction("remove_quotes",
			[]λ.Param{
				{Name: "s"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒquote λ.Object
					ϒs     = λargs[0]
					τmp0   λ.Object
					τmp1   λ.Object
				)
				if λ.IsTrue(func() λ.Object {
					if λv := λ.NewBool(ϒs == λ.None); λ.IsTrue(λv) {
						return λv
					} else {
						return λ.Lt(λ.Cal(λ.BuiltinLen, ϒs), λ.IntLiteral(2))
					}
				}()) {
					return ϒs
				}
				τmp0 = λ.Cal(λ.BuiltinIter, λ.NewTuple(
					λ.StrLiteral("\""),
					λ.StrLiteral("'"),
				))
				for {
					if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
						break
					}
					ϒquote = τmp1
					if λ.IsTrue(func() λ.Object {
						if λv := λ.Eq(λ.GetItem(ϒs, λ.IntLiteral(0)), ϒquote); !λ.IsTrue(λv) {
							return λv
						} else {
							return λ.Eq(λ.GetItem(ϒs, λ.Neg(λ.IntLiteral(1))), ϒquote)
						}
					}()) {
						return λ.GetItem(ϒs, λ.NewSlice(λ.IntLiteral(1), λ.Neg(λ.IntLiteral(1)), λ.None))
					}
				}
				return ϒs
			})
		ϒurl_basename = λ.NewFunction("url_basename",
			[]λ.Param{
				{Name: "url"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒpath λ.Object
					ϒurl  = λargs[0]
				)
				ϒpath = λ.GetAttr(λ.Cal(Ωparse.ϒurlparse, ϒurl), "path", nil)
				return λ.GetItem(λ.Calm(λ.Calm(ϒpath, "strip", λ.StrLiteral("/")), "split", λ.StrLiteral("/")), λ.Neg(λ.IntLiteral(1)))
			})
		ϒbase_url = λ.NewFunction("base_url",
			[]λ.Param{
				{Name: "url"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒurl = λargs[0]
				)
				return λ.Calm(λ.Cal(Ωre.ϒmatch, λ.StrLiteral("https?://[^?#&]+/"), ϒurl), "group")
			})
		ϒurljoin = λ.NewFunction("urljoin",
			[]λ.Param{
				{Name: "base"},
				{Name: "path"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒbase = λargs[0]
					ϒpath = λargs[1]
				)
				if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒpath, λ.BytesType)) {
					ϒpath = λ.Calm(ϒpath, "decode", λ.StrLiteral("utf-8"))
				}
				if λ.IsTrue(func() λ.Object {
					if λv := λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒpath, ϒcompat_str))); λ.IsTrue(λv) {
						return λv
					} else {
						return λ.NewBool(!λ.IsTrue(ϒpath))
					}
				}()) {
					return λ.None
				}
				if λ.IsTrue(λ.Cal(Ωre.ϒmatch, λ.StrLiteral("^(?:[a-zA-Z][a-zA-Z0-9+-.]*:)?//"), ϒpath)) {
					return ϒpath
				}
				if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒbase, λ.BytesType)) {
					ϒbase = λ.Calm(ϒbase, "decode", λ.StrLiteral("utf-8"))
				}
				if λ.IsTrue(func() λ.Object {
					if λv := λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒbase, ϒcompat_str))); λ.IsTrue(λv) {
						return λv
					} else {
						return λ.NewBool(!λ.IsTrue(λ.Cal(Ωre.ϒmatch, λ.StrLiteral("^(?:https?:)?//"), ϒbase)))
					}
				}()) {
					return λ.None
				}
				return λ.Cal(Ωparse.ϒurljoin, ϒbase, ϒpath)
			})
		HEADRequest = λ.Cal(λ.TypeType, λ.StrLiteral("HEADRequest"), λ.NewTuple(Ωrequest.Request), func() λ.Dict {
			var (
				HEADRequest_get_method λ.Object
			)
			HEADRequest_get_method = λ.NewFunction("get_method",
				[]λ.Param{
					{Name: "self"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒself = λargs[0]
					)
					_ = ϒself
					return λ.StrLiteral("HEAD")
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"get_method": HEADRequest_get_method,
			})
		}())
		ϒint_or_none = λ.NewFunction("int_or_none",
			[]λ.Param{
				{Name: "v"},
				{Name: "scale", Def: λ.IntLiteral(1)},
				{Name: "default", Def: λ.None},
				{Name: "get_attr", Def: λ.None},
				{Name: "invscale", Def: λ.IntLiteral(1)},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdefault  = λargs[2]
					ϒget_attr = λargs[3]
					ϒinvscale = λargs[4]
					ϒscale    = λargs[1]
					ϒv        = λargs[0]
					τmp0      λ.Object
					τmp1      λ.Object
				)
				if λ.IsTrue(ϒget_attr) {
					if ϒv != λ.None {
						ϒv = λ.Cal(λ.BuiltinGetAttr, ϒv, ϒget_attr, λ.None)
					}
				}
				if λ.IsTrue(λ.Eq(ϒv, λ.StrLiteral(""))) {
					ϒv = λ.None
				}
				if ϒv == λ.None {
					return ϒdefault
				}
				τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
					defer λ.CatchMulti(
						nil,
						&λ.Catcher{λ.NewTuple(
							λ.ValueErrorType,
							λ.TypeErrorType,
						), func(λex λ.BaseException) {
							λexit, λret = λ.BlockExitReturn, ϒdefault
							return
						}},
					)
					λexit, λret = λ.BlockExitReturn, λ.FloorDiv(λ.Mul(λ.Cal(λ.IntType, ϒv), ϒinvscale), ϒscale)
					return
					return λ.BlockExitNormally, nil
				}()
				if τmp0 == λ.BlockExitReturn {
					return τmp1
				}
				return λ.None
			})
		ϒstr_or_none = λ.NewFunction("str_or_none",
			[]λ.Param{
				{Name: "v"},
				{Name: "default", Def: λ.None},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdefault = λargs[1]
					ϒv       = λargs[0]
				)
				return func() λ.Object {
					if ϒv == λ.None {
						return ϒdefault
					} else {
						return λ.Cal(ϒcompat_str, ϒv)
					}
				}()
			})
		ϒstr_to_int = λ.NewFunction("str_to_int",
			[]λ.Param{
				{Name: "int_str"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒint_str = λargs[0]
				)
				if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒint_str, ϒcompat_integer_types)) {
					return ϒint_str
				} else {
					if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒint_str, ϒcompat_str)) {
						ϒint_str = λ.Cal(Ωre.ϒsub, λ.StrLiteral("[,\\.\\+]"), λ.StrLiteral(""), ϒint_str)
						return λ.Cal(ϒint_or_none, ϒint_str)
					}
				}
				return λ.None
			})
		ϒfloat_or_none = λ.NewFunction("float_or_none",
			[]λ.Param{
				{Name: "v"},
				{Name: "scale", Def: λ.IntLiteral(1)},
				{Name: "invscale", Def: λ.IntLiteral(1)},
				{Name: "default", Def: λ.None},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdefault  = λargs[3]
					ϒinvscale = λargs[2]
					ϒscale    = λargs[1]
					ϒv        = λargs[0]
					τmp0      λ.Object
					τmp1      λ.Object
				)
				if ϒv == λ.None {
					return ϒdefault
				}
				τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
					defer λ.CatchMulti(
						nil,
						&λ.Catcher{λ.NewTuple(
							λ.ValueErrorType,
							λ.TypeErrorType,
						), func(λex λ.BaseException) {
							λexit, λret = λ.BlockExitReturn, ϒdefault
							return
						}},
					)
					λexit, λret = λ.BlockExitReturn, λ.TrueDiv(λ.Mul(λ.Cal(λ.FloatType, ϒv), ϒinvscale), ϒscale)
					return
					return λ.BlockExitNormally, nil
				}()
				if τmp0 == λ.BlockExitReturn {
					return τmp1
				}
				return λ.None
			})
		ϒbool_or_none = λ.NewFunction("bool_or_none",
			[]λ.Param{
				{Name: "v"},
				{Name: "default", Def: λ.None},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdefault = λargs[1]
					ϒv       = λargs[0]
				)
				return func() λ.Object {
					if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒv, λ.BoolType)) {
						return ϒv
					} else {
						return ϒdefault
					}
				}()
			})
		ϒstrip_or_none = λ.NewFunction("strip_or_none",
			[]λ.Param{
				{Name: "v"},
				{Name: "default", Def: λ.None},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdefault = λargs[1]
					ϒv       = λargs[0]
				)
				return func() λ.Object {
					if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒv, ϒcompat_str)) {
						return λ.Calm(ϒv, "strip")
					} else {
						return ϒdefault
					}
				}()
			})
		ϒurl_or_none = λ.NewFunction("url_or_none",
			[]λ.Param{
				{Name: "url"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒurl = λargs[0]
				)
				if λ.IsTrue(func() λ.Object {
					if λv := λ.NewBool(!λ.IsTrue(ϒurl)); λ.IsTrue(λv) {
						return λv
					} else {
						return λ.NewBool(!λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒurl, ϒcompat_str)))
					}
				}()) {
					return λ.None
				}
				ϒurl = λ.Calm(ϒurl, "strip")
				return func() λ.Object {
					if λ.IsTrue(λ.Cal(Ωre.ϒmatch, λ.StrLiteral("^(?:(?:https?|rt(?:m(?:pt?[es]?|fp)|sp[su]?)|mms|ftps?):)?//"), ϒurl)) {
						return ϒurl
					} else {
						return λ.None
					}
				}()
			})
		ϒparse_duration = λ.NewFunction("parse_duration",
			[]λ.Param{
				{Name: "s"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdays     λ.Object
					ϒduration λ.Object
					ϒhours    λ.Object
					ϒm        λ.Object
					ϒmins     λ.Object
					ϒms       λ.Object
					ϒs        = λargs[0]
					ϒsecs     λ.Object
					τmp0      λ.Object
				)
				if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒs, ϒcompat_basestring)) {
					return λ.None
				}
				ϒs = λ.Calm(ϒs, "strip")
				τmp0 = λ.Mul(λ.NewList(λ.None), λ.IntLiteral(5))
				ϒdays = λ.GetItem(τmp0, λ.IntLiteral(0))
				ϒhours = λ.GetItem(τmp0, λ.IntLiteral(1))
				ϒmins = λ.GetItem(τmp0, λ.IntLiteral(2))
				ϒsecs = λ.GetItem(τmp0, λ.IntLiteral(3))
				ϒms = λ.GetItem(τmp0, λ.IntLiteral(4))
				ϒm = λ.Cal(Ωre.ϒmatch, λ.StrLiteral("(?:(?:(?:(?P<days>[0-9]+):)?(?P<hours>[0-9]+):)?(?P<mins>[0-9]+):)?(?P<secs>[0-9]+)(?P<ms>\\.[0-9]+)?Z?$"), ϒs)
				if λ.IsTrue(ϒm) {
					τmp0 = λ.Calm(ϒm, "groups")
					ϒdays = λ.GetItem(τmp0, λ.IntLiteral(0))
					ϒhours = λ.GetItem(τmp0, λ.IntLiteral(1))
					ϒmins = λ.GetItem(τmp0, λ.IntLiteral(2))
					ϒsecs = λ.GetItem(τmp0, λ.IntLiteral(3))
					ϒms = λ.GetItem(τmp0, λ.IntLiteral(4))
				} else {
					ϒm = λ.Cal(Ωre.ϒmatch, λ.StrLiteral("(?ix)(?:P?\n                (?:\n                    [0-9]+\\s*y(?:ears?)?\\s*\n                )?\n                (?:\n                    [0-9]+\\s*m(?:onths?)?\\s*\n                )?\n                (?:\n                    [0-9]+\\s*w(?:eeks?)?\\s*\n                )?\n                (?:\n                    (?P<days>[0-9]+)\\s*d(?:ays?)?\\s*\n                )?\n                T)?\n                (?:\n                    (?P<hours>[0-9]+)\\s*h(?:ours?)?\\s*\n                )?\n                (?:\n                    (?P<mins>[0-9]+)\\s*m(?:in(?:ute)?s?)?\\s*\n                )?\n                (?:\n                    (?P<secs>[0-9]+)(?P<ms>\\.[0-9]+)?\\s*s(?:ec(?:ond)?s?)?\\s*\n                )?Z?$"), ϒs)
					if λ.IsTrue(ϒm) {
						τmp0 = λ.Calm(ϒm, "groups")
						ϒdays = λ.GetItem(τmp0, λ.IntLiteral(0))
						ϒhours = λ.GetItem(τmp0, λ.IntLiteral(1))
						ϒmins = λ.GetItem(τmp0, λ.IntLiteral(2))
						ϒsecs = λ.GetItem(τmp0, λ.IntLiteral(3))
						ϒms = λ.GetItem(τmp0, λ.IntLiteral(4))
					} else {
						ϒm = λ.Cal(Ωre.ϒmatch, λ.StrLiteral("(?i)(?:(?P<hours>[0-9.]+)\\s*(?:hours?)|(?P<mins>[0-9.]+)\\s*(?:mins?\\.?|minutes?)\\s*)Z?$"), ϒs)
						if λ.IsTrue(ϒm) {
							τmp0 = λ.Calm(ϒm, "groups")
							ϒhours = λ.GetItem(τmp0, λ.IntLiteral(0))
							ϒmins = λ.GetItem(τmp0, λ.IntLiteral(1))
						} else {
							return λ.None
						}
					}
				}
				ϒduration = λ.IntLiteral(0)
				if λ.IsTrue(ϒsecs) {
					τmp0 = λ.IAdd(ϒduration, λ.Cal(λ.FloatType, ϒsecs))
					ϒduration = τmp0
				}
				if λ.IsTrue(ϒmins) {
					τmp0 = λ.IAdd(ϒduration, λ.Mul(λ.Cal(λ.FloatType, ϒmins), λ.IntLiteral(60)))
					ϒduration = τmp0
				}
				if λ.IsTrue(ϒhours) {
					τmp0 = λ.IAdd(ϒduration, λ.Mul(λ.Mul(λ.Cal(λ.FloatType, ϒhours), λ.IntLiteral(60)), λ.IntLiteral(60)))
					ϒduration = τmp0
				}
				if λ.IsTrue(ϒdays) {
					τmp0 = λ.IAdd(ϒduration, λ.Mul(λ.Mul(λ.Mul(λ.Cal(λ.FloatType, ϒdays), λ.IntLiteral(24)), λ.IntLiteral(60)), λ.IntLiteral(60)))
					ϒduration = τmp0
				}
				if λ.IsTrue(ϒms) {
					τmp0 = λ.IAdd(ϒduration, λ.Cal(λ.FloatType, ϒms))
					ϒduration = τmp0
				}
				return ϒduration
			})
		PagedList = λ.Cal(λ.TypeType, λ.StrLiteral("PagedList"), λ.NewTuple(λ.ObjectType), func() λ.Dict {

			return λ.ClassDictLiteral(map[λ.Object]λ.Object{})
		}())
		ϒlowercase_escape = λ.NewFunction("lowercase_escape",
			[]λ.Param{
				{Name: "s"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒs              = λargs[0]
					ϒunicode_escape λ.Object
				)
				ϒunicode_escape = λ.Cal(Ωcodecs.ϒgetdecoder, λ.StrLiteral("unicode_escape"))
				return λ.Cal(Ωre.ϒsub, λ.StrLiteral("\\\\u[0-9a-fA-F]{4}"), λ.NewFunction("<lambda>",
					[]λ.Param{
						{Name: "m"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒm = λargs[0]
						)
						return λ.GetItem(λ.Cal(ϒunicode_escape, λ.Calm(ϒm, "group", λ.IntLiteral(0))), λ.IntLiteral(0))
					}), ϒs)
			})
		ϒurlencode_postdata = λ.NewFunction("urlencode_postdata",
			nil,
			0, true, true,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒargs  = λargs[0]
					ϒkargs = λargs[1]
				)
				return λ.Calm(λ.Call(ϒcompat_urllib_parse_urlencode, λ.NewArgs(λ.Unpack(λ.AsStarred(ϒargs))...), λ.KWArgs{
					{Name: "", Value: ϒkargs},
				}), "encode", λ.StrLiteral("ascii"))
			})
		ϒupdate_url_query = λ.NewFunction("update_url_query",
			[]λ.Param{
				{Name: "url"},
				{Name: "query"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒparsed_url λ.Object
					ϒqs         λ.Object
					ϒquery      = λargs[1]
					ϒurl        = λargs[0]
				)
				if !λ.IsTrue(ϒquery) {
					return ϒurl
				}
				ϒparsed_url = λ.Cal(Ωparse.ϒurlparse, ϒurl)
				ϒqs = λ.Cal(ϒcompat_parse_qs, λ.GetAttr(ϒparsed_url, "query", nil))
				λ.Calm(ϒqs, "update", ϒquery)
				return λ.Cal(Ωparse.ϒurlunparse, λ.Call(λ.GetAttr(ϒparsed_url, "_replace", nil), nil, λ.KWArgs{
					{Name: "query", Value: λ.Cal(ϒcompat_urllib_parse_urlencode, ϒqs, λ.True)},
				}))
			})
		ϒupdate_Request = λ.NewFunction("update_Request",
			[]λ.Param{
				{Name: "req"},
				{Name: "url", Def: λ.None},
				{Name: "data", Def: λ.None},
				{Name: "headers", Def: λ.DictLiteral(map[λ.Object]λ.Object{})},
				{Name: "query", Def: λ.DictLiteral(map[λ.Object]λ.Object{})},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒdata           = λargs[2]
					ϒheaders        = λargs[3]
					ϒnew_req        λ.Object
					ϒquery          = λargs[4]
					ϒreq            = λargs[0]
					ϒreq_data       λ.Object
					ϒreq_get_method λ.Object
					ϒreq_headers    λ.Object
					ϒreq_type       λ.Object
					ϒreq_url        λ.Object
					ϒurl            = λargs[1]
				)
				ϒreq_headers = λ.Calm(λ.GetAttr(ϒreq, "headers", nil), "copy")
				λ.Calm(ϒreq_headers, "update", ϒheaders)
				ϒreq_data = func() λ.Object {
					if λv := ϒdata; λ.IsTrue(λv) {
						return λv
					} else {
						return λ.GetAttr(ϒreq, "data", nil)
					}
				}()
				ϒreq_url = λ.Cal(ϒupdate_url_query, func() λ.Object {
					if λv := ϒurl; λ.IsTrue(λv) {
						return λv
					} else {
						return λ.Calm(ϒreq, "get_full_url")
					}
				}(), ϒquery)
				ϒreq_get_method = λ.Calm(ϒreq, "get_method")
				if λ.IsTrue(λ.Eq(ϒreq_get_method, λ.StrLiteral("HEAD"))) {
					ϒreq_type = HEADRequest
				} else {
					if λ.IsTrue(λ.Eq(ϒreq_get_method, λ.StrLiteral("PUT"))) {
						ϒreq_type = λ.None
					} else {
						ϒreq_type = Ωrequest.Request
					}
				}
				ϒnew_req = λ.Call(ϒreq_type, λ.NewArgs(ϒreq_url), λ.KWArgs{
					{Name: "data", Value: ϒreq_data},
					{Name: "headers", Value: ϒreq_headers},
					{Name: "origin_req_host", Value: λ.GetAttr(ϒreq, "origin_req_host", nil)},
					{Name: "unverifiable", Value: λ.GetAttr(ϒreq, "unverifiable", nil)},
				})
				if λ.IsTrue(λ.Cal(λ.BuiltinHasAttr, ϒreq, λ.StrLiteral("timeout"))) {
					λ.SetAttr(ϒnew_req, "timeout", λ.GetAttr(ϒreq, "timeout", nil))
				}
				return ϒnew_req
			})
		ϒdict_get = λ.NewFunction("dict_get",
			[]λ.Param{
				{Name: "d"},
				{Name: "key_or_keys"},
				{Name: "default", Def: λ.None},
				{Name: "skip_false_values", Def: λ.True},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒd                 = λargs[0]
					ϒdefault           = λargs[2]
					ϒkey               λ.Object
					ϒkey_or_keys       = λargs[1]
					ϒskip_false_values = λargs[3]
					τmp0               λ.Object
					τmp1               λ.Object
				)
				if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒkey_or_keys, λ.NewTuple(
					λ.ListType,
					λ.TupleType,
				))) {
					τmp0 = λ.Cal(λ.BuiltinIter, ϒkey_or_keys)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						ϒkey = τmp1
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.Contains(ϒd, ϒkey)); λ.IsTrue(λv) {
								return λv
							} else if λv := λ.NewBool(λ.GetItem(ϒd, ϒkey) == λ.None); λ.IsTrue(λv) {
								return λv
							} else {
								return func() λ.Object {
									if λv := ϒskip_false_values; !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.NewBool(!λ.IsTrue(λ.GetItem(ϒd, ϒkey)))
									}
								}()
							}
						}()) {
							continue
						}
						return λ.GetItem(ϒd, ϒkey)
					}
					return ϒdefault
				}
				return λ.Calm(ϒd, "get", ϒkey_or_keys, ϒdefault)
			})
		ϒtry_get = λ.NewFunction("try_get",
			[]λ.Param{
				{Name: "src"},
				{Name: "getter"},
				{Name: "expected_type", Def: λ.None},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒexpected_type = λargs[2]
					ϒget           λ.Object
					ϒgetter        = λargs[1]
					ϒsrc           = λargs[0]
					ϒv             λ.Object
					τmp0           λ.Object
					τmp1           λ.Object
					τmp2           λ.Object
					τmp3           λ.Object
				)
				if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒgetter, λ.NewTuple(
					λ.ListType,
					λ.TupleType,
				))) {
					ϒgetter = λ.NewList(ϒgetter)
				}
				τmp0 = λ.Cal(λ.BuiltinIter, ϒgetter)
				for {
					if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
						break
					}
					ϒget = τmp1
					τmp2, τmp3 = func() (λexit λ.Object, λret λ.Object) {
						defer λ.CatchMulti(
							func() {
								if λ.IsTrue(func() λ.Object {
									if λv := λ.NewBool(ϒexpected_type == λ.None); λ.IsTrue(λv) {
										return λv
									} else {
										return λ.Cal(λ.BuiltinIsInstance, ϒv, ϒexpected_type)
									}
								}()) {
									λexit, λret = λ.BlockExitReturn, ϒv
									return
								}
							},
							&λ.Catcher{λ.NewTuple(
								λ.AttributeErrorType,
								λ.KeyErrorType,
								λ.TypeErrorType,
								λ.IndexErrorType,
							), func(λex λ.BaseException) {
								// pass
							}},
						)
						ϒv = λ.Cal(ϒget, ϒsrc)
						return λ.BlockExitNormally, nil
					}()
					if τmp2 == λ.BlockExitReturn {
						return τmp3
					}
				}
				return λ.None
			})
		ϒmerge_dicts = λ.NewFunction("merge_dicts",
			nil,
			0, true, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒa_dict λ.Object
					ϒdicts  = λargs[0]
					ϒk      λ.Object
					ϒmerged λ.Object
					ϒv      λ.Object
					τmp0    λ.Object
					τmp1    λ.Object
					τmp2    λ.Object
					τmp3    λ.Object
					τmp4    λ.Object
				)
				ϒmerged = λ.DictLiteral(map[λ.Object]λ.Object{})
				τmp0 = λ.Cal(λ.BuiltinIter, ϒdicts)
				for {
					if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
						break
					}
					ϒa_dict = τmp1
					τmp2 = λ.Cal(λ.BuiltinIter, λ.Calm(ϒa_dict, "items"))
					for {
						if τmp3 = λ.NextDefault(τmp2, λ.AfterLast); τmp3 == λ.AfterLast {
							break
						}
						τmp4 = τmp3
						ϒk = λ.GetItem(τmp4, λ.IntLiteral(0))
						ϒv = λ.GetItem(τmp4, λ.IntLiteral(1))
						if ϒv == λ.None {
							continue
						}
						if λ.IsTrue(func() λ.Object {
							if λv := λ.NewBool(!λ.Contains(ϒmerged, ϒk)); λ.IsTrue(λv) {
								return λv
							} else {
								return func() λ.Object {
									if λv := λ.Cal(λ.BuiltinIsInstance, ϒv, ϒcompat_str); !λ.IsTrue(λv) {
										return λv
									} else if λv := ϒv; !λ.IsTrue(λv) {
										return λv
									} else if λv := λ.Cal(λ.BuiltinIsInstance, λ.GetItem(ϒmerged, ϒk), ϒcompat_str); !λ.IsTrue(λv) {
										return λv
									} else {
										return λ.NewBool(!λ.IsTrue(λ.GetItem(ϒmerged, ϒk)))
									}
								}()
							}
						}()) {
							λ.SetItem(ϒmerged, ϒk, ϒv)
						}
					}
				}
				return ϒmerged
			})
		US_RATINGS = λ.DictLiteral(map[string]int{
			"G":     0,
			"PG":    10,
			"PG-13": 13,
			"R":     16,
			"NC":    18,
		})
		TV_PARENTAL_GUIDELINES = λ.DictLiteral(map[string]int{
			"TV-Y":  0,
			"TV-Y7": 7,
			"TV-G":  0,
			"TV-PG": 0,
			"TV-14": 14,
			"TV-MA": 17,
		})
		ϒparse_age_limit = λ.NewFunction("parse_age_limit",
			[]λ.Param{
				{Name: "s"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒm λ.Object
					ϒs = λargs[0]
				)
				if λ.IsTrue(λ.Eq(λ.Cal(λ.TypeType, ϒs), λ.IntType)) {
					return func() λ.Object {
						if λ.IsTrue(func() λ.Object {
							var λl λ.Object = λ.IntLiteral(0)
							var λr λ.Object = ϒs
							if !λ.IsTrue(λ.Le(λl, λr)) {
								return λ.False
							}
							λl = λr
							λr = λ.IntLiteral(21)
							if !λ.IsTrue(λ.Le(λl, λr)) {
								return λ.False
							}
							return λ.True
						}()) {
							return ϒs
						} else {
							return λ.None
						}
					}()
				}
				if !λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒs, ϒcompat_basestring)) {
					return λ.None
				}
				ϒm = λ.Cal(Ωre.ϒmatch, λ.StrLiteral("^(?P<age>\\d{1,2})\\+?$"), ϒs)
				if λ.IsTrue(ϒm) {
					return λ.Cal(λ.IntType, λ.Calm(ϒm, "group", λ.StrLiteral("age")))
				}
				if λ.Contains(US_RATINGS, ϒs) {
					return λ.GetItem(US_RATINGS, ϒs)
				}
				ϒm = λ.Cal(Ωre.ϒmatch, λ.Mod(λ.StrLiteral("^TV[_-]?(%s)$"), λ.Calm(λ.StrLiteral("|"), "join", λ.Cal(λ.NewFunction("<generator>",
					nil,
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
							var (
								ϒk   λ.Object
								τmp0 λ.Object
								τmp1 λ.Object
							)
							τmp0 = λ.Cal(λ.BuiltinIter, TV_PARENTAL_GUIDELINES)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								ϒk = τmp1
								λgy.Yield(λ.GetItem(ϒk, λ.NewSlice(λ.IntLiteral(3), λ.None, λ.None)))
							}
							return λ.None
						})
					})))), ϒs)
				if λ.IsTrue(ϒm) {
					return λ.GetItem(TV_PARENTAL_GUIDELINES, λ.Add(λ.StrLiteral("TV-"), λ.Calm(ϒm, "group", λ.IntLiteral(1))))
				}
				return λ.None
			})
		ϒstrip_jsonp = λ.NewFunction("strip_jsonp",
			[]λ.Param{
				{Name: "code"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒcode = λargs[0]
				)
				return λ.Cal(Ωre.ϒsub, λ.StrLiteral("(?sx)^\n            (?:window\\.)?(?P<func_name>[a-zA-Z0-9_.$]*)\n            (?:\\s*&&\\s*(?P=func_name))?\n            \\s*\\(\\s*(?P<callback_data>.*)\\);?\n            \\s*?(?://[^\\n]*)*$"), λ.StrLiteral("\\g<callback_data>"), ϒcode)
			})
		ϒjs_to_json = λ.NewFunction("js_to_json",
			[]λ.Param{
				{Name: "code"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					COMMENT_RE    λ.Object
					INTEGER_TABLE λ.Object
					SKIP_RE       λ.Object
					ϒcode         = λargs[0]
					ϒfix_kv       λ.Object
				)
				COMMENT_RE = λ.StrLiteral("/\\*(?:(?!\\*/).)*?\\*/|//[^\\n]*")
				SKIP_RE = λ.Call(λ.GetAttr(λ.StrLiteral("\\s*(?:{comment})?\\s*"), "format", nil), nil, λ.KWArgs{
					{Name: "comment", Value: COMMENT_RE},
				})
				INTEGER_TABLE = λ.NewTuple(
					λ.NewTuple(
						λ.Call(λ.GetAttr(λ.StrLiteral("(?s)^(0[xX][0-9a-fA-F]+){skip}:?$"), "format", nil), nil, λ.KWArgs{
							{Name: "skip", Value: SKIP_RE},
						}),
						λ.IntLiteral(16),
					),
					λ.NewTuple(
						λ.Call(λ.GetAttr(λ.StrLiteral("(?s)^(0+[0-7]+){skip}:?$"), "format", nil), nil, λ.KWArgs{
							{Name: "skip", Value: SKIP_RE},
						}),
						λ.IntLiteral(8),
					),
				)
				ϒfix_kv = λ.NewFunction("fix_kv",
					[]λ.Param{
						{Name: "m"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒbase  λ.Object
							ϒi     λ.Object
							ϒim    λ.Object
							ϒm     = λargs[0]
							ϒregex λ.Object
							ϒv     λ.Object
							τmp0   λ.Object
							τmp1   λ.Object
							τmp2   λ.Object
						)
						ϒv = λ.Calm(ϒm, "group", λ.IntLiteral(0))
						if λ.Contains(λ.NewTuple(
							λ.StrLiteral("true"),
							λ.StrLiteral("false"),
							λ.StrLiteral("null"),
						), ϒv) {
							return ϒv
						} else {
							if λ.IsTrue(func() λ.Object {
								if λv := λ.Calm(ϒv, "startswith", λ.StrLiteral("/*")); λ.IsTrue(λv) {
									return λv
								} else if λv := λ.Calm(ϒv, "startswith", λ.StrLiteral("//")); λ.IsTrue(λv) {
									return λv
								} else if λv := λ.Calm(ϒv, "startswith", λ.StrLiteral("!")); λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Eq(ϒv, λ.StrLiteral(","))
								}
							}()) {
								return λ.StrLiteral("")
							}
						}
						if λ.Contains(λ.NewTuple(
							λ.StrLiteral("'"),
							λ.StrLiteral("\""),
						), λ.GetItem(ϒv, λ.IntLiteral(0))) {
							ϒv = λ.Cal(Ωre.ϒsub, λ.StrLiteral("(?s)\\\\.|\""), λ.NewFunction("<lambda>",
								[]λ.Param{
									{Name: "m"},
								},
								0, false, false,
								func(λargs []λ.Object) λ.Object {
									var (
										ϒm = λargs[0]
									)
									return λ.Calm(λ.DictLiteral(map[string]string{
										"\"":   "\\\"",
										"\\'":  "'",
										"\\\n": "",
										"\\x":  "\\u00",
									}), "get", λ.Calm(ϒm, "group", λ.IntLiteral(0)), λ.Calm(ϒm, "group", λ.IntLiteral(0)))
								}), λ.GetItem(ϒv, λ.NewSlice(λ.IntLiteral(1), λ.Neg(λ.IntLiteral(1)), λ.None)))
						} else {
							τmp0 = λ.Cal(λ.BuiltinIter, INTEGER_TABLE)
							for {
								if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
									break
								}
								τmp2 = τmp1
								ϒregex = λ.GetItem(τmp2, λ.IntLiteral(0))
								ϒbase = λ.GetItem(τmp2, λ.IntLiteral(1))
								ϒim = λ.Cal(Ωre.ϒmatch, ϒregex, ϒv)
								if λ.IsTrue(ϒim) {
									ϒi = λ.Cal(λ.IntType, λ.Calm(ϒim, "group", λ.IntLiteral(1)), ϒbase)
									return func() λ.Object {
										if λ.IsTrue(λ.Calm(ϒv, "endswith", λ.StrLiteral(":"))) {
											return λ.Mod(λ.StrLiteral("\"%d\":"), ϒi)
										} else {
											return λ.Mod(λ.StrLiteral("%d"), ϒi)
										}
									}()
								}
							}
						}
						return λ.Mod(λ.StrLiteral("\"%s\""), ϒv)
					})
				return λ.Cal(Ωre.ϒsub, λ.Call(λ.GetAttr(λ.StrLiteral("(?sx)\n        \"(?:[^\"\\\\]*(?:\\\\\\\\|\\\\['\"nurtbfx/\\n]))*[^\"\\\\]*\"|\n        '(?:[^'\\\\]*(?:\\\\\\\\|\\\\['\"nurtbfx/\\n]))*[^'\\\\]*'|\n        {comment}|,(?={skip}[\\]}}])|\n        (?:(?<![0-9])[eE]|[a-df-zA-DF-Z_])[.a-zA-Z_0-9]*|\n        \\b(?:0[xX][0-9a-fA-F]+|0+[0-7]+)(?:{skip}:)?|\n        [0-9]+(?={skip}:)|\n        !+\n        "), "format", nil), nil, λ.KWArgs{
					{Name: "comment", Value: COMMENT_RE},
					{Name: "skip", Value: SKIP_RE},
				}), ϒfix_kv, ϒcode)
			})
		ϒqualities = λ.NewFunction("qualities",
			[]λ.Param{
				{Name: "quality_ids"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒq           λ.Object
					ϒquality_ids = λargs[0]
				)
				ϒq = λ.NewFunction("q",
					[]λ.Param{
						{Name: "qid"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒqid = λargs[0]
							τmp0 λ.Object
							τmp1 λ.Object
						)
						τmp0, τmp1 = func() (λexit λ.Object, λret λ.Object) {
							defer λ.CatchMulti(
								nil,
								&λ.Catcher{λ.ValueErrorType, func(λex λ.BaseException) {
									λexit, λret = λ.BlockExitReturn, λ.Neg(λ.IntLiteral(1))
									return
								}},
							)
							λexit, λret = λ.BlockExitReturn, λ.Calm(ϒquality_ids, "index", ϒqid)
							return
							return λ.BlockExitNormally, nil
						}()
						if τmp0 == λ.BlockExitReturn {
							return τmp1
						}
						return λ.None
					})
				return ϒq
			})
		DEFAULT_OUTTMPL = λ.StrLiteral("%(title)s-%(id)s.%(ext)s")
		ϒlimit_length = λ.NewFunction("limit_length",
			[]λ.Param{
				{Name: "s"},
				{Name: "length"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ELLIPSES λ.Object
					ϒlength  = λargs[1]
					ϒs       = λargs[0]
				)
				if ϒs == λ.None {
					return λ.None
				}
				ELLIPSES = λ.StrLiteral("...")
				if λ.IsTrue(λ.Gt(λ.Cal(λ.BuiltinLen, ϒs), ϒlength)) {
					return λ.Add(λ.GetItem(ϒs, λ.NewSlice(λ.None, λ.Sub(ϒlength, λ.Cal(λ.BuiltinLen, ELLIPSES)), λ.None)), ELLIPSES)
				}
				return ϒs
			})
		ϒerror_to_compat_str = λ.NewFunction("error_to_compat_str",
			[]λ.Param{
				{Name: "err"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒerr     = λargs[0]
					ϒerr_str λ.Object
				)
				ϒerr_str = λ.Cal(λ.StrType, ϒerr)
				if λ.IsTrue(λ.Lt(λ.GetItem(Ωsys.ϒversion_info, λ.IntLiteral(0)), λ.IntLiteral(3))) {
					ϒerr_str = λ.Calm(ϒerr_str, "decode", λ.Cal(ϒpreferredencoding))
				}
				return ϒerr_str
			})
		ϒmimetype2ext = λ.NewFunction("mimetype2ext",
			[]λ.Param{
				{Name: "mt"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒext λ.Object
					ϒmt  = λargs[0]
					ϒres λ.Object
					τmp0 λ.Object
				)
				if ϒmt == λ.None {
					return λ.None
				}
				ϒext = λ.Calm(λ.DictLiteral(map[string]string{
					"audio/mp4":  "m4a",
					"audio/mpeg": "mp3",
				}), "get", ϒmt)
				if ϒext != λ.None {
					return ϒext
				}
				τmp0 = λ.Calm(ϒmt, "rpartition", λ.StrLiteral("/"))
				_ = λ.GetItem(τmp0, λ.IntLiteral(0))
				_ = λ.GetItem(τmp0, λ.IntLiteral(1))
				ϒres = λ.GetItem(τmp0, λ.IntLiteral(2))
				ϒres = λ.Calm(λ.Calm(λ.GetItem(λ.Calm(ϒres, "split", λ.StrLiteral(";")), λ.IntLiteral(0)), "strip"), "lower")
				return λ.Calm(λ.DictLiteral(map[string]string{
					"3gpp":              "3gp",
					"smptett+xml":       "tt",
					"ttaf+xml":          "dfxp",
					"ttml+xml":          "ttml",
					"x-flv":             "flv",
					"x-mp4-fragmented":  "mp4",
					"x-ms-sami":         "sami",
					"x-ms-wmv":          "wmv",
					"mpegurl":           "m3u8",
					"x-mpegurl":         "m3u8",
					"vnd.apple.mpegurl": "m3u8",
					"dash+xml":          "mpd",
					"f4m+xml":           "f4m",
					"hds+xml":           "f4m",
					"vnd.ms-sstr+xml":   "ism",
					"quicktime":         "mov",
					"mp2t":              "ts",
					"x-wav":             "wav",
				}), "get", ϒres, ϒres)
			})
		ϒparse_codecs = λ.NewFunction("parse_codecs",
			[]λ.Param{
				{Name: "codecs_str"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒacodec       λ.Object
					ϒcodec        λ.Object
					ϒcodecs_str   = λargs[0]
					ϒfull_codec   λ.Object
					ϒsplit_codecs λ.Object
					ϒvcodec       λ.Object
					τmp0          λ.Object
					τmp1          λ.Object
				)
				if !λ.IsTrue(ϒcodecs_str) {
					return λ.DictLiteral(map[λ.Object]λ.Object{})
				}
				ϒsplit_codecs = λ.Cal(λ.ListType, λ.Cal(λ.FilterIteratorType, λ.None, λ.Cal(λ.MapIteratorType, λ.NewFunction("<lambda>",
					[]λ.Param{
						{Name: "str"},
					},
					0, false, false,
					func(λargs []λ.Object) λ.Object {
						var (
							ϒstr = λargs[0]
						)
						return λ.Calm(ϒstr, "strip")
					}), λ.Calm(λ.Calm(λ.Calm(ϒcodecs_str, "strip"), "strip", λ.StrLiteral(",")), "split", λ.StrLiteral(",")))))
				τmp0 = λ.NewTuple(
					λ.None,
					λ.None,
				)
				ϒvcodec = λ.GetItem(τmp0, λ.IntLiteral(0))
				ϒacodec = λ.GetItem(τmp0, λ.IntLiteral(1))
				τmp0 = λ.Cal(λ.BuiltinIter, ϒsplit_codecs)
				for {
					if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
						break
					}
					ϒfull_codec = τmp1
					ϒcodec = λ.GetItem(λ.Calm(ϒfull_codec, "split", λ.StrLiteral(".")), λ.IntLiteral(0))
					if λ.Contains(λ.NewTuple(
						λ.StrLiteral("avc1"),
						λ.StrLiteral("avc2"),
						λ.StrLiteral("avc3"),
						λ.StrLiteral("avc4"),
						λ.StrLiteral("vp9"),
						λ.StrLiteral("vp8"),
						λ.StrLiteral("hev1"),
						λ.StrLiteral("hev2"),
						λ.StrLiteral("h263"),
						λ.StrLiteral("h264"),
						λ.StrLiteral("mp4v"),
						λ.StrLiteral("hvc1"),
						λ.StrLiteral("av01"),
						λ.StrLiteral("theora"),
					), ϒcodec) {
						if !λ.IsTrue(ϒvcodec) {
							ϒvcodec = ϒfull_codec
						}
					} else {
						if λ.Contains(λ.NewTuple(
							λ.StrLiteral("mp4a"),
							λ.StrLiteral("opus"),
							λ.StrLiteral("vorbis"),
							λ.StrLiteral("mp3"),
							λ.StrLiteral("aac"),
							λ.StrLiteral("ac-3"),
							λ.StrLiteral("ec-3"),
							λ.StrLiteral("eac3"),
							λ.StrLiteral("dtsc"),
							λ.StrLiteral("dtse"),
							λ.StrLiteral("dtsh"),
							λ.StrLiteral("dtsl"),
						), ϒcodec) {
							if !λ.IsTrue(ϒacodec) {
								ϒacodec = ϒfull_codec
							}
						} else {
							λ.Cal(λ.None, λ.Mod(λ.StrLiteral("WARNING: Unknown codec %s\n"), ϒfull_codec), λ.None)
						}
					}
				}
				if λ.IsTrue(func() λ.Object {
					if λv := λ.NewBool(!λ.IsTrue(ϒvcodec)); !λ.IsTrue(λv) {
						return λv
					} else {
						return λ.NewBool(!λ.IsTrue(ϒacodec))
					}
				}()) {
					if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒsplit_codecs), λ.IntLiteral(2))) {
						return λ.DictLiteral(map[string]λ.Object{
							"vcodec": λ.GetItem(ϒsplit_codecs, λ.IntLiteral(0)),
							"acodec": λ.GetItem(ϒsplit_codecs, λ.IntLiteral(1)),
						})
					}
				} else {
					return λ.DictLiteral(map[string]λ.Object{
						"vcodec": func() λ.Object {
							if λv := ϒvcodec; λ.IsTrue(λv) {
								return λv
							} else {
								return λ.StrLiteral("none")
							}
						}(),
						"acodec": func() λ.Object {
							if λv := ϒacodec; λ.IsTrue(λv) {
								return λv
							} else {
								return λ.StrLiteral("none")
							}
						}(),
					})
				}
				return λ.DictLiteral(map[λ.Object]λ.Object{})
			})
		ϒage_restricted = λ.NewFunction("age_restricted",
			[]λ.Param{
				{Name: "content_limit"},
				{Name: "age_limit"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒage_limit     = λargs[1]
					ϒcontent_limit = λargs[0]
				)
				if ϒage_limit == λ.None {
					return λ.False
				}
				if ϒcontent_limit == λ.None {
					return λ.False
				}
				return λ.Lt(ϒage_limit, ϒcontent_limit)
			})
		ϒdetermine_protocol = λ.NewFunction("determine_protocol",
			[]λ.Param{
				{Name: "info_dict"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒext       λ.Object
					ϒinfo_dict = λargs[0]
					ϒprotocol  λ.Object
					ϒurl       λ.Object
				)
				ϒprotocol = λ.Calm(ϒinfo_dict, "get", λ.StrLiteral("protocol"))
				if ϒprotocol != λ.None {
					return ϒprotocol
				}
				ϒurl = λ.GetItem(ϒinfo_dict, λ.StrLiteral("url"))
				if λ.IsTrue(λ.Calm(ϒurl, "startswith", λ.StrLiteral("rtmp"))) {
					return λ.StrLiteral("rtmp")
				} else {
					if λ.IsTrue(λ.Calm(ϒurl, "startswith", λ.StrLiteral("mms"))) {
						return λ.StrLiteral("mms")
					} else {
						if λ.IsTrue(λ.Calm(ϒurl, "startswith", λ.StrLiteral("rtsp"))) {
							return λ.StrLiteral("rtsp")
						}
					}
				}
				ϒext = λ.Cal(ϒdetermine_ext, ϒurl)
				if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("m3u8"))) {
					return λ.StrLiteral("m3u8")
				} else {
					if λ.IsTrue(λ.Eq(ϒext, λ.StrLiteral("f4m"))) {
						return λ.StrLiteral("f4m")
					}
				}
				return λ.GetAttr(λ.Cal(ϒcompat_urllib_parse_urlparse, ϒurl), "scheme", nil)
			})
		ISO639Utils = λ.Cal(λ.TypeType, λ.StrLiteral("ISO639Utils"), λ.NewTuple(λ.ObjectType), func() λ.Dict {
			var (
				ISO639Utils__lang_map  λ.Object
				ISO639Utils_long2short λ.Object
			)
			ISO639Utils__lang_map = λ.DictLiteral(map[string]string{
				"aa": "aar",
				"ab": "abk",
				"ae": "ave",
				"af": "afr",
				"ak": "aka",
				"am": "amh",
				"an": "arg",
				"ar": "ara",
				"as": "asm",
				"av": "ava",
				"ay": "aym",
				"az": "aze",
				"ba": "bak",
				"be": "bel",
				"bg": "bul",
				"bh": "bih",
				"bi": "bis",
				"bm": "bam",
				"bn": "ben",
				"bo": "bod",
				"br": "bre",
				"bs": "bos",
				"ca": "cat",
				"ce": "che",
				"ch": "cha",
				"co": "cos",
				"cr": "cre",
				"cs": "ces",
				"cu": "chu",
				"cv": "chv",
				"cy": "cym",
				"da": "dan",
				"de": "deu",
				"dv": "div",
				"dz": "dzo",
				"ee": "ewe",
				"el": "ell",
				"en": "eng",
				"eo": "epo",
				"es": "spa",
				"et": "est",
				"eu": "eus",
				"fa": "fas",
				"ff": "ful",
				"fi": "fin",
				"fj": "fij",
				"fo": "fao",
				"fr": "fra",
				"fy": "fry",
				"ga": "gle",
				"gd": "gla",
				"gl": "glg",
				"gn": "grn",
				"gu": "guj",
				"gv": "glv",
				"ha": "hau",
				"he": "heb",
				"iw": "heb",
				"hi": "hin",
				"ho": "hmo",
				"hr": "hrv",
				"ht": "hat",
				"hu": "hun",
				"hy": "hye",
				"hz": "her",
				"ia": "ina",
				"id": "ind",
				"in": "ind",
				"ie": "ile",
				"ig": "ibo",
				"ii": "iii",
				"ik": "ipk",
				"io": "ido",
				"is": "isl",
				"it": "ita",
				"iu": "iku",
				"ja": "jpn",
				"jv": "jav",
				"ka": "kat",
				"kg": "kon",
				"ki": "kik",
				"kj": "kua",
				"kk": "kaz",
				"kl": "kal",
				"km": "khm",
				"kn": "kan",
				"ko": "kor",
				"kr": "kau",
				"ks": "kas",
				"ku": "kur",
				"kv": "kom",
				"kw": "cor",
				"ky": "kir",
				"la": "lat",
				"lb": "ltz",
				"lg": "lug",
				"li": "lim",
				"ln": "lin",
				"lo": "lao",
				"lt": "lit",
				"lu": "lub",
				"lv": "lav",
				"mg": "mlg",
				"mh": "mah",
				"mi": "mri",
				"mk": "mkd",
				"ml": "mal",
				"mn": "mon",
				"mr": "mar",
				"ms": "msa",
				"mt": "mlt",
				"my": "mya",
				"na": "nau",
				"nb": "nob",
				"nd": "nde",
				"ne": "nep",
				"ng": "ndo",
				"nl": "nld",
				"nn": "nno",
				"no": "nor",
				"nr": "nbl",
				"nv": "nav",
				"ny": "nya",
				"oc": "oci",
				"oj": "oji",
				"om": "orm",
				"or": "ori",
				"os": "oss",
				"pa": "pan",
				"pi": "pli",
				"pl": "pol",
				"ps": "pus",
				"pt": "por",
				"qu": "que",
				"rm": "roh",
				"rn": "run",
				"ro": "ron",
				"ru": "rus",
				"rw": "kin",
				"sa": "san",
				"sc": "srd",
				"sd": "snd",
				"se": "sme",
				"sg": "sag",
				"si": "sin",
				"sk": "slk",
				"sl": "slv",
				"sm": "smo",
				"sn": "sna",
				"so": "som",
				"sq": "sqi",
				"sr": "srp",
				"ss": "ssw",
				"st": "sot",
				"su": "sun",
				"sv": "swe",
				"sw": "swa",
				"ta": "tam",
				"te": "tel",
				"tg": "tgk",
				"th": "tha",
				"ti": "tir",
				"tk": "tuk",
				"tl": "tgl",
				"tn": "tsn",
				"to": "ton",
				"tr": "tur",
				"ts": "tso",
				"tt": "tat",
				"tw": "twi",
				"ty": "tah",
				"ug": "uig",
				"uk": "ukr",
				"ur": "urd",
				"uz": "uzb",
				"ve": "ven",
				"vi": "vie",
				"vo": "vol",
				"wa": "wln",
				"wo": "wol",
				"xh": "xho",
				"yi": "yid",
				"ji": "yid",
				"yo": "yor",
				"za": "zha",
				"zh": "zho",
				"zu": "zul",
			})
			ISO639Utils_long2short = λ.NewFunction("long2short",
				[]λ.Param{
					{Name: "cls"},
					{Name: "code"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls        = λargs[0]
						ϒcode       = λargs[1]
						ϒlong_name  λ.Object
						ϒshort_name λ.Object
						τmp0        λ.Object
						τmp1        λ.Object
						τmp2        λ.Object
					)
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.GetAttr(ϒcls, "_lang_map", nil), "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒshort_name = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒlong_name = λ.GetItem(τmp2, λ.IntLiteral(1))
						if λ.IsTrue(λ.Eq(ϒlong_name, ϒcode)) {
							return ϒshort_name
						}
					}
					return λ.None
				})
			ISO639Utils_long2short = λ.Cal(λ.ClassMethodType, ISO639Utils_long2short)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_lang_map":  ISO639Utils__lang_map,
				"long2short": ISO639Utils_long2short,
			})
		}())
		ISO3166Utils = λ.Cal(λ.TypeType, λ.StrLiteral("ISO3166Utils"), λ.NewTuple(λ.ObjectType), func() λ.Dict {
			var (
				ISO3166Utils__country_map λ.Object
				ISO3166Utils_short2full   λ.Object
			)
			ISO3166Utils__country_map = λ.DictLiteral(map[string]string{
				"AF": "Afghanistan",
				"AX": "Åland Islands",
				"AL": "Albania",
				"DZ": "Algeria",
				"AS": "American Samoa",
				"AD": "Andorra",
				"AO": "Angola",
				"AI": "Anguilla",
				"AQ": "Antarctica",
				"AG": "Antigua and Barbuda",
				"AR": "Argentina",
				"AM": "Armenia",
				"AW": "Aruba",
				"AU": "Australia",
				"AT": "Austria",
				"AZ": "Azerbaijan",
				"BS": "Bahamas",
				"BH": "Bahrain",
				"BD": "Bangladesh",
				"BB": "Barbados",
				"BY": "Belarus",
				"BE": "Belgium",
				"BZ": "Belize",
				"BJ": "Benin",
				"BM": "Bermuda",
				"BT": "Bhutan",
				"BO": "Bolivia, Plurinational State of",
				"BQ": "Bonaire, Sint Eustatius and Saba",
				"BA": "Bosnia and Herzegovina",
				"BW": "Botswana",
				"BV": "Bouvet Island",
				"BR": "Brazil",
				"IO": "British Indian Ocean Territory",
				"BN": "Brunei Darussalam",
				"BG": "Bulgaria",
				"BF": "Burkina Faso",
				"BI": "Burundi",
				"KH": "Cambodia",
				"CM": "Cameroon",
				"CA": "Canada",
				"CV": "Cape Verde",
				"KY": "Cayman Islands",
				"CF": "Central African Republic",
				"TD": "Chad",
				"CL": "Chile",
				"CN": "China",
				"CX": "Christmas Island",
				"CC": "Cocos (Keeling) Islands",
				"CO": "Colombia",
				"KM": "Comoros",
				"CG": "Congo",
				"CD": "Congo, the Democratic Republic of the",
				"CK": "Cook Islands",
				"CR": "Costa Rica",
				"CI": "Côte d'Ivoire",
				"HR": "Croatia",
				"CU": "Cuba",
				"CW": "Curaçao",
				"CY": "Cyprus",
				"CZ": "Czech Republic",
				"DK": "Denmark",
				"DJ": "Djibouti",
				"DM": "Dominica",
				"DO": "Dominican Republic",
				"EC": "Ecuador",
				"EG": "Egypt",
				"SV": "El Salvador",
				"GQ": "Equatorial Guinea",
				"ER": "Eritrea",
				"EE": "Estonia",
				"ET": "Ethiopia",
				"FK": "Falkland Islands (Malvinas)",
				"FO": "Faroe Islands",
				"FJ": "Fiji",
				"FI": "Finland",
				"FR": "France",
				"GF": "French Guiana",
				"PF": "French Polynesia",
				"TF": "French Southern Territories",
				"GA": "Gabon",
				"GM": "Gambia",
				"GE": "Georgia",
				"DE": "Germany",
				"GH": "Ghana",
				"GI": "Gibraltar",
				"GR": "Greece",
				"GL": "Greenland",
				"GD": "Grenada",
				"GP": "Guadeloupe",
				"GU": "Guam",
				"GT": "Guatemala",
				"GG": "Guernsey",
				"GN": "Guinea",
				"GW": "Guinea-Bissau",
				"GY": "Guyana",
				"HT": "Haiti",
				"HM": "Heard Island and McDonald Islands",
				"VA": "Holy See (Vatican City State)",
				"HN": "Honduras",
				"HK": "Hong Kong",
				"HU": "Hungary",
				"IS": "Iceland",
				"IN": "India",
				"ID": "Indonesia",
				"IR": "Iran, Islamic Republic of",
				"IQ": "Iraq",
				"IE": "Ireland",
				"IM": "Isle of Man",
				"IL": "Israel",
				"IT": "Italy",
				"JM": "Jamaica",
				"JP": "Japan",
				"JE": "Jersey",
				"JO": "Jordan",
				"KZ": "Kazakhstan",
				"KE": "Kenya",
				"KI": "Kiribati",
				"KP": "Korea, Democratic People's Republic of",
				"KR": "Korea, Republic of",
				"KW": "Kuwait",
				"KG": "Kyrgyzstan",
				"LA": "Lao People's Democratic Republic",
				"LV": "Latvia",
				"LB": "Lebanon",
				"LS": "Lesotho",
				"LR": "Liberia",
				"LY": "Libya",
				"LI": "Liechtenstein",
				"LT": "Lithuania",
				"LU": "Luxembourg",
				"MO": "Macao",
				"MK": "Macedonia, the Former Yugoslav Republic of",
				"MG": "Madagascar",
				"MW": "Malawi",
				"MY": "Malaysia",
				"MV": "Maldives",
				"ML": "Mali",
				"MT": "Malta",
				"MH": "Marshall Islands",
				"MQ": "Martinique",
				"MR": "Mauritania",
				"MU": "Mauritius",
				"YT": "Mayotte",
				"MX": "Mexico",
				"FM": "Micronesia, Federated States of",
				"MD": "Moldova, Republic of",
				"MC": "Monaco",
				"MN": "Mongolia",
				"ME": "Montenegro",
				"MS": "Montserrat",
				"MA": "Morocco",
				"MZ": "Mozambique",
				"MM": "Myanmar",
				"NA": "Namibia",
				"NR": "Nauru",
				"NP": "Nepal",
				"NL": "Netherlands",
				"NC": "New Caledonia",
				"NZ": "New Zealand",
				"NI": "Nicaragua",
				"NE": "Niger",
				"NG": "Nigeria",
				"NU": "Niue",
				"NF": "Norfolk Island",
				"MP": "Northern Mariana Islands",
				"NO": "Norway",
				"OM": "Oman",
				"PK": "Pakistan",
				"PW": "Palau",
				"PS": "Palestine, State of",
				"PA": "Panama",
				"PG": "Papua New Guinea",
				"PY": "Paraguay",
				"PE": "Peru",
				"PH": "Philippines",
				"PN": "Pitcairn",
				"PL": "Poland",
				"PT": "Portugal",
				"PR": "Puerto Rico",
				"QA": "Qatar",
				"RE": "Réunion",
				"RO": "Romania",
				"RU": "Russian Federation",
				"RW": "Rwanda",
				"BL": "Saint Barthélemy",
				"SH": "Saint Helena, Ascension and Tristan da Cunha",
				"KN": "Saint Kitts and Nevis",
				"LC": "Saint Lucia",
				"MF": "Saint Martin (French part)",
				"PM": "Saint Pierre and Miquelon",
				"VC": "Saint Vincent and the Grenadines",
				"WS": "Samoa",
				"SM": "San Marino",
				"ST": "Sao Tome and Principe",
				"SA": "Saudi Arabia",
				"SN": "Senegal",
				"RS": "Serbia",
				"SC": "Seychelles",
				"SL": "Sierra Leone",
				"SG": "Singapore",
				"SX": "Sint Maarten (Dutch part)",
				"SK": "Slovakia",
				"SI": "Slovenia",
				"SB": "Solomon Islands",
				"SO": "Somalia",
				"ZA": "South Africa",
				"GS": "South Georgia and the South Sandwich Islands",
				"SS": "South Sudan",
				"ES": "Spain",
				"LK": "Sri Lanka",
				"SD": "Sudan",
				"SR": "Suriname",
				"SJ": "Svalbard and Jan Mayen",
				"SZ": "Swaziland",
				"SE": "Sweden",
				"CH": "Switzerland",
				"SY": "Syrian Arab Republic",
				"TW": "Taiwan, Province of China",
				"TJ": "Tajikistan",
				"TZ": "Tanzania, United Republic of",
				"TH": "Thailand",
				"TL": "Timor-Leste",
				"TG": "Togo",
				"TK": "Tokelau",
				"TO": "Tonga",
				"TT": "Trinidad and Tobago",
				"TN": "Tunisia",
				"TR": "Turkey",
				"TM": "Turkmenistan",
				"TC": "Turks and Caicos Islands",
				"TV": "Tuvalu",
				"UG": "Uganda",
				"UA": "Ukraine",
				"AE": "United Arab Emirates",
				"GB": "United Kingdom",
				"US": "United States",
				"UM": "United States Minor Outlying Islands",
				"UY": "Uruguay",
				"UZ": "Uzbekistan",
				"VU": "Vanuatu",
				"VE": "Venezuela, Bolivarian Republic of",
				"VN": "Viet Nam",
				"VG": "Virgin Islands, British",
				"VI": "Virgin Islands, U.S.",
				"WF": "Wallis and Futuna",
				"EH": "Western Sahara",
				"YE": "Yemen",
				"ZM": "Zambia",
				"ZW": "Zimbabwe",
			})
			ISO3166Utils_short2full = λ.NewFunction("short2full",
				[]λ.Param{
					{Name: "cls"},
					{Name: "code"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcls  = λargs[0]
						ϒcode = λargs[1]
					)
					return λ.Calm(λ.GetAttr(ϒcls, "_country_map", nil), "get", λ.Calm(ϒcode, "upper"))
				})
			ISO3166Utils_short2full = λ.Cal(λ.ClassMethodType, ISO3166Utils_short2full)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_country_map": ISO3166Utils__country_map,
				"short2full":   ISO3166Utils_short2full,
			})
		}())
		GeoUtils = λ.Cal(λ.TypeType, λ.StrLiteral("GeoUtils"), λ.NewTuple(λ.ObjectType), func() λ.Dict {
			var (
				GeoUtils__country_ip_map λ.Object
				GeoUtils_random_ipv4     λ.Object
			)
			GeoUtils__country_ip_map = λ.DictLiteral(map[string]string{
				"AD": "46.172.224.0/19",
				"AE": "94.200.0.0/13",
				"AF": "149.54.0.0/17",
				"AG": "209.59.64.0/18",
				"AI": "204.14.248.0/21",
				"AL": "46.99.0.0/16",
				"AM": "46.70.0.0/15",
				"AO": "105.168.0.0/13",
				"AP": "182.50.184.0/21",
				"AQ": "23.154.160.0/24",
				"AR": "181.0.0.0/12",
				"AS": "202.70.112.0/20",
				"AT": "77.116.0.0/14",
				"AU": "1.128.0.0/11",
				"AW": "181.41.0.0/18",
				"AX": "185.217.4.0/22",
				"AZ": "5.197.0.0/16",
				"BA": "31.176.128.0/17",
				"BB": "65.48.128.0/17",
				"BD": "114.130.0.0/16",
				"BE": "57.0.0.0/8",
				"BF": "102.178.0.0/15",
				"BG": "95.42.0.0/15",
				"BH": "37.131.0.0/17",
				"BI": "154.117.192.0/18",
				"BJ": "137.255.0.0/16",
				"BL": "185.212.72.0/23",
				"BM": "196.12.64.0/18",
				"BN": "156.31.0.0/16",
				"BO": "161.56.0.0/16",
				"BQ": "161.0.80.0/20",
				"BR": "191.128.0.0/12",
				"BS": "24.51.64.0/18",
				"BT": "119.2.96.0/19",
				"BW": "168.167.0.0/16",
				"BY": "178.120.0.0/13",
				"BZ": "179.42.192.0/18",
				"CA": "99.224.0.0/11",
				"CD": "41.243.0.0/16",
				"CF": "197.242.176.0/21",
				"CG": "160.113.0.0/16",
				"CH": "85.0.0.0/13",
				"CI": "102.136.0.0/14",
				"CK": "202.65.32.0/19",
				"CL": "152.172.0.0/14",
				"CM": "102.244.0.0/14",
				"CN": "36.128.0.0/10",
				"CO": "181.240.0.0/12",
				"CR": "201.192.0.0/12",
				"CU": "152.206.0.0/15",
				"CV": "165.90.96.0/19",
				"CW": "190.88.128.0/17",
				"CY": "31.153.0.0/16",
				"CZ": "88.100.0.0/14",
				"DE": "53.0.0.0/8",
				"DJ": "197.241.0.0/17",
				"DK": "87.48.0.0/12",
				"DM": "192.243.48.0/20",
				"DO": "152.166.0.0/15",
				"DZ": "41.96.0.0/12",
				"EC": "186.68.0.0/15",
				"EE": "90.190.0.0/15",
				"EG": "156.160.0.0/11",
				"ER": "196.200.96.0/20",
				"ES": "88.0.0.0/11",
				"ET": "196.188.0.0/14",
				"EU": "2.16.0.0/13",
				"FI": "91.152.0.0/13",
				"FJ": "144.120.0.0/16",
				"FK": "80.73.208.0/21",
				"FM": "119.252.112.0/20",
				"FO": "88.85.32.0/19",
				"FR": "90.0.0.0/9",
				"GA": "41.158.0.0/15",
				"GB": "25.0.0.0/8",
				"GD": "74.122.88.0/21",
				"GE": "31.146.0.0/16",
				"GF": "161.22.64.0/18",
				"GG": "62.68.160.0/19",
				"GH": "154.160.0.0/12",
				"GI": "95.164.0.0/16",
				"GL": "88.83.0.0/19",
				"GM": "160.182.0.0/15",
				"GN": "197.149.192.0/18",
				"GP": "104.250.0.0/19",
				"GQ": "105.235.224.0/20",
				"GR": "94.64.0.0/13",
				"GT": "168.234.0.0/16",
				"GU": "168.123.0.0/16",
				"GW": "197.214.80.0/20",
				"GY": "181.41.64.0/18",
				"HK": "113.252.0.0/14",
				"HN": "181.210.0.0/16",
				"HR": "93.136.0.0/13",
				"HT": "148.102.128.0/17",
				"HU": "84.0.0.0/14",
				"ID": "39.192.0.0/10",
				"IE": "87.32.0.0/12",
				"IL": "79.176.0.0/13",
				"IM": "5.62.80.0/20",
				"IN": "117.192.0.0/10",
				"IO": "203.83.48.0/21",
				"IQ": "37.236.0.0/14",
				"IR": "2.176.0.0/12",
				"IS": "82.221.0.0/16",
				"IT": "79.0.0.0/10",
				"JE": "87.244.64.0/18",
				"JM": "72.27.0.0/17",
				"JO": "176.29.0.0/16",
				"JP": "133.0.0.0/8",
				"KE": "105.48.0.0/12",
				"KG": "158.181.128.0/17",
				"KH": "36.37.128.0/17",
				"KI": "103.25.140.0/22",
				"KM": "197.255.224.0/20",
				"KN": "198.167.192.0/19",
				"KP": "175.45.176.0/22",
				"KR": "175.192.0.0/10",
				"KW": "37.36.0.0/14",
				"KY": "64.96.0.0/15",
				"KZ": "2.72.0.0/13",
				"LA": "115.84.64.0/18",
				"LB": "178.135.0.0/16",
				"LC": "24.92.144.0/20",
				"LI": "82.117.0.0/19",
				"LK": "112.134.0.0/15",
				"LR": "102.183.0.0/16",
				"LS": "129.232.0.0/17",
				"LT": "78.56.0.0/13",
				"LU": "188.42.0.0/16",
				"LV": "46.109.0.0/16",
				"LY": "41.252.0.0/14",
				"MA": "105.128.0.0/11",
				"MC": "88.209.64.0/18",
				"MD": "37.246.0.0/16",
				"ME": "178.175.0.0/17",
				"MF": "74.112.232.0/21",
				"MG": "154.126.0.0/17",
				"MH": "117.103.88.0/21",
				"MK": "77.28.0.0/15",
				"ML": "154.118.128.0/18",
				"MM": "37.111.0.0/17",
				"MN": "49.0.128.0/17",
				"MO": "60.246.0.0/16",
				"MP": "202.88.64.0/20",
				"MQ": "109.203.224.0/19",
				"MR": "41.188.64.0/18",
				"MS": "208.90.112.0/22",
				"MT": "46.11.0.0/16",
				"MU": "105.16.0.0/12",
				"MV": "27.114.128.0/18",
				"MW": "102.70.0.0/15",
				"MX": "187.192.0.0/11",
				"MY": "175.136.0.0/13",
				"MZ": "197.218.0.0/15",
				"NA": "41.182.0.0/16",
				"NC": "101.101.0.0/18",
				"NE": "197.214.0.0/18",
				"NF": "203.17.240.0/22",
				"NG": "105.112.0.0/12",
				"NI": "186.76.0.0/15",
				"NL": "145.96.0.0/11",
				"NO": "84.208.0.0/13",
				"NP": "36.252.0.0/15",
				"NR": "203.98.224.0/19",
				"NU": "49.156.48.0/22",
				"NZ": "49.224.0.0/14",
				"OM": "5.36.0.0/15",
				"PA": "186.72.0.0/15",
				"PE": "186.160.0.0/14",
				"PF": "123.50.64.0/18",
				"PG": "124.240.192.0/19",
				"PH": "49.144.0.0/13",
				"PK": "39.32.0.0/11",
				"PL": "83.0.0.0/11",
				"PM": "70.36.0.0/20",
				"PR": "66.50.0.0/16",
				"PS": "188.161.0.0/16",
				"PT": "85.240.0.0/13",
				"PW": "202.124.224.0/20",
				"PY": "181.120.0.0/14",
				"QA": "37.210.0.0/15",
				"RE": "102.35.0.0/16",
				"RO": "79.112.0.0/13",
				"RS": "93.86.0.0/15",
				"RU": "5.136.0.0/13",
				"RW": "41.186.0.0/16",
				"SA": "188.48.0.0/13",
				"SB": "202.1.160.0/19",
				"SC": "154.192.0.0/11",
				"SD": "102.120.0.0/13",
				"SE": "78.64.0.0/12",
				"SG": "8.128.0.0/10",
				"SI": "188.196.0.0/14",
				"SK": "78.98.0.0/15",
				"SL": "102.143.0.0/17",
				"SM": "89.186.32.0/19",
				"SN": "41.82.0.0/15",
				"SO": "154.115.192.0/18",
				"SR": "186.179.128.0/17",
				"SS": "105.235.208.0/21",
				"ST": "197.159.160.0/19",
				"SV": "168.243.0.0/16",
				"SX": "190.102.0.0/20",
				"SY": "5.0.0.0/16",
				"SZ": "41.84.224.0/19",
				"TC": "65.255.48.0/20",
				"TD": "154.68.128.0/19",
				"TG": "196.168.0.0/14",
				"TH": "171.96.0.0/13",
				"TJ": "85.9.128.0/18",
				"TK": "27.96.24.0/21",
				"TL": "180.189.160.0/20",
				"TM": "95.85.96.0/19",
				"TN": "197.0.0.0/11",
				"TO": "175.176.144.0/21",
				"TR": "78.160.0.0/11",
				"TT": "186.44.0.0/15",
				"TV": "202.2.96.0/19",
				"TW": "120.96.0.0/11",
				"TZ": "156.156.0.0/14",
				"UA": "37.52.0.0/14",
				"UG": "102.80.0.0/13",
				"US": "6.0.0.0/8",
				"UY": "167.56.0.0/13",
				"UZ": "84.54.64.0/18",
				"VA": "212.77.0.0/19",
				"VC": "207.191.240.0/21",
				"VE": "186.88.0.0/13",
				"VG": "66.81.192.0/20",
				"VI": "146.226.0.0/16",
				"VN": "14.160.0.0/11",
				"VU": "202.80.32.0/20",
				"WF": "117.20.32.0/21",
				"WS": "202.4.32.0/19",
				"YE": "134.35.0.0/16",
				"YT": "41.242.116.0/22",
				"ZA": "41.0.0.0/11",
				"ZM": "102.144.0.0/13",
				"ZW": "102.177.192.0/18",
			})
			GeoUtils_random_ipv4 = λ.NewFunction("random_ipv4",
				[]λ.Param{
					{Name: "cls"},
					{Name: "code_or_block"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						RandomIPv4     λ.Object
						ϒblock         λ.Object
						ϒcls           = λargs[0]
						ϒcode_or_block = λargs[1]
					)
					if λ.IsTrue(λ.Eq(λ.Cal(λ.BuiltinLen, ϒcode_or_block), λ.IntLiteral(2))) {
						ϒblock = λ.Calm(λ.GetAttr(ϒcls, "_country_ip_map", nil), "get", λ.Calm(ϒcode_or_block, "upper"))
						if !λ.IsTrue(ϒblock) {
							return λ.None
						}
					} else {
						ϒblock = ϒcode_or_block
					}
					RandomIPv4 = Ωnet.RandomIPv4
					return λ.Cal(RandomIPv4, ϒblock)
				})
			GeoUtils_random_ipv4 = λ.Cal(λ.ClassMethodType, GeoUtils_random_ipv4)
			return λ.ClassDictLiteral(map[string]λ.Object{
				"_country_ip_map": GeoUtils__country_ip_map,
				"random_ipv4":     GeoUtils_random_ipv4,
			})
		}())
		ϒencode_base_n = λ.NewFunction("encode_base_n",
			[]λ.Param{
				{Name: "num"},
				{Name: "n"},
				{Name: "table", Def: λ.None},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					FULL_TABLE λ.Object
					ϒn         = λargs[1]
					ϒnum       = λargs[0]
					ϒret       λ.Object
					ϒtable     = λargs[2]
				)
				FULL_TABLE = λ.StrLiteral("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
				if !λ.IsTrue(ϒtable) {
					ϒtable = λ.GetItem(FULL_TABLE, λ.NewSlice(λ.None, ϒn, λ.None))
				}
				if λ.IsTrue(λ.Gt(ϒn, λ.Cal(λ.BuiltinLen, ϒtable))) {
					panic(λ.Raise(λ.Cal(λ.ValueErrorType, λ.Mod(λ.StrLiteral("base %d exceeds table length %d"), λ.NewTuple(
						ϒn,
						λ.Cal(λ.BuiltinLen, ϒtable),
					)))))
				}
				if λ.IsTrue(λ.Eq(ϒnum, λ.IntLiteral(0))) {
					return λ.GetItem(ϒtable, λ.IntLiteral(0))
				}
				ϒret = λ.StrLiteral("")
				for λ.IsTrue(ϒnum) {
					ϒret = λ.Add(λ.GetItem(ϒtable, λ.Mod(ϒnum, ϒn)), ϒret)
					ϒnum = λ.FloorDiv(ϒnum, ϒn)
				}
				return ϒret
			})
		ϒparse_m3u8_attributes = λ.NewFunction("parse_m3u8_attributes",
			[]λ.Param{
				{Name: "attrib"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒattrib = λargs[0]
					ϒinfo   λ.Object
					ϒkey    λ.Object
					ϒval    λ.Object
					τmp0    λ.Object
					τmp1    λ.Object
					τmp2    λ.Object
				)
				ϒinfo = λ.DictLiteral(map[λ.Object]λ.Object{})
				τmp0 = λ.Cal(λ.BuiltinIter, λ.Cal(Ωre.ϒfindall, λ.StrLiteral("(?P<key>[A-Z0-9-]+)=(?P<val>\"[^\"]+\"|[^\",]+)(?:,|$)"), ϒattrib))
				for {
					if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
						break
					}
					τmp2 = τmp1
					ϒkey = λ.GetItem(τmp2, λ.IntLiteral(0))
					ϒval = λ.GetItem(τmp2, λ.IntLiteral(1))
					if λ.IsTrue(λ.Calm(ϒval, "startswith", λ.StrLiteral("\""))) {
						ϒval = λ.GetItem(ϒval, λ.NewSlice(λ.IntLiteral(1), λ.Neg(λ.IntLiteral(1)), λ.None))
					}
					λ.SetItem(ϒinfo, ϒkey, ϒval)
				}
				return ϒinfo
			})
		ϒrandom_birthday = λ.NewFunction("random_birthday",
			[]λ.Param{
				{Name: "year_field"},
				{Name: "month_field"},
				{Name: "day_field"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒday_field   = λargs[2]
					ϒmonth_field = λargs[1]
					ϒyear_field  = λargs[0]
				)
				return λ.DictLiteral(map[λ.Object]string{
					ϒyear_field:  "1987",
					ϒmonth_field: "12",
					ϒday_field:   "12",
				})
			})
		ϒclean_podcast_url = λ.NewFunction("clean_podcast_url",
			[]λ.Param{
				{Name: "url"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒurl = λargs[0]
				)
				return λ.Cal(Ωre.ϒsub, λ.StrLiteral("(?x)\n        (?:\n            (?:\n                chtbl\\.com/track|\n                media\\.blubrry\\.com| # https://create.blubrry.com/resources/podcast-media-download-statistics/getting-started/\n                play\\.podtrac\\.com\n            )/[^/]+|\n            (?:dts|www)\\.podtrac\\.com/(?:pts/)?redirect\\.[0-9a-z]{3,4}| # http://analytics.podtrac.com/how-to-measure\n            flex\\.acast\\.com|\n            pd(?:\n                cn\\.co| # https://podcorn.com/analytics-prefix/\n                st\\.fm # https://podsights.com/docs/\n            )/e\n        )/"), λ.StrLiteral(""), ϒurl)
			})
	})
}
