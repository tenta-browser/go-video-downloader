// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * jsinterp/module.go: transpiled from https://github.com/ytdl-org/youtube-dl/blob/master/youtube_dl/jsinterp.py
 */

package jsinterp

import (
	Ωoperator "github.com/tenta-browser/go-video-downloader/gen/operator"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	ExtractorError     λ.Object
	ϒ_ASSIGN_OPERATORS λ.Object
	ϒ_OPERATORS        λ.Object
	ϒremove_quotes     λ.Object
)

func init() {
	λ.InitModule(func() {
		ExtractorError = Ωutils.ExtractorError
		ϒremove_quotes = Ωutils.ϒremove_quotes
		ϒ_OPERATORS = λ.NewList(
			λ.NewTuple(
				λ.StrLiteral("|"),
				Ωoperator.ϒor_,
			),
			λ.NewTuple(
				λ.StrLiteral("^"),
				Ωoperator.ϒxor,
			),
			λ.NewTuple(
				λ.StrLiteral("&"),
				Ωoperator.ϒand_,
			),
			λ.NewTuple(
				λ.StrLiteral(">>"),
				Ωoperator.ϒrshift,
			),
			λ.NewTuple(
				λ.StrLiteral("<<"),
				Ωoperator.ϒlshift,
			),
			λ.NewTuple(
				λ.StrLiteral("-"),
				Ωoperator.ϒsub,
			),
			λ.NewTuple(
				λ.StrLiteral("+"),
				Ωoperator.ϒadd,
			),
			λ.NewTuple(
				λ.StrLiteral("%"),
				Ωoperator.ϒmod,
			),
			λ.NewTuple(
				λ.StrLiteral("/"),
				Ωoperator.ϒtruediv,
			),
			λ.NewTuple(
				λ.StrLiteral("*"),
				Ωoperator.ϒmul,
			),
		)
		ϒ_ASSIGN_OPERATORS = λ.Cal(λ.ListType, λ.Cal(λ.NewFunction("<generator>",
			nil,
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				return λ.NewGenerator(func(λgy λ.Yielder) λ.Object {
					var (
						ϒop     λ.Object
						ϒopfunc λ.Object
						τmp0    λ.Object
						τmp1    λ.Object
						τmp2    λ.Object
					)
					τmp0 = λ.Cal(λ.BuiltinIter, ϒ_OPERATORS)
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = τmp1
						ϒop = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒopfunc = λ.GetItem(τmp2, λ.IntLiteral(1))
						λgy.Yield(λ.NewTuple(
							λ.Add(ϒop, λ.StrLiteral("=")),
							ϒopfunc,
						))
					}
					return λ.None
				})
			})))
		λ.Calm(ϒ_ASSIGN_OPERATORS, "append", λ.NewTuple(
			λ.StrLiteral("="),
			λ.NewFunction("<lambda>",
				[]λ.Param{
					{Name: "cur"},
					{Name: "right"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒcur   = λargs[0]
						ϒright = λargs[1]
					)
					_ = ϒcur
					return ϒright
				}),
		))
	})
}
