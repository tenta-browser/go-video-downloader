// Code generated by transpiler. DO NOT EDIT.

/**
 * Go Video Downloader
 *
 *    Copyright 2019 Tenta, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions, please contact developer@tenta.io
 *
 * entry/module.go: transpiled from lib/entry.py
 */

package entry

import (
	Ωcookiejar "github.com/tenta-browser/go-video-downloader/gen/http/cookiejar"
	Ωrequester "github.com/tenta-browser/go-video-downloader/gen/lib/requester"
	ΩYoutubeDL "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/YoutubeDL"
	Ωcache "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/cache"
	Ωcompat "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/compat"
	Ωutils "github.com/tenta-browser/go-video-downloader/gen/youtube_dl/utils"
	Ωlib "github.com/tenta-browser/go-video-downloader/lib"
	λ "github.com/tenta-browser/go-video-downloader/runtime"
)

var (
	Cache              λ.Object
	SetExtractorRunner λ.Object
	SimpleYoutubeDL    λ.Object
	YoutubeDL          λ.Object
	ϒcompat_basestring λ.Object
	ϒrun_extractor     λ.Object
	ϒsanitized_Request λ.Object
)

func init() {
	λ.InitModule(func() {
		YoutubeDL = ΩYoutubeDL.YoutubeDL
		ϒcompat_basestring = Ωcompat.ϒcompat_basestring
		ϒsanitized_Request = Ωutils.ϒsanitized_Request
		Cache = Ωcache.Cache
		SetExtractorRunner = Ωlib.SetExtractorRunner
		SimpleYoutubeDL = λ.Cal(λ.TypeType, λ.StrLiteral("SimpleYoutubeDL"), λ.NewTuple(YoutubeDL), func() λ.Dict {
			var (
				SimpleYoutubeDL___init__              λ.Object
				SimpleYoutubeDL__match_entry          λ.Object
				SimpleYoutubeDL__write_string         λ.Object
				SimpleYoutubeDL_build_format_selector λ.Object
				SimpleYoutubeDL_process_video_result  λ.Object
				SimpleYoutubeDL_urlopen               λ.Object
			)
			SimpleYoutubeDL___init__ = λ.NewFunction("__init__",
				[]λ.Param{
					{Name: "self"},
					{Name: "connector"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒconnector = λargs[1]
						ϒself      = λargs[0]
					)
					λ.SetAttr(ϒself, "_ies", λ.NewList())
					λ.SetAttr(ϒself, "_ies_instances", λ.DictLiteral(map[λ.Object]λ.Object{}))
					λ.SetAttr(ϒself, "_num_downloads", λ.IntLiteral(0))
					λ.SetAttr(ϒself, "_err_file", λ.None)
					λ.SetAttr(ϒself, "params", λ.DictLiteral(map[string]λ.Object{
						"cachedir":   λ.False,
						"no_color":   λ.True,
						"simulate":   λ.True,
						"noplaylist": λ.True,
						"username":   λ.Calm(ϒconnector, "get", λ.StrLiteral("username"), λ.None),
						"password":   λ.Calm(ϒconnector, "get", λ.StrLiteral("password"), λ.None),
					}))
					λ.SetAttr(ϒself, "connector", ϒconnector)
					λ.SetAttr(ϒself, "browser", λ.Calm(ϒconnector, "get", λ.StrLiteral("browser")))
					λ.SetAttr(ϒself, "cookiejar", λ.Cal(Ωcookiejar.CookieJar, λ.GetItem(ϒconnector, λ.StrLiteral("jar"))))
					λ.Calm(ϒself, "add_default_info_extractors")
					λ.SetAttr(ϒself, "cache", λ.Cal(Cache, ϒself))
					return λ.None
				})
			SimpleYoutubeDL__write_string = λ.NewFunction("_write_string",
				[]λ.Param{
					{Name: "self"},
					{Name: "s"},
					{Name: "_"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒ_    = λargs[2]
						ϒs    = λargs[1]
						ϒself = λargs[0]
					)
					_ = ϒ_
					_ = ϒself
					λ.Call(λ.BuiltinPrint, λ.NewArgs(ϒs), λ.KWArgs{
						{Name: "end", Value: λ.StrLiteral("")},
					})
					return λ.None
				})
			SimpleYoutubeDL_urlopen = λ.NewFunction("urlopen",
				[]λ.Param{
					{Name: "self"},
					{Name: "req"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒkey   λ.Object
						ϒreq   = λargs[1]
						ϒself  = λargs[0]
						ϒvalue λ.Object
						τmp0   λ.Object
						τmp1   λ.Object
						τmp2   λ.Object
					)
					if λ.IsTrue(λ.Cal(λ.BuiltinIsInstance, ϒreq, ϒcompat_basestring)) {
						ϒreq = λ.Cal(ϒsanitized_Request, ϒreq)
					}
					τmp0 = λ.Cal(λ.BuiltinIter, λ.Calm(λ.Calm(λ.GetAttr(ϒself, "connector", nil), "get", λ.StrLiteral("headers"), λ.DictLiteral(map[λ.Object]λ.Object{})), "items"))
					for {
						if τmp1 = λ.NextDefault(τmp0, λ.AfterLast); τmp1 == λ.AfterLast {
							break
						}
						τmp2 = λ.UnpackIterable(τmp1, 2)
						ϒkey = λ.GetItem(τmp2, λ.IntLiteral(0))
						ϒvalue = λ.GetItem(τmp2, λ.IntLiteral(1))
						if λ.Calm(ϒreq, "get_header", ϒkey, λ.None) == λ.None {
							λ.Calm(ϒreq, "add_header", ϒkey, ϒvalue)
						}
					}
					return λ.Cal(Ωrequester.ϒdo, λ.GetItem(λ.GetAttr(ϒself, "connector", nil), λ.StrLiteral("client")), ϒreq)
				})
			SimpleYoutubeDL_build_format_selector = λ.NewFunction("build_format_selector",
				[]λ.Param{
					{Name: "self"},
					{Name: "_"},
				},
				0, false, false,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒ_               = λargs[1]
						ϒcomplete_filter λ.Object
						ϒproto_filter    λ.Object
						ϒselector        λ.Object
						ϒself            = λargs[0]
					)
					_ = ϒ_
					_ = ϒself
					ϒproto_filter = λ.NewFunction("proto_filter",
						[]λ.Param{
							{Name: "f"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒf = λargs[0]
							)
							return λ.NewBool(λ.Contains(λ.NewTuple(
								λ.StrLiteral("none"),
								λ.StrLiteral("http"),
								λ.StrLiteral("https"),
							), λ.Calm(ϒf, "get", λ.StrLiteral("protocol"))))
						})
					ϒcomplete_filter = λ.NewFunction("complete_filter",
						[]λ.Param{
							{Name: "f"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒf = λargs[0]
							)
							return func() λ.Object {
								if λv := λ.Ne(λ.Calm(ϒf, "get", λ.StrLiteral("vcodec")), λ.StrLiteral("none")); !λ.IsTrue(λv) {
									return λv
								} else {
									return λ.Ne(λ.Calm(ϒf, "get", λ.StrLiteral("acodec")), λ.StrLiteral("none"))
								}
							}()
						})
					ϒselector = λ.NewFunction("selector",
						[]λ.Param{
							{Name: "ctx"},
						},
						0, false, false,
						func(λargs []λ.Object) λ.Object {
							var (
								ϒctx                = λargs[0]
								ϒformats            λ.Object
								ϒincomplete_formats λ.Object
							)
							ϒformats = λ.GetItem(ϒctx, λ.StrLiteral("formats"))
							ϒincomplete_formats = λ.GetItem(ϒctx, λ.StrLiteral("incomplete_formats"))
							ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.FilterIteratorType, ϒproto_filter, ϒformats))
							if !λ.IsTrue(ϒformats) {
								return λ.NewList()
							}
							if λ.IsTrue(ϒincomplete_formats) {
								return λ.GetItem(ϒformats, λ.NewSlice(λ.Neg(λ.IntLiteral(1)), λ.None, λ.None))
							}
							ϒformats = λ.Cal(λ.ListType, λ.Cal(λ.FilterIteratorType, ϒcomplete_filter, ϒformats))
							return λ.GetItem(ϒformats, λ.NewSlice(λ.Neg(λ.IntLiteral(1)), λ.None, λ.None))
						})
					return ϒselector
				})
			SimpleYoutubeDL__match_entry = λ.NewFunction("_match_entry",
				[]λ.Param{
					{Name: "self"},
				},
				0, true, true,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒ_    = λargs[1]
						ϒ__   = λargs[2]
						ϒself = λargs[0]
					)
					_ = ϒ_
					_ = ϒ__
					_ = ϒself
					return λ.None
				})
			SimpleYoutubeDL_process_video_result = λ.NewFunction("process_video_result",
				[]λ.Param{
					{Name: "self"},
				},
				0, true, true,
				func(λargs []λ.Object) λ.Object {
					var (
						ϒarg       = λargs[1]
						ϒinfo_dict λ.Object
						ϒkwargs    = λargs[2]
						ϒself      = λargs[0]
					)
					ϒinfo_dict = λ.Call(λ.GetAttr(λ.Cal(λ.SuperType, SimpleYoutubeDL, ϒself), "process_video_result", nil), λ.NewArgs(λ.Unpack(λ.AsStarred(ϒarg))...), λ.KWArgs{
						{Name: "", Value: ϒkwargs},
					})
					λ.Calm(ϒself, "process_info", ϒinfo_dict)
					return ϒinfo_dict
				})
			return λ.ClassDictLiteral(map[string]λ.Object{
				"__init__":              SimpleYoutubeDL___init__,
				"_match_entry":          SimpleYoutubeDL__match_entry,
				"_write_string":         SimpleYoutubeDL__write_string,
				"build_format_selector": SimpleYoutubeDL_build_format_selector,
				"process_video_result":  SimpleYoutubeDL_process_video_result,
				"urlopen":               SimpleYoutubeDL_urlopen,
			})
		}())
		ϒrun_extractor = λ.NewFunction("run_extractor",
			[]λ.Param{
				{Name: "url"},
				{Name: "connector"},
			},
			0, false, false,
			func(λargs []λ.Object) λ.Object {
				var (
					ϒconnector = λargs[1]
					ϒurl       = λargs[0]
				)
				return λ.Call(λ.GetAttr(λ.Cal(SimpleYoutubeDL, ϒconnector), "extract_info", nil), λ.NewArgs(ϒurl), λ.KWArgs{
					{Name: "download", Value: λ.False},
				})
			})
		λ.Cal(SetExtractorRunner, ϒrun_extractor)
	})
}
